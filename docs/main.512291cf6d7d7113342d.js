!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(f[n]=t[n]);0==--g&&0===m&&_()}(e,n),t&&t(e,n)};var n,r=!0,i="512291cf6d7d7113342d",o=1e4,s={},a=[],u=[];function c(e){var t=O[e];if(!t)return E;var r=function(r){return t.hot.active?(O[r]?-1===O[r].parents.indexOf(e)&&O[r].parents.push(e):(a=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),a=[]),E(r)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return E[e]},set:function(t){E[e]=t}}};for(var o in E)Object.prototype.hasOwnProperty.call(E,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(e){return"ready"===h&&d("prepare"),m++,E.e(e).then(t,function(e){throw t(),e});function t(){m--,"prepare"===h&&(y[e]||C(e),0===m&&0===g&&_())}},r.t=function(e,t){return 1&t&&(e=r(e)),E.t(e,-2&t)},r}var l=[],h="idle";function d(e){h=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var p,f,v,g=0,m=0,y={},b={},w={};function x(e){return+e+""===e?+e:e}function k(e){if("idle"!==h)throw new Error("check() is only allowed in idle status");return r=e,d("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=E.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(o).then(function(e){if(!e)return d("idle"),null;b={},y={},w=e.c,v=e.h,d("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});f={};return C(0),"prepare"===h&&0===m&&0===g&&_(),t})}function C(e){w[e]?(b[e]=!0,g++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=E.p+""+e+"."+i+".hot-update.js",t.appendChild(n)}(e)):y[e]=!0}function _(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return S(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in f)Object.prototype.hasOwnProperty.call(f,n)&&t.push(x(n));e.resolve(t)}}function S(t){if("ready"!==h)throw new Error("apply() is only allowed in ready status");var n,r,o,u,c;function l(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var i=r.pop(),o=i.id,s=i.chain;if((u=O[o])&&!u.hot._selfAccepted){if(u.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(u.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var a=0;a<u.parents.length;a++){var c=u.parents[a],l=O[c];if(l){if(l.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([c]),moduleId:o,parentId:c};-1===t.indexOf(c)&&(l.hot._acceptedDependencies[o]?(n[c]||(n[c]=[]),p(n[c],[o])):(delete n[c],t.push(c),r.push({chain:s.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var g={},m=[],y={},b=function(){console.warn("[HMR] unexpected require("+C.moduleId+") to disposed module")};for(var k in f)if(Object.prototype.hasOwnProperty.call(f,k)){var C;c=x(k);var _=!1,S=!1,A=!1,P="";switch((C=f[k]?l(c):{type:"disposed",moduleId:k}).chain&&(P="\nUpdate propagation: "+C.chain.join(" -> ")),C.type){case"self-declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(_=new Error("Aborted because of self decline: "+C.moduleId+P));break;case"declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+C.moduleId+" in "+C.parentId+P));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(C),t.ignoreUnaccepted||(_=new Error("Aborted because "+c+" is not accepted"+P));break;case"accepted":t.onAccepted&&t.onAccepted(C),S=!0;break;case"disposed":t.onDisposed&&t.onDisposed(C),A=!0;break;default:throw new Error("Unexception type "+C.type)}if(_)return d("abort"),Promise.reject(_);if(S)for(c in y[c]=f[c],p(m,C.outdatedModules),C.outdatedDependencies)Object.prototype.hasOwnProperty.call(C.outdatedDependencies,c)&&(g[c]||(g[c]=[]),p(g[c],C.outdatedDependencies[c]));A&&(p(m,[C.moduleId]),y[c]=b)}var T,j=[];for(r=0;r<m.length;r++)c=m[r],O[c]&&O[c].hot._selfAccepted&&j.push({module:c,errorHandler:O[c].hot._selfAccepted});d("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var R,N,M=m.slice();M.length>0;)if(c=M.pop(),u=O[c]){var I={},V=u.hot._disposeHandlers;for(o=0;o<V.length;o++)(n=V[o])(I);for(s[c]=I,u.hot.active=!1,delete O[c],delete g[c],o=0;o<u.children.length;o++){var L=O[u.children[o]];L&&((T=L.parents.indexOf(c))>=0&&L.parents.splice(T,1))}}for(c in g)if(Object.prototype.hasOwnProperty.call(g,c)&&(u=O[c]))for(N=g[c],o=0;o<N.length;o++)R=N[o],(T=u.children.indexOf(R))>=0&&u.children.splice(T,1);for(c in d("apply"),i=v,y)Object.prototype.hasOwnProperty.call(y,c)&&(e[c]=y[c]);var F=null;for(c in g)if(Object.prototype.hasOwnProperty.call(g,c)&&(u=O[c])){N=g[c];var B=[];for(r=0;r<N.length;r++)if(R=N[r],n=u.hot._acceptedDependencies[R]){if(-1!==B.indexOf(n))continue;B.push(n)}for(r=0;r<B.length;r++){n=B[r];try{n(N)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:c,dependencyId:N[r],error:e}),t.ignoreErrored||F||(F=e)}}}for(r=0;r<j.length;r++){var q=j[r];c=q.module,a=[c];try{E(c)}catch(e){if("function"==typeof q.errorHandler)try{q.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:n,originalError:e}),t.ignoreErrored||F||(F=n),F||(F=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:c,error:e}),t.ignoreErrored||F||(F=e)}}return F?(d("fail"),Promise.reject(F)):(d("idle"),new Promise(function(e){e(m)}))}var O={};function E(t){if(O[t])return O[t].exports;var r=O[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:k,apply:S,status:function(e){if(!e)return h;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(u=a,a=[],u),children:[]};return e[t].call(r.exports,r,r.exports,c(t)),r.l=!0,r.exports}E.m=e,E.c=O,E.d=function(e,t,n){E.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},E.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},E.t=function(e,t){if(1&t&&(e=E(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(E.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)E.d(n,r,function(t){return e[t]}.bind(null,r));return n},E.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return E.d(t,"a",t),t},E.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},E.p="",E.h=function(){return i},c(19)(E.s=19)}({0:function(e,t,n){"use strict";(function(e){function r(e,t,n){if(t){if(t.innerError&&n)return t;var r="\n------------------------------------------------\n";e+=r+"Inner Error:\n","string"==typeof t?e+="Message: "+t:(t.message?e+="Message: "+t.message:e+="Unknown Inner Error Type. Displaying Inner Error as JSON:\n "+JSON.stringify(t,null,"  "),t.stack&&(e+="\nInner Error Stack:\n"+t.stack,e+="\nEnd Inner Error Stack")),e+=r}var i=new Error(e);return t&&(i.innerError=t),i}n.d(t,"a",function(){return r}),n.d(t,"c",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return s}),n.d(t,"f",function(){return a}),n.d(t,"e",function(){return u}),n.d(t,"g",function(){return c});var i={},o={noop:function(){},eachModule:function(){},moduleName:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(e){return e})};o.global="undefined"!=typeof self?self:void 0!==e?e:new Function("return this")();var s={},a=!1;function u(e){a||(a=!0,"function"!=typeof Object.getPropertyDescriptor&&(Object.getPropertyDescriptor=function(e,t){for(var n=Object.getOwnPropertyDescriptor(e,t),r=Object.getPrototypeOf(e);void 0===n&&null!==r;)n=Object.getOwnPropertyDescriptor(r,t),r=Object.getPrototypeOf(r);return n}),e(o,i,s))}function c(){a=!1}}).call(this,n(17))},1:function(e,t,n){"use strict";n.d(t,"Q",function(){return N}),n.d(t,"a",function(){return M}),n.d(t,"i",function(){return I}),n.d(t,"j",function(){return V}),n.d(t,"h",function(){return L}),n.d(t,"O",function(){return q}),n.d(t,"P",function(){return D}),n.d(t,"J",function(){return z}),n.d(t,"lb",function(){return H}),n.d(t,"n",function(){return U}),n.d(t,"v",function(){return Q}),n.d(t,"G",function(){return $}),n.d(t,"b",function(){return G}),n.d(t,"C",function(){return K}),n.d(t,"nb",function(){return X}),n.d(t,"t",function(){return Y}),n.d(t,"l",function(){return J}),n.d(t,"r",function(){return Z}),n.d(t,"D",function(){return ee}),n.d(t,"p",function(){return te}),n.d(t,"A",function(){return ne}),n.d(t,"L",function(){return re}),n.d(t,"e",function(){return oe}),n.d(t,"z",function(){return ae}),n.d(t,"s",function(){return ue}),n.d(t,"y",function(){return ce}),n.d(t,"x",function(){return le}),n.d(t,"jb",function(){return de}),n.d(t,"M",function(){return pe}),n.d(t,"F",function(){return fe}),n.d(t,"N",function(){return ve}),n.d(t,"f",function(){return _e}),n.d(t,"K",function(){return Se}),n.d(t,"H",function(){return Pe}),n.d(t,"w",function(){return Te}),n.d(t,"u",function(){return je}),n.d(t,"q",function(){return Re}),n.d(t,"I",function(){return Ve}),n.d(t,"k",function(){return Le}),n.d(t,"c",function(){return Fe}),n.d(t,"d",function(){return qe}),n.d(t,"o",function(){return Ue}),n.d(t,"U",function(){return Qe}),n.d(t,"T",function(){return $e}),n.d(t,"B",function(){return et}),n.d(t,"g",function(){return nt}),n.d(t,"m",function(){return rt}),n.d(t,"eb",function(){return it}),n.d(t,"R",function(){return ot}),n.d(t,"X",function(){return st}),n.d(t,"W",function(){return at}),n.d(t,"fb",function(){return ut}),n.d(t,"S",function(){return ct}),n.d(t,"Y",function(){return lt}),n.d(t,"gb",function(){return dt}),n.d(t,"cb",function(){return pt}),n.d(t,"db",function(){return vt}),n.d(t,"V",function(){return gt}),n.d(t,"ib",function(){return mt}),n.d(t,"hb",function(){return yt}),n.d(t,"ab",function(){return bt}),n.d(t,"bb",function(){return wt}),n.d(t,"kb",function(){return xt}),n.d(t,"Z",function(){return kt}),n.d(t,"mb",function(){return Ct}),n.d(t,"E",function(){return _t});var r,i,o,s,a,u,c,l,h,d,p,f,v,g,m,y,b,w,x,k,C=n(5),_=n(2),S=n(0),O=n(7),E=n(6),A=n(4),P=n(3),T=n(8),j=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N={enterBegin:"animation:enter:begin",enterActive:"animation:enter:active",enterDone:"animation:enter:done",enterTimeout:"animation:enter:timeout",leaveBegin:"animation:leave:begin",leaveActive:"animation:leave:active",leaveDone:"animation:leave:done",leaveTimeout:"animation:leave:timeout",staggerNext:"animation:stagger:next",removeClassBegin:"animation:remove-class:begin",removeClassActive:"animation:remove-class:active",removeClassDone:"animation:remove-class:done",removeClassTimeout:"animation:remove-class:timeout",addClassBegin:"animation:add-class:begin",addClassActive:"animation:add-class:active",addClassDone:"animation:add-class:done",addClassTimeout:"animation:add-class:timeout",animateBegin:"animation:animate:begin",animateActive:"animation:animate:active",animateDone:"animation:animate:done",animateTimeout:"animation:animate:timeout",sequenceBegin:"animation:sequence:begin",sequenceDone:"animation:sequence:done"},M=function(){function e(){}return e.prototype.enter=function(e){return Promise.resolve(!1)},e.prototype.leave=function(e){return Promise.resolve(!1)},e.prototype.removeClass=function(e,t){return e.classList.remove(t),Promise.resolve(!1)},e.prototype.addClass=function(e,t){return e.classList.add(t),Promise.resolve(!1)},e.prototype.animate=function(e,t){return Promise.resolve(!1)},e.prototype.runSequence=function(e){},e.prototype.registerEffect=function(e,t){},e.prototype.unregisterEffect=function(e){},e}(),I=function(){function e(e){this.owner=e,this.owner._compositionCount++}return e.prototype.done=function(){this.owner._compositionCount--,this.owner._tryCompleteTransaction()},e}(),V=function(){function e(e){this.owner=e,this.owner._ownershipToken=this,this.thenable=this._createThenable()}return e.prototype.waitForCompositionComplete=function(){return this.owner._tryCompleteTransaction(),this.thenable},e.prototype.resolve=function(){this._resolveCallback()},e.prototype._createThenable=function(){var e=this;return new Promise(function(t,n){e._resolveCallback=t})},e}(),L=function(){function e(){this._ownershipToken=null,this._compositionCount=0}return e.prototype.tryCapture=function(){return null===this._ownershipToken?new V(this):null},e.prototype.enlist=function(){return new I(this)},e.prototype._tryCompleteTransaction=function(){if(this._compositionCount<=0&&(this._compositionCount=0,null!==this._ownershipToken)){var e=this._ownershipToken;this._ownershipToken=null,e.resolve()}},e}(),F=/([A-Z])/g;function B(e){return"-"+e.toLowerCase()}function q(e){return(e.charAt(0).toLowerCase()+e.slice(1)).replace(F,B)}function D(e){return!(e.auInterpolationTarget||/[^\t\n\r ]/.test(e.textContent))}var z=function(){function e(){}return e.prototype.initialize=function(e,t){this.instance=e.get(t)},e.prototype.register=function(e,t){e.registerViewEngineHooks(this.instance)},e.prototype.load=function(e,t){},e.convention=function(t){if(t.endsWith("ViewEngineHooks"))return new e},e}();function H(e){var t=function(e){_.d.define(_.d.resource,new z,e)};return e?t(e):t}var U=function(){function e(e){this.element=e,this.subscriptions={}}return e.prototype._enqueueHandler=function(e){this.subscriptions[e.eventName]=this.subscriptions[e.eventName]||[],this.subscriptions[e.eventName].push(e)},e.prototype._dequeueHandler=function(e){var t=void 0,n=this.subscriptions[e.eventName];return n&&(t=n.indexOf(e))>-1&&n.splice(t,1),e},e.prototype.publish=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=S.b.createCustomEvent(e,{cancelable:r,bubbles:n,detail:t});this.element.dispatchEvent(i)},e.prototype.subscribe=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if("function"==typeof t)return new W(this,e,t,n,!1)},e.prototype.subscribeOnce=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if("function"==typeof t)return new W(this,e,t,n,!0)},e.prototype.dispose=function(e){if(e&&"string"==typeof e){var t=this.subscriptions[e];if(t)for(;t.length;){var n=t.pop();n&&n.dispose()}}else this.disposeAll()},e.prototype.disposeAll=function(){for(var e in this.subscriptions)this.dispose(e)},e}(),W=function(){function e(e,t,n,r,i){this.owner=e,this.eventName=t,this.handler=n,this.capture="boolean"==typeof r?r:r.capture,this.bubbles=!this.capture,this.captureOrOptions=r,this.once=i,e.element.addEventListener(t,this,r),e._enqueueHandler(this)}return e.prototype.handleEvent=function(e){(0,this.handler)(e),this.once&&this.dispose()},e.prototype.dispose=function(){this.owner.element.removeEventListener(this.eventName,this,this.captureOrOptions),this.owner._dequeueHandler(this),this.owner=this.handler=null},e}(),Q=function(){function e(){this.dependencies={}}return e.prototype.addDependency=function(e){this.dependencies[e]=!0},e.prototype.hasDependency=function(e){return e in this.dependencies},e}(),$=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.targetShadowDOM=e,this.compileSurrogate=t,this.associatedModuleId=null};$.normal=new $;var G=function(){function e(){this.initiatedByBehavior=!1,this.enhance=!1,this.partReplacements=null,this.viewFactory=null,this.originalAttrName=null,this.skipContentProcessing=!1,this.contentFactory=null,this.viewModel=null,this.anchorIsContainer=!1,this.host=null,this.attributes=null,this.type=null,this.attrName=null,this.inheritBindingContext=!1}return e.enhance=function(){var t=new e;return t.enhance=!0,t},e.unitTest=function(t,n){var r=new e;return r.type=t,r.attributes=n||{},r},e.element=function(t,n){var r=new e;return r.type=n,r.attributes={},r.anchorIsContainer=!(t.hasAttribute("containerless")||n.containerless),r.initiatedByBehavior=!0,r},e.attribute=function(t,n){var r=new e;return r.attrName=t,r.type=n||null,r.attributes={},r},e.dynamic=function(t,n,r){var i=new e;return i.host=t,i.viewModel=n,i.viewFactory=r,i.inheritBindingContext=!0,i},e}();G.normal=new G;var K=(i=r=function(){function e(){this.injectorId=null,this.parentInjectorId=null,this.shadowSlot=!1,this.slotName=null,this.slotFallbackFactory=null,this.contentExpression=null,this.expressions=null,this.behaviorInstructions=null,this.providers=null,this.viewFactory=null,this.anchorIsContainer=!1,this.elementInstruction=null,this.lifting=!1,this.values=null}return e.shadowSlot=function(t){var n=new e;return n.parentInjectorId=t,n.shadowSlot=!0,n},e.contentExpression=function(t){var n=new e;return n.contentExpression=t,n},e.lifting=function(t,n){var r=new e;return r.parentInjectorId=t,r.expressions=e.noExpressions,r.behaviorInstructions=[n],r.viewFactory=n.viewFactory,r.providers=[n.type.target],r.lifting=!0,r},e.normal=function(t,n,r,i,o,s){var a=new e;return a.injectorId=t,a.parentInjectorId=n,a.providers=r,a.behaviorInstructions=i,a.expressions=o,a.anchorIsContainer=!s||s.anchorIsContainer,a.elementInstruction=s,a},e.surrogate=function(t,n,r,i){var o=new e;return o.expressions=r,o.behaviorInstructions=n,o.providers=t,o.values=i,o},e}(),r.noExpressions=Object.freeze([]),i),X=_.f.create("aurelia:view-strategy",{validate:function(e){return"function"==typeof e.loadViewFactory||"View strategies must implement: loadViewFactory(viewEngine: ViewEngine, compileInstruction: ViewCompileInstruction, loadContext?: ResourceLoadContext): Promise<ViewFactory>"},compose:function(e){"function"!=typeof e.makeRelativeTo&&(e.makeRelativeTo=S.d.noop)}}),Y=X()(o=function(){function e(e){this.path=e,this.absolutePath=null}return e.prototype.loadViewFactory=function(e,t,n,r){return null===this.absolutePath&&this.moduleId&&(this.absolutePath=Object(E.d)(this.path,this.moduleId)),t.associatedModuleId=this.moduleId,e.loadViewFactory(this.absolutePath||this.path,t,n,r)},e.prototype.makeRelativeTo=function(e){null===this.absolutePath&&(this.absolutePath=Object(E.d)(this.path,e))},e}())||o,J=X()(s=function(){function e(e,t){this.moduleId=t.moduleId,this.viewUrl=e.convertOriginToViewUrl(t)}return e.prototype.loadViewFactory=function(e,t,n,r){return t.associatedModuleId=this.moduleId,e.loadViewFactory(this.viewUrl,t,n,r)},e}())||s,Z=X()(a=function(){function e(e,t){this.dependencies=e||null,this.dependencyBaseUrl=t||""}return e.prototype.loadViewFactory=function(e,t,n,r){var i=this.entry,o=this.dependencies;if(i&&i.factoryIsReady)return Promise.resolve(null);if(this.entry=i=new O.c(this.moduleId||this.dependencyBaseUrl),i.dependencies=[],i.templateIsLoaded=!0,null!==o)for(var s=0,a=o.length;s<a;++s){var u=o[s];"string"==typeof u||"function"==typeof u?i.addDependency(u):i.addDependency(u.from,u.as)}return t.associatedModuleId=this.moduleId,e.loadViewFactory(i,t,n,r)},e}())||a,ee=X()(u=function(){function e(e,t){this.moduleId=e,this.entry=t}return e.prototype.loadViewFactory=function(e,t,n,r){var i=this.entry;return i.factoryIsReady?Promise.resolve(i.factory):(t.associatedModuleId=this.moduleId,e.loadViewFactory(i,t,n,r))},e}())||u,te=X()(c=function(){function e(e,t,n){this.markup=e,this.dependencies=t||null,this.dependencyBaseUrl=n||""}return e.prototype.loadViewFactory=function(e,t,n,r){var i=this.entry,o=this.dependencies;if(i&&i.factoryIsReady)return Promise.resolve(i.factory);if(this.entry=i=new O.c(this.moduleId||this.dependencyBaseUrl),i.template=S.b.createTemplateFromMarkup(this.markup),null!==o)for(var s=0,a=o.length;s<a;++s){var u=o[s];"string"==typeof u||"function"==typeof u?i.addDependency(u):i.addDependency(u.from,u.as)}return t.associatedModuleId=this.moduleId,e.loadViewFactory(i,t,n,r)},e}())||c,ne=X()(l=function(){function e(e){("string"==typeof e||e instanceof HTMLTemplateElement)&&(e={template:e}),this.template=e.template,this.dependencies=e.dependencies||[],this.factoryIsReady=!1,this.onReady=null}return e.prototype.loadViewFactory=function(e,t,n,r){var i=this;if(this.factoryIsReady)return Promise.resolve(this.factory);var o=this.dependencies;return o=(o="function"==typeof o?o():o)||[],o=Array.isArray(o)?o:[o],Promise.all(o).then(function(n){var o=e.container,s=e.appResources,a=e.viewCompiler,u=new pe(s),c=void 0,l=[];r&&u.autoRegister(o,r);var h=n,d=Array.isArray(h),p=0;for(h=d?h:h[Symbol.iterator]();;){var f;if(d){if(p>=h.length)break;f=h[p++]}else{if((p=h.next()).done)break;f=p.value}var v=f;if("function"==typeof v)c=u.autoRegister(o,v);else{if(!v||"object"!==(void 0===v?"undefined":R(v)))throw new Error('dependency neither function nor object. Received: "'+(void 0===v?"undefined":R(v))+'"');for(var g in v){var m=v[g];"function"==typeof m&&(c=u.autoRegister(o,m))}}null!==c.elementName&&l.push(c)}return Promise.all(l.map(function(e){return e.load(o,e.target)})).then(function(){var e=a.compile(i.template,u,t);return i.factoryIsReady=!0,i.factory=e,e})})},e}())||l,re=(d=h=function(){function e(){}return e.prototype.getViewStrategy=function(t){if(!t)return null;if("object"===(void 0===t?"undefined":R(t))&&"getViewStrategy"in t){var n=_.a.get(t.constructor);return"string"==typeof(t=t.getViewStrategy())&&(t=new Y(t)),X.assert(t),n.moduleId&&t.makeRelativeTo(n.moduleId),t}if("string"==typeof t&&(t=new Y(t)),X.validate(t))return t;if("function"!=typeof t&&(t=t.constructor),"$view"in t){var r=t.$view,i=void 0;return i=null===(r="function"==typeof r?r.call(t):r)?new Z:r instanceof ne?r:new ne(r),_.d.define(e.viewStrategyMetadataKey,i,t),i}var o=_.a.get(t),s=_.d.get(e.viewStrategyMetadataKey,t);if(s)o.moduleId&&(s.moduleId=o.moduleId);else{if(!o.moduleId)throw new Error("Cannot determine default view strategy for object.",t);s=this.createFallbackViewStrategy(o)}return s},e.prototype.createFallbackViewStrategy=function(e){return new J(this,e)},e.prototype.convertOriginToViewUrl=function(e){var t=e.moduleId;return(t.endsWith(".js")||t.endsWith(".ts")?t.substring(0,t.length-3):t)+".html"},e}(),h.viewStrategyMetadataKey="aurelia:view-strategy",d);function ie(e){throw new Error("BindingLanguage must implement "+e+"().")}var oe=function(){function e(){}return e.prototype.inspectAttribute=function(e,t,n,r){ie("inspectAttribute")},e.prototype.createAttributeInstruction=function(e,t,n,r){ie("createAttributeInstruction")},e.prototype.inspectTextContent=function(e,t){ie("inspectTextContent")},e}(),se=Object.freeze([]),ae=function(){function e(e){this.element=e,this.element.auSlotAttribute=this}return e.inject=function(){return[S.b.Element]},e.prototype.valueChanged=function(e,t){},e}(),ue=function(){function e(e,t,n,r){this.anchor=e,this.anchor.viewSlot=this,this.name=t,this.destinationName=n,this.fallbackFactory=r,this.destinationSlot=null,this.projections=0,this.contentView=null,new ae(this.anchor).value=this.destinationName}return e.prototype.renderFallbackContent=function(e,t,n,r){if(null===this.contentView){this.contentView=this.fallbackFactory.create(this.ownerView.container),this.contentView.bind(this.ownerView.bindingContext,this.ownerView.overrideContext);var i=Object.create(null);i[this.destinationSlot.name]=this.destinationSlot,le.distributeView(this.contentView,i,n,r,this.destinationSlot.name)}},e.prototype.passThroughTo=function(e){this.destinationSlot=e},e.prototype.addNode=function(t,n,r,i){null!==this.contentView&&(this.contentView.removeNodes(),this.contentView.detached(),this.contentView.unbind(),this.contentView=null),n.viewSlot instanceof e?n.viewSlot.passThroughTo(this):(this.projections++,this.destinationSlot.addNode(t,n,r,i))},e.prototype.removeView=function(e,t){this.projections--,this.destinationSlot.removeView(e,t),this.needsFallbackRendering&&this.renderFallbackContent(null,se,t)},e.prototype.removeAll=function(e){this.projections=0,this.destinationSlot.removeAll(e),this.needsFallbackRendering&&this.renderFallbackContent(null,se,e)},e.prototype.projectFrom=function(e,t){this.destinationSlot.projectFrom(e,t)},e.prototype.created=function(e){this.ownerView=e},e.prototype.bind=function(e){this.contentView&&this.contentView.bind(e.bindingContext,e.overrideContext)},e.prototype.attached=function(){this.contentView&&this.contentView.attached()},e.prototype.detached=function(){this.contentView&&this.contentView.detached()},e.prototype.unbind=function(){this.contentView&&this.contentView.unbind()},j(e,[{key:"needsFallbackRendering",get:function(){return this.fallbackFactory&&0===this.projections}}]),e}(),ce=function(){function e(e,t,n){this.anchor=e,this.anchor.isContentProjectionSource=!0,this.anchor.viewSlot=this,this.name=t,this.fallbackFactory=n,this.contentView=null,this.projections=0,this.children=[],this.projectFromAnchors=null,this.destinationSlots=null}return e.prototype.addNode=function(e,t,n,r,i){if(null!==this.contentView&&(this.contentView.removeNodes(),this.contentView.detached(),this.contentView.unbind(),this.contentView=null),t.viewSlot instanceof ue)t.viewSlot.passThroughTo(this);else if(null!==this.destinationSlots)le.distributeNodes(e,[t],this.destinationSlots,this,r);else{t.auOwnerView=e,t.auProjectionSource=n,t.auAssignedSlot=this;var o=this._findAnchor(e,t,n,r);o.parentNode.insertBefore(t,o),this.children.push(t),this.projections++}},e.prototype.removeView=function(e,t){if(null!==this.destinationSlots)le.undistributeView(e,this.destinationSlots,this);else if(this.contentView&&this.contentView.hasSlots)le.undistributeView(e,this.contentView.slots,t);else{var n=this.children.find(function(e){return e.auSlotProjectFrom===t});if(n){for(var r=n.auProjectionChildren,i=0,o=r.length;i<o;++i){var s=r[i];s.auOwnerView===e&&(r.splice(i,1),e.fragment.appendChild(s),i--,o--,this.projections--)}this.needsFallbackRendering&&this.renderFallbackContent(e,se,t)}}},e.prototype.removeAll=function(e){if(null!==this.destinationSlots)le.undistributeAll(this.destinationSlots,this);else if(this.contentView&&this.contentView.hasSlots)le.undistributeAll(this.contentView.slots,e);else{var t=this.children.find(function(t){return t.auSlotProjectFrom===e});if(t){for(var n=t.auProjectionChildren,r=0,i=n.length;r<i;++r){var o=n[r];o.auOwnerView.fragment.appendChild(o),this.projections--}t.auProjectionChildren=[],this.needsFallbackRendering&&this.renderFallbackContent(null,se,e)}}},e.prototype._findAnchor=function(e,t,n,r){if(n){var i=this.children.find(function(e){return e.auSlotProjectFrom===n});if(i){if(void 0!==r)for(var o=i.auProjectionChildren,s=-1,a=void 0,u=0,c=o.length;u<c;++u){var l=o[u];if(l.auOwnerView!==a&&(s++,a=l.auOwnerView,s>=r&&a!==e))return o.splice(u,0,t),l}return i.auProjectionChildren.push(t),i}}return this.anchor},e.prototype.projectTo=function(e){this.destinationSlots=e},e.prototype.projectFrom=function(e,t){var n=S.b.createComment("anchor"),r=this.anchor.parentNode;n.auSlotProjectFrom=t,n.auOwnerView=e,n.auProjectionChildren=[],r.insertBefore(n,this.anchor),this.children.push(n),null===this.projectFromAnchors&&(this.projectFromAnchors=[]),this.projectFromAnchors.push(n)},e.prototype.renderFallbackContent=function(e,t,n,r){if(null===this.contentView&&(this.contentView=this.fallbackFactory.create(this.ownerView.container),this.contentView.bind(this.ownerView.bindingContext,this.ownerView.overrideContext),this.contentView.insertNodesBefore(this.anchor)),this.contentView.hasSlots){var i=this.contentView.slots,o=this.projectFromAnchors;if(null!==o)for(var s in i)for(var a=i[s],u=0,c=o.length;u<c;++u){var l=o[u];a.projectFrom(l.auOwnerView,l.auSlotProjectFrom)}this.fallbackSlots=i,le.distributeNodes(e,t,i,n,r)}},e.prototype.created=function(e){this.ownerView=e},e.prototype.bind=function(e){this.contentView&&this.contentView.bind(e.bindingContext,e.overrideContext)},e.prototype.attached=function(){this.contentView&&this.contentView.attached()},e.prototype.detached=function(){this.contentView&&this.contentView.detached()},e.prototype.unbind=function(){this.contentView&&this.contentView.unbind()},j(e,[{key:"needsFallbackRendering",get:function(){return this.fallbackFactory&&0===this.projections}}]),e}(),le=(f=p=function(){function e(){}return e.getSlotName=function(t){return void 0===t.auSlotAttribute?e.defaultSlotKey:t.auSlotAttribute.value},e.distributeView=function(t,n,r,i,o){var s=void 0;if(null===t)s=se;else{var a=t.fragment.childNodes,u=a.length;s=new Array(u);for(var c=0;c<u;++c)s[c]=a[c]}e.distributeNodes(t,s,n,r,i,o)},e.undistributeView=function(e,t,n){for(var r in t)t[r].removeView(e,n)},e.undistributeAll=function(e,t){for(var n in e)e[n].removeAll(t)},e.distributeNodes=function(t,n,r,i,o,s){for(var a=0,u=n.length;a<u;++a){var c=n[a],l=c.nodeType;if(c.isContentProjectionSource){for(var h in c.viewSlot.projectTo(r),r)r[h].projectFrom(t,c.viewSlot);n.splice(a,1),u--,a--}else if(1===l||3===l||c.viewSlot instanceof ue)if(3===l&&D(c))n.splice(a,1),u--,a--;else{var d=r[s||e.getSlotName(c)];d&&(d.addNode(t,c,i,o),n.splice(a,1),u--,a--)}else n.splice(a,1),u--,a--}for(var p in r){var f=r[p];f.needsFallbackRendering&&f.renderFallbackContent(t,n,i,o)}},e}(),p.defaultSlotKey="__au-default-slot-key__",f);function he(e,t,n,r){if(t){var i=e[t];if(i){if(i!==n)throw new Error("Attempted to register "+r+" when one with the same name already exists. Name: "+t+".")}else e[t]=n}}function de(e,t){if(/[A-Z]/.test(e)){var n=q(e);return C.getLogger("templating").warn("'"+e+"' is not a valid "+t+" name and has been converted to '"+n+"'. Upper-case letters are not allowed because the DOM is not case-sensitive."),n}return e}var pe=function(){function e(e,t){this.bindingLanguage=null,this.parent=e||null,this.hasParent=null!==this.parent,this.viewUrl=t||"",this.lookupFunctions={valueConverters:this.getValueConverter.bind(this),bindingBehaviors:this.getBindingBehavior.bind(this)},this.attributes=Object.create(null),this.elements=Object.create(null),this.valueConverters=Object.create(null),this.bindingBehaviors=Object.create(null),this.attributeMap=Object.create(null),this.values=Object.create(null),this.beforeCompile=this.afterCompile=this.beforeCreate=this.afterCreate=this.beforeBind=this.beforeUnbind=!1}return e.convention=function(e,t){var n=void 0;if(t&&"__au_resource__"in t)return t;if("$resource"in e){var r=e.$resource;if("string"==typeof r)(n=t||new Ue).__au_resource__=!0,n.elementName||(n.elementName=de(r,"custom element"));else{"function"==typeof r&&(r=r.call(e)),"string"==typeof r&&(r={name:r});var i=(r=Object.assign({},r)).type||"element",o=r.name;switch(i){case"element":case"attribute":(n=t||new Ue).__au_resource__=!0,"element"===i?n.elementName||(n.elementName=o?de(o,"custom element"):q(e.name)):n.attributeName||(n.attributeName=o?de(o,"custom attribute"):q(e.name)),"templateController"in r&&(r.liftsContent=r.templateController,delete r.templateController),"defaultBindingMode"in r&&void 0!==n.attributeDefaultBindingMode&&(r.attributeDefaultBindingMode=r.defaultBindingMode,delete r.defaultBindingMode),delete r.name,Object.assign(n,r);break;case"valueConverter":n=new P.Z(Object(P.eb)(o||e.name));break;case"bindingBehavior":n=new P.i(Object(P.eb)(o||e.name));break;case"viewEngineHooks":n=new z}}if(n instanceof Ue){var s="string"==typeof r?void 0:r.bindables,a=n.properties;if(Array.isArray(s))for(var u=0,c=s.length;c>u;++u){var l=s[u];if(!l||"string"!=typeof l&&!l.name)throw new Error('Invalid bindable property at "'+u+'" for class "'+e.name+'". Expected either a string or an object with "name" property.');for(var h=new qe(l),d=!1,p=0,f=a.length;f>p;++p)if(a[p].name===h.name){d=!0;break}d||h.registerWith(e,n)}}}return n},e.prototype._tryAddHook=function(e,t){if("function"==typeof e[t]){for(var n=e[t].bind(e),r=1,i=void 0;void 0!==this[i=t+r.toString()];)r++;this[t]=!0,this[i]=n}},e.prototype._invokeHook=function(e,t,n,r,i){if(this.hasParent&&this.parent._invokeHook(e,t,n,r,i),this[e]){this[e+"1"](t,n,r,i);var o=e+"2";if(this[o]&&(this[o](t,n,r,i),this[o=e+"3"])){this[o](t,n,r,i);for(var s=4;void 0!==this[o=e+s.toString()];)this[o](t,n,r,i),s++}}},e.prototype.registerViewEngineHooks=function(e){this._tryAddHook(e,"beforeCompile"),this._tryAddHook(e,"afterCompile"),this._tryAddHook(e,"beforeCreate"),this._tryAddHook(e,"afterCreate"),this._tryAddHook(e,"beforeBind"),this._tryAddHook(e,"beforeUnbind")},e.prototype.getBindingLanguage=function(e){return this.bindingLanguage||(this.bindingLanguage=e)},e.prototype.patchInParent=function(e){var t=this.parent;this.parent=e||null,this.hasParent=null!==this.parent,null===e.parent&&(e.parent=t,e.hasParent=null!==t)},e.prototype.relativeToView=function(e){return Object(E.d)(e,this.viewUrl)},e.prototype.registerElement=function(e,t){he(this.elements,e,t,"an Element")},e.prototype.getElement=function(e){return this.elements[e]||(this.hasParent?this.parent.getElement(e):null)},e.prototype.mapAttribute=function(e){return this.attributeMap[e]||(this.hasParent?this.parent.mapAttribute(e):null)},e.prototype.registerAttribute=function(e,t,n){this.attributeMap[e]=n,he(this.attributes,e,t,"an Attribute")},e.prototype.getAttribute=function(e){return this.attributes[e]||(this.hasParent?this.parent.getAttribute(e):null)},e.prototype.registerValueConverter=function(e,t){he(this.valueConverters,e,t,"a ValueConverter")},e.prototype.getValueConverter=function(e){return this.valueConverters[e]||(this.hasParent?this.parent.getValueConverter(e):null)},e.prototype.registerBindingBehavior=function(e,t){he(this.bindingBehaviors,e,t,"a BindingBehavior")},e.prototype.getBindingBehavior=function(e){return this.bindingBehaviors[e]||(this.hasParent?this.parent.getBindingBehavior(e):null)},e.prototype.registerValue=function(e,t){he(this.values,e,t,"a value")},e.prototype.getValue=function(e){return this.values[e]||(this.hasParent?this.parent.getValue(e):null)},e.prototype.autoRegister=function(t,n){var r=_.d.getOwn(_.d.resource,n);return r?r instanceof Ue&&(e.convention(n,r),null===r.attributeName&&null===r.elementName&&Ue.convention(n.name,r),null===r.attributeName&&null===r.elementName&&(r.elementName=q(n.name))):((r=e.convention(n)||Ue.convention(n.name)||P.Z.convention(n.name)||P.i.convention(n.name)||z.convention(n.name))||((r=new Ue).elementName=q(n.name)),_.d.define(_.d.resource,r,n)),r.initialize(t,n),r.register(this),r},e}(),fe=function(){function e(e,t,n,r,i,o,s){for(var a in this.container=e,this.viewFactory=t,this.resources=t.resources,this.fragment=n,this.firstChild=n.firstChild,this.lastChild=n.lastChild,this.controllers=r,this.bindings=i,this.children=o,this.slots=s,this.hasSlots=!1,this.fromCache=!1,this.isBound=!1,this.isAttached=!1,this.bindingContext=null,this.overrideContext=null,this.controller=null,this.viewModelScope=null,this.animatableElement=void 0,this._isUserControlled=!1,this.contentView=null,s){this.hasSlots=!0;break}}return e.prototype.returnToCache=function(){this.viewFactory.returnViewToCache(this)},e.prototype.created=function(){var e,t=void 0,n=this.controllers;for(t=0,e=n.length;t<e;++t)n[t].created(this)},e.prototype.bind=function(e,t,n){var r=void 0,i=void 0,o=void 0,s=void 0,a=void 0;if(!n||!this._isUserControlled){if(this.isBound){if(this.bindingContext===e)return;this.unbind()}for(this.isBound=!0,this.bindingContext=e,this.overrideContext=t||Object(P.kb)(e),this.resources._invokeHook("beforeBind",this),s=0,a=(i=this.bindings).length;s<a;++s)i[s].bind(this);for(null!==this.viewModelScope&&(e.bind(this.viewModelScope.bindingContext,this.viewModelScope.overrideContext),this.viewModelScope=null),s=0,a=(r=this.controllers).length;s<a;++s)r[s].bind(this);for(s=0,a=(o=this.children).length;s<a;++s)o[s].bind(e,t,!0);this.hasSlots&&le.distributeView(this.contentView,this.slots)}},e.prototype.addBinding=function(e){this.bindings.push(e),this.isBound&&e.bind(this)},e.prototype.unbind=function(){var e=void 0,t=void 0,n=void 0,r=void 0,i=void 0;if(this.isBound){for(this.isBound=!1,this.resources._invokeHook("beforeUnbind",this),null!==this.controller&&this.controller.unbind(),r=0,i=(t=this.bindings).length;r<i;++r)t[r].unbind();for(r=0,i=(e=this.controllers).length;r<i;++r)e[r].unbind();for(r=0,i=(n=this.children).length;r<i;++r)n[r].unbind();this.bindingContext=null,this.overrideContext=null}},e.prototype.insertNodesBefore=function(e){e.parentNode.insertBefore(this.fragment,e)},e.prototype.appendNodesTo=function(e){e.appendChild(this.fragment)},e.prototype.removeNodes=function(){for(var e=this.fragment,t=this.firstChild,n=this.lastChild,r=void 0;t&&(r=t.nextSibling,e.appendChild(t),t!==n);)t=r},e.prototype.attached=function(){var e=void 0,t=void 0,n=void 0,r=void 0;if(!this.isAttached){for(this.isAttached=!0,null!==this.controller&&this.controller.attached(),n=0,r=(e=this.controllers).length;n<r;++n)e[n].attached();for(n=0,r=(t=this.children).length;n<r;++n)t[n].attached()}},e.prototype.detached=function(){var e=void 0,t=void 0,n=void 0,r=void 0;if(this.isAttached){for(this.isAttached=!1,null!==this.controller&&this.controller.detached(),n=0,r=(e=this.controllers).length;n<r;++n)e[n].detached();for(n=0,r=(t=this.children).length;n<r;++n)t[n].detached()}},e}();var ve=function(){function e(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:M.instance;this.anchor=e,this.anchorIsContainer=t,this.bindingContext=null,this.overrideContext=null,this.animator=n,this.children=[],this.isBound=!1,this.isAttached=!1,this.contentSelectors=null,e.viewSlot=this,e.isContentProjectionSource=!1}return e.prototype.animateView=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"enter",n=function(e){if(void 0!==e.animatableElement)return e.animatableElement;for(var t=e.firstChild;t&&1!==t.nodeType;)t=t.nextSibling;return t&&1===t.nodeType?e.animatableElement=t.classList.contains("au-animate")?t:null:e.animatableElement=null}(e);if(null!==n)switch(t){case"enter":return this.animator.enter(n);case"leave":return this.animator.leave(n);default:throw new Error("Invalid animation direction: "+t)}},e.prototype.transformChildNodesIntoView=function(){var e=this.anchor;this.children.push({fragment:e,firstChild:e.firstChild,lastChild:e.lastChild,returnToCache:function(){},removeNodes:function(){for(var t=void 0;t=e.lastChild;)e.removeChild(t)},created:function(){},bind:function(){},unbind:function(){},attached:function(){},detached:function(){}})},e.prototype.bind=function(e,t){var n,r=void 0,i=void 0;if(this.isBound){if(this.bindingContext===e)return;this.unbind()}for(this.isBound=!0,this.bindingContext=e=e||this.bindingContext,this.overrideContext=t=t||this.overrideContext,r=0,n=(i=this.children).length;r<n;++r)i[r].bind(e,t,!0)},e.prototype.unbind=function(){if(this.isBound){var e,t=void 0,n=this.children;for(this.isBound=!1,this.bindingContext=null,this.overrideContext=null,t=0,e=n.length;t<e;++t)n[t].unbind()}},e.prototype.add=function(e){if(this.anchorIsContainer?e.appendNodesTo(this.anchor):e.insertNodesBefore(this.anchor),this.children.push(e),this.isAttached)return e.attached(),this.animateView(e,"enter")},e.prototype.insert=function(e,t){var n=this.children,r=n.length;return 0===e&&0===r||e>=r?this.add(t):(t.insertNodesBefore(n[e].firstChild),n.splice(e,0,t),this.isAttached?(t.attached(),this.animateView(t,"enter")):void 0)},e.prototype.move=function(e,t){if(e!==t){var n=this.children,r=n[e];r.removeNodes(),r.insertNodesBefore(n[t].firstChild),n.splice(e,1),n.splice(t,0,r)}},e.prototype.remove=function(e,t,n){return this.removeAt(this.children.indexOf(e),t,n)},e.prototype.removeMany=function(e,t,n){var r=this,i=this.children,o=e.length,s=void 0,a=[];e.forEach(function(e){if(n)e.removeNodes();else{var t=r.animateView(e,"leave");t?a.push(t.then(function(){return e.removeNodes()})):e.removeNodes()}});var u=function(){if(r.isAttached)for(s=0;s<o;++s)e[s].detached();if(t)for(s=0;s<o;++s)e[s].returnToCache();for(s=0;s<o;++s){var n=i.indexOf(e[s]);n>=0&&i.splice(n,1)}};return a.length>0?Promise.all(a).then(function(){return u()}):u()},e.prototype.removeAt=function(e,t,n){var r=this,i=this.children[e],o=function(){return e=r.children.indexOf(i),i.removeNodes(),r.children.splice(e,1),r.isAttached&&i.detached(),t&&i.returnToCache(),i};if(!n){var s=this.animateView(i,"leave");if(s)return s.then(function(){return o()})}return o()},e.prototype.removeAll=function(e,t){var n=this,r=this.children,i=r.length,o=void 0,s=[];r.forEach(function(e){if(t)e.removeNodes();else{var r=n.animateView(e,"leave");r?s.push(r.then(function(){return e.removeNodes()})):e.removeNodes()}});var a=function(){if(n.isAttached)for(o=0;o<i;++o)r[o].detached();if(e)for(o=0;o<i;++o){var t=r[o];t&&t.returnToCache()}n.children=[]};return s.length>0?Promise.all(s).then(function(){return a()}):a()},e.prototype.attached=function(){var e,t,n=void 0,r=void 0;if(!this.isAttached)for(this.isAttached=!0,n=0,e=(t=this.children).length;n<e;++n)(r=t[n]).attached(),this.animateView(r,"enter")},e.prototype.detached=function(){var e=void 0,t=void 0,n=void 0;if(this.isAttached)for(this.isAttached=!1,e=0,t=(n=this.children).length;e<t;++e)n[e].detached()},e.prototype.projectTo=function(e){var t=this;this.projectToSlots=e,this.add=this._projectionAdd,this.insert=this._projectionInsert,this.move=this._projectionMove,this.remove=this._projectionRemove,this.removeAt=this._projectionRemoveAt,this.removeMany=this._projectionRemoveMany,this.removeAll=this._projectionRemoveAll,this.children.forEach(function(n){return le.distributeView(n,e,t)})},e.prototype._projectionAdd=function(e){le.distributeView(e,this.projectToSlots,this),this.children.push(e),this.isAttached&&e.attached()},e.prototype._projectionInsert=function(e,t){0===e&&!this.children.length||e>=this.children.length?this.add(t):(le.distributeView(t,this.projectToSlots,this,e),this.children.splice(e,0,t),this.isAttached&&t.attached())},e.prototype._projectionMove=function(e,t){if(e!==t){var n=this.children,r=n[e];le.undistributeView(r,this.projectToSlots,this),le.distributeView(r,this.projectToSlots,this,t),n.splice(e,1),n.splice(t,0,r)}},e.prototype._projectionRemove=function(e,t){le.undistributeView(e,this.projectToSlots,this),this.children.splice(this.children.indexOf(e),1),this.isAttached&&e.detached(),t&&e.returnToCache()},e.prototype._projectionRemoveAt=function(e,t){var n=this.children[e];le.undistributeView(n,this.projectToSlots,this),this.children.splice(e,1),this.isAttached&&n.detached(),t&&n.returnToCache()},e.prototype._projectionRemoveMany=function(e,t){var n=this;e.forEach(function(e){return n.remove(e,t)})},e.prototype._projectionRemoveAll=function(e){le.undistributeAll(this.projectToSlots,this);var t=this.children,n=t.length;if(this.isAttached)for(var r=0;r<n;++r)e?t[r].returnToCache():t[r].detached();this.children=[]},e}(),ge=new(Object(A.z)(v=function(){function e(){}return e.prototype.get=function(e,t){var n=t.__providerId__;return n in e?e[n]:e[n]=e.invoke(t)},e}())||v);function me(e){if(e===S.b.Element)return this.element;if(e===_e){if(this.boundViewFactory)return this.boundViewFactory;var t=this.instruction.viewFactory,n=this.partReplacements;return n&&(t=n[t.part]||t),this.boundViewFactory=new _e(this,t,n),this.boundViewFactory}return e===ve?(void 0===this.viewSlot&&(this.viewSlot=new ve(this.element,this.instruction.anchorIsContainer),this.element.isContentProjectionSource=this.instruction.lifting,this.children.push(this.viewSlot)),this.viewSlot):e===U?this.elementEvents||(this.elementEvents=new U(this.element)):e===L?this.compositionTransaction||(this.compositionTransaction=this.parent.get(e)):e===pe?this.viewResources:e===K?this.instruction:this.superGet(e)}function ye(e){return this._element.hasAttribute(e)}function be(e){return this._element.getAttribute(e)}function we(e,t){this._element.setAttribute(e,t)}function xe(e,t,n,r,i,o,s,a,u){var c=n.behaviorInstructions,l=n.expressions,h=void 0,d=void 0,p=void 0,f=void 0,v=void 0;if(n.contentExpression)return i.push(n.contentExpression.createBinding(t.nextSibling)),t.nextSibling.auInterpolationTarget=!0,void t.parentNode.removeChild(t);if(n.shadowSlot){var g=S.b.createComment("slot"),m=void 0;return m=n.slotDestination?new ue(g,n.slotName,n.slotDestination,n.slotFallbackFactory):new ce(g,n.slotName,n.slotFallbackFactory),S.b.replaceNode(g,t),s[n.slotName]=m,void r.push(m)}if(c.length)for(n.anchorIsContainer||(t=function(e,t){var n=S.b.createComment("anchor");if(t){var r=e.firstChild;r&&"AU-CONTENT"===r.tagName&&(n.contentElement=r),n._element=e,n.hasAttribute=ye,n.getAttribute=be,n.setAttribute=we}return S.b.replaceNode(n,e),n}(t,n.elementInstruction)),e[n.injectorId]=h=function(e,t,n,r,i,o){var s,a=e.createChild(),u=void 0;for(a.element=t,a.instruction=n,a.children=r,a.viewResources=o,a.partReplacements=i,u=(s=n.providers).length;u--;)a._resolvers.set(s[u],ge);return a.superGet=a.get,a.get=me,a}(e[n.parentInjectorId],t,n,o,a,u),d=0,p=c.length;d<p;++d)v=(f=c[d]).type.create(h,f,t,i),r.push(v);for(d=0,p=l.length;d<p;++d)i.push(l[d].createBinding(t))}function ke(e,t){var n=e.split(";"),r=void 0,i=void 0,o=void 0,s=void 0,a=void 0;for(t=t||{},i=0;i<n.length;i++)r=(o=n[i]).indexOf(":"),s=o.substring(0,r).trim(),a=o.substring(r+1).trim(),t[s]=a;return t}function Ce(e){var t="";for(var n in e)t+=n+":"+e[n]+";";return t}var _e=function(){function e(e,t,n){this.parentContainer=e,this.viewFactory=t,this.factoryCreateInstruction={partReplacements:n}}return e.prototype.create=function(){var e=this.viewFactory.create(this.parentContainer.createChild(),this.factoryCreateInstruction);return e._isUserControlled=!0,e},e.prototype.setCacheSize=function(e,t){this.viewFactory.setCacheSize(e,t)},e.prototype.getCachedView=function(){return this.viewFactory.getCachedView()},e.prototype.returnViewToCache=function(e){this.viewFactory.returnViewToCache(e)},j(e,[{key:"isCaching",get:function(){return this.viewFactory.isCaching}}]),e}(),Se=function(){function e(e,t,n){this.isCaching=!1,this.template=e,this.instructions=t,this.resources=n,this.cacheSize=-1,this.cache=null}return e.prototype.setCacheSize=function(e,t){e&&("*"===e?e=Number.MAX_VALUE:"string"==typeof e&&(e=parseInt(e,10))),-1!==this.cacheSize&&t||(this.cacheSize=e),this.cacheSize>0?this.cache=[]:this.cache=null,this.isCaching=this.cacheSize>0},e.prototype.getCachedView=function(){return null!==this.cache&&this.cache.pop()||null},e.prototype.returnViewToCache=function(e){e.isAttached&&e.detached(),e.isBound&&e.unbind(),null!==this.cache&&this.cache.length<this.cacheSize&&(e.fromCache=!0,this.cache.push(e))},e.prototype.create=function(e,t,n){t=t||G.normal;var r=this.getCachedView();if(null!==r)return r;var i,o=t.enhance?this.template:this.template.cloneNode(!0),s=o.querySelectorAll(".au-target"),a=this.instructions,u=this.resources,c=[],l=[],h=[],d=Object.create(null),p={root:e},f=t.partReplacements,v=void 0,g=void 0,m=void 0;for(this.resources._invokeHook("beforeCreate",this,e,o,t),n&&null!==this.surrogateInstruction&&function(e,t,n,r,i,o){var s=n.behaviorInstructions,a=n.expressions,u=n.providers,c=n.values,l=void 0,h=void 0,d=void 0,p=void 0,f=void 0;for(l=u.length;l--;)e._resolvers.set(u[l],ge);for(var v in c)if(f=t.getAttribute(v)){if("class"===v)t.setAttribute("class",f+" "+c[v]);else if("style"===v){var g=ke(c[v]);ke(f,g),t.setAttribute("style",Ce(g))}}else t.setAttribute(v,c[v]);if(s.length)for(l=0,h=s.length;l<h;++l)(p=(d=s[l]).type.create(e,d,t,i)).contentView&&o.push(p.contentView),r.push(p);for(l=0,h=a.length;l<h;++l)i.push(a[l].createBinding(t))}(e,n,this.surrogateInstruction,c,l,h),t.enhance&&o.hasAttribute("au-target-id")&&xe(p,m=o,a[m.getAttribute("au-target-id")],c,l,h,d,f,u),v=0,i=s.length;v<i;++v)xe(p,m=s[v],a[m.getAttribute("au-target-id")],c,l,h,d,f,u);return g=new fe(e,this,o,c,l,h,d),t.initiatedByBehavior||g.created(),this.resources._invokeHook("afterCreate",g),g},e}(),Oe=0;var Ee=0;function Ae(e){var t=e.getAttribute("class"),n=(++Ee).toString();return e.setAttribute("class",t?t+" au-target":"au-target"),e.setAttribute("au-target-id",n),n}var Pe=Object(A.r)(oe,pe)(g=function(){function e(e,t){this.bindingLanguage=e,this.resources=t}return e.prototype.compile=function(e,t,n){t=t||this.resources,n=n||$.normal;var r=void 0,i=void 0,o=void 0;(e="string"==typeof e?S.b.createTemplateFromMarkup(e):e).content?(i=e.getAttribute("part"),o=e.getAttribute("view-cache"),r=S.b.adoptNode(e.content)):r=e,n.targetShadowDOM=n.targetShadowDOM&&S.c.shadowDOM,t._invokeHook("beforeCompile",r,t,n);var s={};this._compileNode(r,t,s,e,"root",!n.targetShadowDOM);var a=r.firstChild;if(a&&1===a.nodeType){var u=a.getAttribute("au-target-id");if(u){var c=s[u];(c.shadowSlot||c.lifting||c.elementInstruction&&!c.elementInstruction.anchorIsContainer)&&r.insertBefore(S.b.createComment("view"),a)}}var l=new Se(r,s,t);return l.surrogateInstruction=n.compileSurrogate?this._compileSurrogate(e,t):null,l.part=i,o&&l.setCacheSize(o),t._invokeHook("afterCompile",l),l},e.prototype._compileNode=function(e,t,n,r,i,o){switch(e.nodeType){case 1:return this._compileElement(e,t,n,r,i,o);case 3:var s=t.getBindingLanguage(this.bindingLanguage).inspectTextContent(t,e.wholeText);if(s){var a=S.b.createElement("au-marker"),u=Ae(a);for((e.parentNode||r).insertBefore(a,e),e.textContent=" ",n[u]=K.contentExpression(s);e.nextSibling&&3===e.nextSibling.nodeType;)(e.parentNode||r).removeChild(e.nextSibling)}else for(;e.nextSibling&&3===e.nextSibling.nodeType;)e=e.nextSibling;return e.nextSibling;case 11:for(var c=e.firstChild;c;)c=this._compileNode(c,t,n,e,i,o)}return e.nextSibling},e.prototype._compileSurrogate=function(e,t){var n=e.tagName.toLowerCase(),r=e.attributes,i=t.getBindingLanguage(this.bindingLanguage),o=void 0,s=void 0,a=void 0,u=void 0,c=void 0,l=void 0,h=void 0,d=void 0,p=void 0,f=void 0,v=[],g=void 0,m=[],y={},b=!1,w=[];for(u=0,c=r.length;u<c;++u){if(h=(l=r[u]).name,d=l.value,p=i.inspectAttribute(t,n,h,d),(f=t.getAttribute(p.attrName))&&(o=t.mapAttribute(p.attrName))&&(s=f.attributes[o])&&(p.defaultBindingMode=s.defaultBindingMode,p.command||p.expression||(p.command=s.hasOptions?"options":null),p.command&&"options"!==p.command&&f.primaryProperty)){var x=f.primaryProperty;h=p.attrName=x.attribute,p.defaultBindingMode=x.defaultBindingMode}if(a=i.createAttributeInstruction(t,e,p,void 0,f))if(a.alteredAttr&&(f=t.getAttribute(a.attrName)),a.discrete)v.push(a);else if(f){if(a.type=f,this._configureProperties(a,t),f.liftsContent)throw new Error("You cannot place a template controller on a surrogate element.");m.push(a)}else v.push(a.attributes[a.attrName]);else if(f){if((a=G.attribute(h,f)).attributes[t.mapAttribute(h)]=d,f.liftsContent)throw new Error("You cannot place a template controller on a surrogate element.");m.push(a)}else"id"!==h&&"part"!==h&&"replace-part"!==h&&(b=!0,y[h]=d)}if(v.length||m.length||b){for(u=0,c=m.length;u<c;++u)(a=m[u]).type.compile(this,t,e,a),w.push(a.type.target);for(u=0,c=v.length;u<c;++u)void 0!==(g=v[u]).attrToRemove&&e.removeAttribute(g.attrToRemove);return K.surrogate(w,m,v,y)}return null},e.prototype._compileElement=function(e,t,n,r,i,o){var s=e.tagName.toLowerCase(),a=e.attributes,u=[],c=void 0,l=[],h=[],d=t.getBindingLanguage(this.bindingLanguage),p=void 0,f=void 0,v=void 0,g=void 0,m=void 0,y=void 0,b=void 0,w=void 0,x=void 0,k=void 0,C=void 0,_=void 0,O=void 0,E=void 0,A=void 0,P=void 0;if("slot"===s)return o&&(e=function(e,t,n,r,i){var o=S.b.createElement("au-shadow-slot");S.b.replaceNode(o,n);var s=Ae(o),a=K.shadowSlot(i);if(a.slotName=n.getAttribute("name")||le.defaultSlotKey,a.slotDestination=n.getAttribute("slot"),n.innerHTML.trim()){for(var u=S.b.createDocumentFragment(),c=void 0;c=n.firstChild;)u.appendChild(c);a.slotFallbackFactory=e.compile(u,t)}return r[s]=a,o}(this,t,e,n,i)),e.nextSibling;if("template"===s){if(!("content"in e))throw new Error("You cannot place a template element within "+e.namespaceURI+" namespace");(f=this.compile(e,t)).part=e.getAttribute("part")}else(v=t.getElement(e.getAttribute("as-element")||s))&&(g=G.element(e,v),v.processAttributes(this,t,e,a,g),l.push(g));for(y=0,b=a.length;y<b;++y){if(C=x=(w=a[y]).name,k=w.value,O=d.inspectAttribute(t,s,x,k),o&&"slot"===O.attrName&&(O.attrName=x="au-slot"),m=null,v=t.getAttribute(O.attrName)){if((A=t.mapAttribute(O.attrName))&&(E=v.attributes[A])&&(O.defaultBindingMode=E.defaultBindingMode,O.command||O.expression||(O.command=E.hasOptions?"options":null),O.command&&"options"!==O.command&&v.primaryProperty)){var T=v.primaryProperty;x=O.attrName=T.attribute,O.defaultBindingMode=T.defaultBindingMode}}else g&&(m=g.type.attributes[O.attrName])&&(O.defaultBindingMode=m.defaultBindingMode);if(_=m?d.createAttributeInstruction(t,e,O,g):d.createAttributeInstruction(t,e,O,void 0,v))if(_.alteredAttr&&(v=t.getAttribute(_.attrName)),_.discrete)u.push(_);else if(v){if(_.type=v,this._configureProperties(_,t),v.liftsContent){_.originalAttrName=C,p=_;break}l.push(_)}else m?g.attributes[O.attrName].targetProperty=m.name:u.push(_.attributes[_.attrName]);else if(v){if((_=G.attribute(x,v)).attributes[t.mapAttribute(x)]=k,v.liftsContent){_.originalAttrName=C,p=_;break}l.push(_)}else m&&(g.attributes[x]=k)}if(p)p.viewFactory=f,n[Ae(e=p.type.compile(this,t,e,p,r))]=K.lifting(i,p);else{var j=!1;if(u.length||l.length){for(P=!!l.length&&++Oe,y=0,b=l.length;y<b;++y)(_=l[y]).type.compile(this,t,e,_,r),h.push(_.type.target),j=j||_.skipContentProcessing;for(y=0,b=u.length;y<b;++y)void 0!==(c=u[y]).attrToRemove&&e.removeAttribute(c.attrToRemove);n[Ae(e)]=K.normal(P,i,h,l,u,g)}if(j)return e.nextSibling;for(var R=e.firstChild;R;)R=this._compileNode(R,t,n,e,P||i,o)}return e.nextSibling},e.prototype._configureProperties=function(e,t){var n=e.type,r=e.attrName,i=e.attributes,o=void 0,s=void 0,a=void 0,u=t.mapAttribute(r);for(s in u&&r in i&&u!==r&&(i[u]=i[r],delete i[r]),i)null!==(a=i[s])&&"object"===(void 0===a?"undefined":R(a))&&(o=n.attributes[s],a.targetProperty=void 0!==o?o.name:s)},e}())||g,Te=function(){function e(e){this.id=e,this.moduleInstance=null,this.mainResource=null,this.resources=null,this.viewStrategy=null,this.isInitialized=!1,this.onLoaded=null,this.loadContext=null}return e.prototype.initialize=function(e){var t=this.mainResource,n=this.resources,r=this.viewStrategy;if(!this.isInitialized){this.isInitialized=!0,void 0!==t&&(t.metadata.viewStrategy=r,t.initialize(e));for(var i=0,o=n.length;i<o;++i)(t=n[i]).metadata.viewStrategy=r,t.initialize(e)}},e.prototype.register=function(e,t){var n=this.mainResource,r=this.resources;void 0!==n&&(n.register(e,t),t=null);for(var i=0,o=r.length;i<o;++i)r[i].register(e,t),t=null},e.prototype.load=function(e,t){if(null!==this.onLoaded)return this.loadContext===t?Promise.resolve():this.onLoaded;var n=this.mainResource,r=this.resources,i=void 0;if(void 0!==n){(i=new Array(r.length+1))[0]=n.load(e,t);for(var o=0,s=r.length;o<s;++o)i[o+1]=r[o].load(e,t)}else{i=new Array(r.length);for(var a=0,u=r.length;a<u;++a)i[a]=r[a].load(e,t)}return this.loadContext=t,this.onLoaded=Promise.all(i),this.onLoaded},e}(),je=function(){function e(e,t,n){n||(n=_.d.get(_.d.resource,t))||((n=new Ue).elementName=q(e),_.d.define(_.d.resource,n,t)),n instanceof Ue?void 0===n.elementName?n.elementName=q(e):void 0===n.attributeName?n.attributeName=q(e):null===n.attributeName&&null===n.elementName&&Ue.convention(e,n):n.name||(n.name=q(e)),this.metadata=n,this.value=t}return e.prototype.initialize=function(e){this.metadata.initialize(e,this.value)},e.prototype.register=function(e,t){this.metadata.register(e,t)},e.prototype.load=function(e,t){return this.metadata.load(e,this.value,t)},e}(),Re=function(){function e(){this.cache=Object.create(null)}return e.prototype.getAnalysis=function(e){return this.cache[e]},e.prototype.analyze=function(e,t,n){var r=void 0,i=void 0,o=void 0,s=void 0,a=void 0,u=void 0,c=[],l=void 0,h=void 0,d=void 0;if(d=this.cache[e])return d;for(a in d=new Te(e),this.cache[e]=d,"function"==typeof t&&(t={default:t}),n&&(r=new je(n,t[n])),t)u=t[a],a!==n&&"function"==typeof u&&((s=_.d.get(_.d.resource,u))?(s instanceof Ue&&(pe.convention(u,s),null===s.attributeName&&null===s.elementName&&Ue.convention(a,s),null===s.attributeName&&null===s.elementName&&(s.elementName=q(a))),!r&&s instanceof Ue&&null!==s.elementName?r=new je(a,u,s):c.push(new je(a,u,s))):X.decorates(u)?h=u:u instanceof O.c?h=new ee(e,u):(l=pe.convention(u))?(null===l.elementName||r?c.push(new je(a,u,l)):r=new je(a,u,l),_.d.define(_.d.resource,l,u)):(l=Ue.convention(a))?(null===l.elementName||r?c.push(new je(a,u,l)):r=new je(a,u,l),_.d.define(_.d.resource,l,u)):(l=P.Z.convention(a)||P.i.convention(a)||z.convention(a))?(c.push(new je(a,u,l)),_.d.define(_.d.resource,l,u)):i||(i=u,o=a));return!r&&i&&(r=new je(o,i)),d.moduleInstance=t,d.mainResource=r,d.resources=c,d.viewStrategy=h,d},e}(),Ne=C.getLogger("templating");var Me=function(){function e(e){var t=this;e.then(function(e){return t.viewFactory=e})}return e.prototype.create=function(e,t,n,r){return this.viewFactory.create(e,t,n,r)},e.prototype.setCacheSize=function(e,t){this.viewFactory.setCacheSize(e,t)},e.prototype.getCachedView=function(){return this.viewFactory.getCachedView()},e.prototype.returnViewToCache=function(e){this.viewFactory.returnViewToCache(e)},j(e,[{key:"isCaching",get:function(){return this.viewFactory.isCaching}}]),e}(),Ie=null,Ve=Object(A.r)(O.a,A.b,Pe,Re,pe)((b=y=function(){function e(e,t,n,r,i){this.loader=e,this.container=t,this.viewCompiler=n,this.moduleAnalyzer=r,this.appResources=i,this._pluginMap={},null===Ie&&((Ie=new Ue).attributeName="au-slot",_.d.define(_.d.resource,Ie,ae)),Ie.initialize(t,ae),Ie.register(i)}return e.prototype.addResourcePlugin=function(e,t){var n=e.replace(".","")+"-resource-plugin";this._pluginMap[e]=n,this.loader.addPlugin(n,t)},e.prototype.loadViewFactory=function(e,t,n,r){var i=this;return n=n||new Q,function(e,t){return t instanceof O.c?Promise.resolve(t):e.loadTemplate(t)}(this.loader,e).then(function(e){var o=e.address;return e.onReady?n.hasDependency(o)?null===e.template?e.onReady:Promise.resolve(new Me(e.onReady)):(n.addDependency(o),e.onReady):(n.addDependency(o),e.onReady=i.loadTemplateResources(e,t,n,r).then(function(n){if(e.resources=n,null===e.template)return e.factory=null;var r=i.viewCompiler.compile(e.template,n,t);return e.factory=r}),e.onReady)})},e.prototype.loadTemplateResources=function(t,n,r,i){var o=new pe(this.appResources,t.address),s=t.dependencies,a=void 0,u=void 0;if(n=n||$.normal,0===s.length&&!n.associatedModuleId)return Promise.resolve(o);if(a=s.map(function(e){return e.src}),u=s.map(function(e){return e.name}),Ne.debug("importing resources for "+t.address,a),i){var c=_.d.get(e.viewModelRequireMetadataKey,i);if(c){for(var l=a.length,h=0,d=c.length;h<d;++h){var p=c[h],f="function"==typeof p?_.a.get(p).moduleId:Object(E.d)(p.src||p,t.address);-1===a.indexOf(f)&&(a.push(f),u.push(p.as))}Ne.debug("importing ViewModel resources for "+n.associatedModuleId,a.slice(l))}}return this.importViewResources(a,u,o,n,r)},e.prototype.importViewModelResource=function(e,t){var n=this;return this.loader.loadModule(e).then(function(r){var i=_.a.get(r).moduleId,o=n.moduleAnalyzer.analyze(i,r,t);if(!o.mainResource)throw new Error('No view model found in module "'+e+'".');return o.initialize(n.container),o.mainResource})},e.prototype.importViewResources=function(e,t,n,r,i){var o=this;return i=i||new Q,r=r||$.normal,e=e.map(function(e){return o._applyLoaderPlugin(e)}),this.loader.loadAllModules(e).then(function(e){var s=void 0,a=void 0,u=void 0,c=void 0,l=void 0,h=void 0,d=o.container,p=o.moduleAnalyzer,f=new Array(e.length);for(s=0,a=e.length;s<a;++s)l=e[s],c=_.a.get(l).moduleId,(u=p.analyze(c,l)).initialize(d),u.register(n,t[s]),f[s]=u;for(r.associatedModuleId&&(h=p.getAnalysis(r.associatedModuleId))&&h.register(n),s=0,a=f.length;s<a;++s)f[s]=f[s].load(d,i);return Promise.all(f).then(function(){return n})})},e.prototype._applyLoaderPlugin=function(e){var t=e.lastIndexOf(".");if(-1!==t){var n=e.substring(t),r=this._pluginMap[n];return void 0===r?e:this.loader.applyPluginToUrl(e,r)}return e},e}(),y.viewModelRequireMetadataKey="aurelia:view-model-require",m=b))||m,Le=function(){function e(e,t,n,r){this.behavior=e,this.instruction=t,this.viewModel=n,this.isAttached=!1,this.view=null,this.isBound=!1,this.scope=null,this.container=r,this.elementEvents=r.elementEvents||null;var i,o=e.observerLocator.getOrCreateObserversLookup(n),s=e.handlesBind,a=t.attributes,u=this.boundProperties=[],c=e.properties,l=void 0;for(e._ensurePropertiesDefined(n,o),l=0,i=c.length;l<i;++l)c[l]._initialize(n,o,a,s,u)}return e.prototype.created=function(e){this.behavior.handlesCreated&&this.viewModel.created(e,this.view)},e.prototype.automate=function(e,t){this.view.bindingContext=this.viewModel,this.view.overrideContext=e||Object(P.kb)(this.viewModel),this.view._isUserControlled=!0,this.behavior.handlesCreated&&this.viewModel.created(t||null,this.view),this.bind(this.view)},e.prototype.bind=function(e){var t,n=this.behavior.handlesBind,r=this.boundProperties,i=void 0,o=void 0,s=void 0,a=void 0;if(this.isBound){if(this.scope===e)return;this.unbind()}for(this.isBound=!0,this.scope=e,i=0,t=r.length;i<t;++i)a=(s=(o=r[i]).observer).selfSubscriber,s.publishing=!1,n&&(s.selfSubscriber=null),o.binding.bind(e),s.call(),s.publishing=!0,s.selfSubscriber=a;var u=void 0;null!==this.view?(n&&(this.view.viewModelScope=e),this.viewModel===e.overrideContext.bindingContext?u=e.overrideContext:this.instruction.inheritBindingContext?u=Object(P.kb)(this.viewModel,e.overrideContext):(u=Object(P.kb)(this.viewModel)).__parentOverrideContext=e.overrideContext,this.view.bind(this.viewModel,u)):n&&(u=e.overrideContext,void 0!==e.overrideContext.__parentOverrideContext&&this.viewModel.viewFactory&&this.viewModel.viewFactory.factoryCreateInstruction.partReplacements&&((u=Object.assign({},e.overrideContext)).parentOverrideContext=e.overrideContext.__parentOverrideContext),this.viewModel.bind(e.bindingContext,u))},e.prototype.unbind=function(){if(this.isBound){var e,t=this.boundProperties,n=void 0;for(this.isBound=!1,this.scope=null,null!==this.view&&this.view.unbind(),this.behavior.handlesUnbind&&this.viewModel.unbind(),null!==this.elementEvents&&this.elementEvents.disposeAll(),n=0,e=t.length;n<e;++n)t[n].binding.unbind()}},e.prototype.attached=function(){this.isAttached||(this.isAttached=!0,this.behavior.handlesAttached&&this.viewModel.attached(),null!==this.view&&this.view.attached())},e.prototype.detached=function(){this.isAttached&&(this.isAttached=!1,null!==this.view&&this.view.detached(),this.behavior.handlesDetached&&this.viewModel.detached())},e}(),Fe=Object(P.Fb)()(w=function(){function e(e,t,n,r,i){this.taskQueue=e,this.obj=t,this.propertyName=n,this.notqueued=!0,this.publishing=!1,this.selfSubscriber=r,this.currentValue=this.oldValue=i}return e.prototype.getValue=function(){return this.currentValue},e.prototype.setValue=function(e){var t=this.currentValue;Object.is(e,t)||(this.oldValue=t,this.currentValue=e,this.publishing&&this.notqueued&&(this.taskQueue.flushing?this.call():(this.notqueued=!1,this.taskQueue.queueMicroTask(this))))},e.prototype.call=function(){var e=this.oldValue,t=this.currentValue;this.notqueued=!0,Object.is(t,e)||(this.selfSubscriber&&this.selfSubscriber(t,e),this.callSubscribers(t,e),this.oldValue=t)},e.prototype.subscribe=function(e,t){this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)},e}())||w;function Be(e,t){var n=e.__observers__;if(void 0===n){var r=Object.getPrototypeOf(e).constructor,i=_.d.get(_.d.resource,r);i.isInitialized||i.initialize(A.b.instance||new A.b,e.constructor),n=i.observerLocator.getOrCreateObserversLookup(e),i._ensurePropertiesDefined(e,n)}return n[t]}var qe=function(){function e(e){"string"==typeof e?this.name=e:Object.assign(this,e),this.attribute=this.attribute||q(this.name);var t=this.defaultBindingMode;null===t||void 0===t?this.defaultBindingMode=P.cb.oneWay:"string"==typeof t&&(this.defaultBindingMode=P.cb[t]||P.cb.oneWay),this.changeHandler=this.changeHandler||null,this.owner=null,this.descriptor=null}return e.prototype.registerWith=function(e,t,n){if(t.properties.push(this),t.attributes[this.attribute]=this,this.owner=t,n)return this.descriptor=n,this._configureDescriptor(n)},e.prototype._configureDescriptor=function(e){var t=this.name;return e.configurable=!0,e.enumerable=!0,"initializer"in e&&(this.defaultValue=e.initializer,delete e.initializer,delete e.writable),"value"in e&&(this.defaultValue=e.value,delete e.value,delete e.writable),e.get=function(){return Be(this,t).getValue()},e.set=function(e){Be(this,t).setValue(e)},e.get.getObserver=function(e){return Be(e,t)},e},e.prototype.defineOn=function(e,t){var n=this.name,r=void 0;null===this.changeHandler&&(r=n+"Changed")in e.prototype&&(this.changeHandler=r),null===this.descriptor&&Object.defineProperty(e.prototype,n,this._configureDescriptor(t,{}))},e.prototype.createObserver=function(e){var t=null,n=this.defaultValue,r=this.changeHandler,i=this.name,o=void 0;if(!this.hasOptions){if(r in e)t="propertyChanged"in e?function(t,n){e[r](t,n),e.propertyChanged(i,t,n)}:function(t,n){return e[r](t,n)};else if("propertyChanged"in e)t=function(t,n){return e.propertyChanged(i,t,n)};else if(null!==r)throw new Error("Change handler "+r+" was specified but not declared on the class.");return void 0!==n&&(o="function"==typeof n?n.call(e):n),new Fe(this.owner.taskQueue,e,this.name,t,o)}},e.prototype._initialize=function(e,t,n,r,i){var o=void 0,s=void 0,a=void 0,u=this.defaultValue;if(this.isDynamic)for(var c in n)this._createDynamicProperty(e,t,r,c,n[c],i);else this.hasOptions||(s=t[this.name],null!==n&&(o=s.selfSubscriber,a=n[this.attribute],r&&(s.selfSubscriber=null),"string"==typeof a?(e[this.name]=a,s.call()):a?i.push({observer:s,binding:a.createBinding(e)}):void 0!==u&&s.call(),s.selfSubscriber=o),s.publishing=!0)},e.prototype._createDynamicProperty=function(e,t,n,r,i,o){var s=r+"Changed",a=null,u=void 0,c=void 0;s in e?a="propertyChanged"in e?function(t,n){e[s](t,n),e.propertyChanged(r,t,n)}:function(t,n){return e[s](t,n)}:"propertyChanged"in e&&(a=function(t,n){return e.propertyChanged(r,t,n)}),u=t[r]=new Fe(this.owner.taskQueue,e,r,a),Object.defineProperty(e,r,{configurable:!0,enumerable:!0,get:u.getValue.bind(u),set:u.setValue.bind(u)}),n&&(u.selfSubscriber=null),"string"==typeof i?(e[r]=i,u.call()):i&&(c={observer:u,binding:i.createBinding(e)},o.push(c)),u.publishing=!0,u.selfSubscriber=a},e}(),De=0;function ze(){return!0}function He(){}var Ue=function(){function e(){this.elementName=null,this.attributeName=null,this.attributeDefaultBindingMode=void 0,this.liftsContent=!1,this.targetShadowDOM=!1,this.shadowDOMOptions=null,this.processAttributes=He,this.processContent=ze,this.usesShadowDOM=!1,this.childBindings=null,this.hasDynamicOptions=!1,this.containerless=!1,this.properties=[],this.attributes={},this.isInitialized=!1,this.primaryProperty=null}return e.convention=function(t,n){var r=void 0;return t.endsWith("CustomAttribute")&&((r=n||new e).attributeName=q(t.substring(0,t.length-15))),t.endsWith("CustomElement")&&((r=n||new e).elementName=q(t.substring(0,t.length-13))),r},e.prototype.addChildBinding=function(e){null===this.childBindings&&(this.childBindings=[]),this.childBindings.push(e)},e.prototype.initialize=function(e,t){var n=t.prototype,r=this.properties,i=this.attributeName,o=this.attributeDefaultBindingMode,s=void 0,a=void 0,u=void 0;if(!this.isInitialized)if(this.isInitialized=!0,t.__providerId__=++De,this.observerLocator=e.get(P.N),this.taskQueue=e.get(T.a),this.target=t,this.usesShadowDOM=this.targetShadowDOM&&S.c.shadowDOM,this.handlesCreated="created"in n,this.handlesBind="bind"in n,this.handlesUnbind="unbind"in n,this.handlesAttached="attached"in n,this.handlesDetached="detached"in n,this.htmlName=this.elementName||this.attributeName,null!==i)if(0===r.length&&new qe({name:"value",changeHandler:"valueChanged"in n?"valueChanged":null,attribute:i,defaultBindingMode:o}).registerWith(t,this),u=r[0],1===r.length&&"value"===u.name)u.isDynamic=u.hasOptions=this.hasDynamicOptions,u.defineOn(t,this);else{for(s=0,a=r.length;s<a;++s)if(r[s].defineOn(t,this),r[s].primaryProperty){if(this.primaryProperty)throw new Error("Only one bindable property on a custom element can be defined as the default");this.primaryProperty=r[s]}(u=new qe({name:"value",changeHandler:"valueChanged"in n?"valueChanged":null,attribute:i,defaultBindingMode:o})).hasOptions=!0,u.registerWith(t,this)}else{for(s=0,a=r.length;s<a;++s)r[s].defineOn(t,this);this._copyInheritedProperties(e,t)}},e.prototype.register=function(e,t){var n=this;null!==this.attributeName&&(e.registerAttribute(t||this.attributeName,this,this.attributeName),Array.isArray(this.aliases)&&this.aliases.forEach(function(t){e.registerAttribute(t,n,n.attributeName)})),null!==this.elementName&&e.registerElement(t||this.elementName,this)},e.prototype.load=function(e,t,n,r,i){var o=this,s=void 0;return null!==this.elementName?(r=e.get(re).getViewStrategy(r||this.viewStrategy||t),s=new $(this.targetShadowDOM,!0),r.moduleId||(r.moduleId=_.a.get(t).moduleId),r.loadViewFactory(e.get(Ve),s,n,t).then(function(e){return i&&o.viewFactory||(o.viewFactory=e),e})):Promise.resolve(this)},e.prototype.compile=function(e,t,n,r,i){if(this.liftsContent){if(!r.viewFactory){var o=S.b.createElement("template"),s=S.b.createDocumentFragment(),a=n.getAttribute("view-cache"),u=n.getAttribute("part");n.removeAttribute(r.originalAttrName),S.b.replaceNode(o,n,i),s.appendChild(n),r.viewFactory=e.compile(s,t),u&&(r.viewFactory.part=u,n.removeAttribute("part")),a&&(r.viewFactory.setCacheSize(a),n.removeAttribute("view-cache")),n=o}}else if(null!==this.elementName){var c={};if(this.processContent(e,t,n,r)&&n.hasChildNodes()){for(var l=n.firstChild,h=this.usesShadowDOM?null:S.b.createElement("au-content"),d=void 0,p=void 0;l;)d=l.nextSibling,"TEMPLATE"===l.tagName&&(p=l.getAttribute("replace-part"))?(c[p]=e.compile(l,t),S.b.removeNode(l,i),r.partReplacements=c):null!==h&&(3===l.nodeType&&D(l)?S.b.removeNode(l,i):h.appendChild(l)),l=d;null!==h&&h.hasChildNodes()&&n.appendChild(h),r.skipContentProcessing=!1}else r.skipContentProcessing=!0}else this.processContent(e,t,n,r)||(r.skipContentProcessing=!0);return n},e.prototype.create=function(e,t,n,r){var i=void 0,o=null;t=t||G.normal,n=n||null,r=r||null,null!==this.elementName&&n&&(this.usesShadowDOM?(i=n.attachShadow(this.shadowDOMOptions),e.registerInstance(S.b.boundary,i)):(i=n,this.targetShadowDOM&&e.registerInstance(S.b.boundary,i))),null!==n&&(n.au=o=n.au||{});var s=t.viewModel||e.get(this.target),a=new Le(this,t,s,e),u=this.childBindings,c=void 0;if(this.liftsContent)o.controller=a;else if(null!==this.elementName){if(c=t.viewFactory||this.viewFactory,e.viewModel=s,c&&(a.view=c.create(e,t,n)),null!==n){if(o.controller=a,a.view){if(!this.usesShadowDOM&&(1===n.childNodes.length||n.contentElement)){var l=n.childNodes[0]||n.contentElement;a.view.contentView={fragment:l},l.parentNode&&S.b.removeNode(l)}if(t.anchorIsContainer){if(null!==u)for(var h=0,d=u.length;h<d;++h)a.view.addBinding(u[h].create(n,s,a));a.view.appendNodesTo(i)}else a.view.insertNodesBefore(i)}else if(null!==u)for(var p=0,f=u.length;p<f;++p)r.push(u[p].create(n,s,a))}else if(a.view){if(a.view.controller=a,null!==u)for(var v=0,g=u.length;v<g;++v)a.view.addBinding(u[v].create(t.host,s,a))}else if(null!==u)for(var m=0,y=u.length;m<y;++m)r.push(u[m].create(t.host,s,a))}else if(null!==u)for(var b=0,w=u.length;b<w;++b)r.push(u[b].create(n,s,a));return null!==o&&(o[this.htmlName]=a),t.initiatedByBehavior&&c&&a.view.created(),a},e.prototype._ensurePropertiesDefined=function(e,t){var n,r=void 0,i=void 0,o=void 0;if(!("__propertiesDefined__"in t))for(t.__propertiesDefined__=!0,i=0,n=(r=this.properties).length;i<n;++i)void 0!==(o=r[i].createObserver(e))&&(t[o.propertyName]=o)},e.prototype._copyInheritedProperties=function(e,t){for(var n=this,r=void 0,i=t;;){var o=Object.getPrototypeOf(t.prototype);if(!(t=o&&o.constructor))return;if(r=_.d.getOwn(_.d.resource,t))break}r.initialize(e,t);for(var s=function(e,t){var o=r.properties[e];if(n.properties.some(function(e){return e.name===o.name}))return"continue";new qe(o).registerWith(i,n)},a=0,u=r.properties.length;a<u;++a)s(a)},e}();function We(e,t){return function(n,r,i){var o="string"==typeof r?n.constructor:n,s=_.d.getOrCreateOwn(_.d.resource,Ue,o);"string"==typeof e&&(e={selector:e,name:r}),i&&(i.writable=!0,i.configurable=!0),e.all=t,s.addChildBinding(new Ge(e))}}function Qe(e){return We(e,!0)}function $e(e){return We(e,!1)}var Ge=function(){function e(e){this.name=e.name,this.changeHandler=e.changeHandler||this.name+"Changed",this.selector=e.selector,this.all=e.all}return e.prototype.create=function(e,t,n){return new Je(this.selector,e,this.name,t,n,this.changeHandler,this.all)},e}(),Ke=[];function Xe(e,t,n){var r=e.get(t);r||(r=[],e.set(t,r)),r.push(n)}function Ye(e,t){for(var n=t.binders,r=n.length,i=new Map,o=0,s=e.length;o<s;++o){for(var a=e[o],u=a.addedNodes,c=a.removedNodes,l=0,h=c.length;l<h;++l){var d=c[l];if(1===d.nodeType)for(var p=0;p<r;++p){var f=n[p];f.onRemove(d)&&Xe(i,f,a)}}for(var v=0,g=u.length;v<g;++v){var m=u[v];if(1===m.nodeType)for(var y=0;y<r;++y){var b=n[y];b.onAdd(m)&&Xe(i,b,a)}}}i.forEach(function(e,t){null!==t.changeHandler&&t.viewModel[t.changeHandler](e)})}var Je=function(){function e(e,t,n,r,i,o,s){this.selector=e,this.viewHost=t,this.property=n,this.viewModel=r,this.controller=i,this.changeHandler=o in r?o:null,this.usesShadowDOM=i.behavior.usesShadowDOM,this.all=s,!this.usesShadowDOM&&i.view&&i.view.contentView?this.contentView=i.view.contentView:this.contentView=null}return e.prototype.matches=function(e){if(e.matches(this.selector)){if(null===this.contentView)return!0;var t=this.contentView,n=e.auAssignedSlot;if(n&&n.projectFromAnchors){for(var r=n.projectFromAnchors,i=0,o=r.length;i<o;++i)if(r[i].auOwnerView===t)return!0;return!1}return e.auOwnerView===t}return!1},e.prototype.bind=function(e){var t=this.viewHost,n=this.viewModel,r=t.__childObserver__;if(!r){r=t.__childObserver__=S.b.createMutationObserver(Ye);var i={childList:!0,subtree:!this.usesShadowDOM};r.observe(t,i),r.binders=[]}if(r.binders.push(this),this.usesShadowDOM){var o=t.firstElementChild;if(this.all){var s=n[this.property];for(s?s.splice(0):s=n[this.property]=[];o;)this.matches(o)&&s.push(o.au&&o.au.controller?o.au.controller.viewModel:o),o=o.nextElementSibling;null!==this.changeHandler&&this.viewModel[this.changeHandler](Ke)}else for(;o;){if(this.matches(o)){var a=o.au&&o.au.controller?o.au.controller.viewModel:o;this.viewModel[this.property]=a,null!==this.changeHandler&&this.viewModel[this.changeHandler](a);break}o=o.nextElementSibling}}},e.prototype.onRemove=function(e){if(this.matches(e)){var t=e.au&&e.au.controller?e.au.controller.viewModel:e;if(this.all){var n=this.viewModel[this.property]||(this.viewModel[this.property]=[]),r=n.indexOf(t);return-1!==r&&n.splice(r,1),!0}return!1}return!1},e.prototype.onAdd=function(e){if(this.matches(e)){var t=e.au&&e.au.controller?e.au.controller.viewModel:e;if(this.all){var n=this.viewModel[this.property]||(this.viewModel[this.property]=[]);if("*"===this.selector)return n.push(t),!0;for(var r=0,i=e.previousElementSibling;i;)this.matches(i)&&r++,i=i.previousElementSibling;return n.splice(r,0,t),!0}this.viewModel[this.property]=t,null!==this.changeHandler&&this.viewModel[this.changeHandler](t)}return!1},e.prototype.unbind=function(){this.viewHost.__childObserver__&&(this.viewHost.__childObserver__.disconnect(),this.viewHost.__childObserver__=null,this.viewModel[this.property]=null)},e}();function Ze(e,t){return Array.isArray(t)?e.removeMany(t,!0):e.remove(t,!0)}var et={before:function(e,t,n){return void 0===t?n():n().then(function(){return Ze(e,t)})},with:function(e,t,n){return void 0===t?n():Promise.all([Ze(e,t),n()])},after:function(e,t,n){return Promise.resolve(e.removeAll(!0)).then(n)}};function tt(e){return e.skipActivation||"function"!=typeof e.viewModel.activate?Promise.resolve():e.viewModel.activate(e.model)||Promise.resolve()}var nt=Object(A.r)(Ve,re)(x=function(){function e(e,t){this.viewEngine=e,this.viewLocator=t}return e.prototype._swap=function(e,t){var n=et[e.swapOrder]||et.after,r=e.viewSlot.children.slice();return n(e.viewSlot,r,function(){return Promise.resolve(e.viewSlot.add(t)).then(function(){e.currentController&&e.currentController.unbind()})}).then(function(){e.compositionTransactionNotifier&&e.compositionTransactionNotifier.done()})},e.prototype._createControllerAndSwap=function(e){var t=this;return this.createController(e).then(function(n){return n.automate(e.overrideContext,e.owningView),e.compositionTransactionOwnershipToken?e.compositionTransactionOwnershipToken.waitForCompositionComplete().then(function(){return t._swap(e,n.view)}).then(function(){return n}):t._swap(e,n.view).then(function(){return n})})},e.prototype.createController=function(e){var t=this,n=void 0,r=void 0,i=void 0,o=void 0;return this.ensureViewModel(e).then(tt).then(function(){n=e.childContainer,r=e.viewModel,i=e.viewModelResource,o=i.metadata;var s=t.viewLocator.getViewStrategy(e.view||r);return e.viewResources&&s.makeRelativeTo(e.viewResources.viewUrl),o.load(n,i.value,null,s,!0)}).then(function(t){return o.create(n,G.dynamic(e.host,r,t))})},e.prototype.ensureViewModel=function(e){var t=e.childContainer=e.childContainer||e.container.createChild();if("string"==typeof e.viewModel)return e.viewModel=e.viewResources?e.viewResources.relativeToView(e.viewModel):e.viewModel,this.viewEngine.importViewModelResource(e.viewModel).then(function(n){return t.autoRegister(n.value),e.host&&t.registerInstance(S.b.Element,e.host),e.viewModel=t.viewModel=t.get(n.value),e.viewModelResource=n,e});var n="function"==typeof e.viewModel,r=n?e.viewModel:e.viewModel.constructor,i=_.d.getOrCreateOwn(_.d.resource,Ue,r);return i.elementName=i.elementName||"dynamic-element",i.initialize(n?t:e.container||t,r),e.viewModelResource={metadata:i,value:r},e.host&&t.registerInstance(S.b.Element,e.host),t.viewModel=e.viewModel=n?t.get(r):e.viewModel,Promise.resolve(e)},e.prototype.compose=function(e){var t=this;e.childContainer=e.childContainer||e.container.createChild(),e.view=this.viewLocator.getViewStrategy(e.view);var n=e.childContainer.get(L),r=n.tryCapture();return r?e.compositionTransactionOwnershipToken=r:e.compositionTransactionNotifier=n.enlist(),e.viewModel?this._createControllerAndSwap(e):e.view?(e.viewResources&&e.view.makeRelativeTo(e.viewResources.viewUrl),e.view.loadViewFactory(this.viewEngine,new $).then(function(n){var r=n.create(e.childContainer);return r.bind(e.bindingContext,e.overrideContext),e.compositionTransactionOwnershipToken?e.compositionTransactionOwnershipToken.waitForCompositionComplete().then(function(){return t._swap(e,r)}).then(function(){return r}):t._swap(e,r).then(function(){return r})})):e.viewSlot?(e.viewSlot.removeAll(),e.compositionTransactionNotifier&&e.compositionTransactionNotifier.done(),Promise.resolve(null)):Promise.resolve(null)},e}())||x,rt=function(){function e(){}return e.prototype.initialize=function(e,t){},e.prototype.register=function(e,t){},e.prototype.load=function(e,t){var n=new t;e.get(P.y).registerElementConfig(n)},e}();function it(e){return function(t){"string"==typeof e||Object.getPrototypeOf(e)===Object.prototype?t.$resource=e:_.d.define(_.d.resource,e,t)}}function ot(e){return function(t){if(e instanceof Ue)_.d.define(_.d.resource,e,t);else{var n=_.d.getOrCreateOwn(_.d.resource,Ue,t);Object.assign(n,e)}}}function st(e){return function(t){_.d.getOrCreateOwn(_.d.resource,Ue,t).elementName=de(e,"custom element")}}function at(e,t,n){return function(r){var i=_.d.getOrCreateOwn(_.d.resource,Ue,r);i.attributeName=de(e,"custom attribute"),i.attributeDefaultBindingMode=t,i.aliases=n}}function ut(e){var t=function(e){_.d.getOrCreateOwn(_.d.resource,Ue,e).liftsContent=!0};return e?t(e):t}function ct(e,t,n){var r=function(t,n,r){var i=n?t.constructor:t,o=_.d.getOrCreateOwn(_.d.resource,Ue,i);return n&&((e=e||{}).name=n),new qe(e).registerWith(i,o,r)};if(!e)return r;if(t){var i=e;return e=null,r(i,t,n)}return r}function lt(e){var t=function(e){_.d.getOrCreateOwn(_.d.resource,Ue,e).hasDynamicOptions=!0};return e?t(e):t}var ht={mode:"open"};function dt(e){var t="function"!=typeof e&&e?e:ht,n=function(e){var n=_.d.getOrCreateOwn(_.d.resource,Ue,e);n.targetShadowDOM=!0,n.shadowDOMOptions=t};return"function"==typeof e?n(e):n}function pt(e){return function(t){_.d.getOrCreateOwn(_.d.resource,Ue,t).processAttributes=function(t,n,r,i,o){try{e(t,n,r,i,o)}catch(e){C.getLogger("templating").error(e)}}}}function ft(){return!1}function vt(e){return function(t){_.d.getOrCreateOwn(_.d.resource,Ue,t).processContent=e?function(t,n,r,i){try{return e(t,n,r,i)}catch(e){return C.getLogger("templating").error(e),!1}}:ft}}function gt(e){var t=function(e){_.d.getOrCreateOwn(_.d.resource,Ue,e).containerless=!0};return e?t(e):t}function mt(e){return function(t){_.d.define(re.viewStrategyMetadataKey,e,t)}}function yt(e){return mt(new Y(e))}function bt(e,t,n){return mt(new te(e,t,n))}function wt(e,t){var n=void 0,r=void 0;"function"==typeof e?n=e:(r=e,n=void 0);var i=function(e){_.d.define(re.viewStrategyMetadataKey,new Z(r,t),e)};return n?i(n):i}function xt(e){return function(t){t.$view=e}}function kt(e){var t=function(e){_.d.define(_.d.resource,new rt,e)};return e?t(e):t}function Ct(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){_.d.define(Ve.viewModelRequireMetadataKey,t,e)}}var _t=Object(A.r)(A.b,Re,Pe,nt)(k=function(){function e(e,t,n,r){this._container=e,this._moduleAnalyzer=t,this._viewCompiler=n,this._compositionEngine=r,e.registerInstance(M,M.instance=new M)}return e.prototype.configureAnimator=function(e){this._container.unregister(M),this._container.registerInstance(M,M.instance=e)},e.prototype.compose=function(e){return this._compositionEngine.compose(e)},e.prototype.enhance=function(e){e instanceof S.b.Element&&(e={element:e});var t={},n=e.resources||this._container.get(pe);this._viewCompiler._compileNode(e.element,n,t,e.element.parentNode,"root",!0);var r=new Se(e.element,t,n),i=e.container||this._container.createChild(),o=r.create(i,G.enhance());return o.bind(e.bindingContext||{},e.overrideContext),o.firstChild=o.lastChild=o.fragment,o.fragment=S.b.createDocumentFragment(),o.attached(),o},e}())||k},10:function(e,t,n){"use strict";n.r(t);var r=n(0),i=n(2),o=n(1),s=n(4),a=n(7),u=n(6),c=function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},l=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s},h=/url\((?!['"]data)([^)]+)\)/gi;var d=function(){function e(e){this.injectedElement=null,this.address=e,this._scoped=null,this._global=!1,this._alreadyGloballyInjected=!1}return e.prototype.initialize=function(e,t){this._scoped=new t(this)},e.prototype.register=function(e,t){"scoped"===t?e.registerViewEngineHooks(this._scoped):this._global=!0},e.prototype.load=function(e){var t=this;return e.get(a.a).loadText(this.address).catch(function(e){return null}).then(function(e){e&&(e=function(e,t){if("string"!=typeof t)throw new Error("Failed loading required CSS file: "+e);return t.replace(h,function(t,n){var r=n.charAt(0);return"'"!==r&&'"'!==r||(n=n.substr(1,n.length-2)),"url('"+Object(u.d)(n,e)+"')"})}(t.address,e),t._scoped&&(t._scoped.css=e),t._global&&(t._alreadyGloballyInjected=!0,t.injectedElement=r.b.injectStyles(e)))})},e}(),p=function(){function e(e){this.injectedElements=[],this.owner=e,this.css=null}return e.prototype.beforeCompile=function(e,t,n){if(n.targetShadowDOM)this.injectedElements.push(r.b.injectStyles(this.css,e,!0));else if(r.c.scopedCSS){r.b.injectStyles(this.css,e,!0).setAttribute("scoped","scoped")}else this.owner._alreadyGloballyInjected||(this.owner.injectedElement=r.b.injectStyles(this.css),this.owner._alreadyGloballyInjected=!0)},e}();var f=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e};function v(e,t,n){var r=[];return!t||n.previouslyTraversed.has(t)?r:(n.previouslyTraversed.add(t),r.push.apply(r,function(e,t,n){var r=[];if(!t||n.previouslyTraversed.has(t))return r;n.previouslyTraversed.add(t),t.target===e&&r.push(f({},n,{immediateParent:t,propertyInParent:"target"}));return r.push.apply(r,g(e,t.viewFactory,f({},n,{immediateParent:t,propertyInParent:"viewFactory"}))),r}(e,t.behavior,f({},n,{parentController:t,immediateParent:t,propertyInParent:"behavior"})).concat(function(e,t,n){var r=[];return!t||n.previouslyTraversed.has(t)?r:(n.previouslyTraversed.add(t),r.push.apply(r,g(e,t.viewFactory,f({},n,{immediateParent:t,propertyInParent:"viewFactory"})).concat(y(e,t.viewModel,f({},n,{immediateParent:t,propertyInParent:"viewModel"})))),r)}(e,t.instruction,f({},n,{parentController:t,immediateParent:t,propertyInParent:"instruction"})),b(e,t.scope,f({},n,{parentController:t,immediateParent:t,propertyInParent:"scope"})),b(e,t.view,f({},n,{parentController:t,immediateParent:t,propertyInParent:"view"})),y(e,t.viewModel,f({},n,{parentController:t,immediateParent:t,propertyInParent:"viewModel"})))),r)}function g(e,t,n){var r=[];return!t||n.previouslyTraversed.has(t)?r:(n.previouslyTraversed.add(t),t.instructions&&Object.keys(t.instructions).forEach(function(i){var o=t.instructions[i];r.push.apply(r,g(e,o.viewFactory,f({},n,{immediateParent:o,propertyInParent:"viewFactory"}))),o.providers&&o.providers.length&&o.providers.forEach(function(t,i){t===e&&r.push(f({},n,{immediateParent:o.providers,propertyInParent:i}))})}),t.resources&&r.push.apply(r,m(e,t.resources,f({},n,{immediateParent:t,propertyInParent:"resources"}))),r)}function m(e,t,n){var r=[];return!t||n.previouslyTraversed.has(t)?r:(n.previouslyTraversed.add(t),["bindingBehaviors","valueConverters"].forEach(function(i){var o=t[i];o&&Object.keys(o).forEach(function(t){var i=o[t];i&&i.constructor===e&&r.push(f({},n,{immediateParent:o,propertyInParent:t,instance:!0}))})}),r.push.apply(r,m(e,t.parent,f({},n,{immediateParent:t,propertyInParent:"parent"}))),r)}function y(e,t,n){var r=[];if(!t)return r;var i=n.previouslyTraversed.has(t);return n.previouslyTraversed.add(t),t.constructor===e&&(r.push(f({},n,{instance:!0,duplicate:i})),i)?r:(r.push.apply(r,w(e,t.overrideContext,f({},n,{immediateParent:t,propertyInParent:"overrideContext"})).concat(function(e,t,n){var r=[];if(!t||n.previouslyTraversed.has(t))return r;n.previouslyTraversed.add(t),t.viewPorts&&Object.keys(t.viewPorts).forEach(function(i){var o=t.viewPorts[i];r.push.apply(r,function(e,t,n){var r=[];return!t||n.previouslyTraversed.has(t)?r:(n.previouslyTraversed.add(t),r.push.apply(r,w(e,t.overrideContext,f({},n,{immediateParent:t,propertyInParent:"overrideContext"})).concat(b(e,t.owningView,f({},n,{immediateParent:t,propertyInParent:"owningView"})),b(e,t.view,f({},n,{immediateParent:t,propertyInParent:"view"})),x(e,t.viewSlot,f({},n,{immediateParent:t,propertyInParent:"viewSlot"})))),r)}(e,o,f({},n,{immediateParent:t.viewPorts,propertyInParent:i})))});return r}(e,t.router,f({},n,{immediateParent:t,propertyInParent:"router"})))),r)}function b(e,t,n){var r=[];return!t||n.previouslyTraversed.has(t)?r:(n.previouslyTraversed.add(t),r.push.apply(r,y(e,t.bindingContext,f({},n,{relatedView:t,immediateParent:t,propertyInParent:"bindingContext"})).concat(v(e,t.controller,f({},n,{relatedView:t,immediateParent:t,propertyInParent:"controller"})),w(e,t.overrideContext,f({},n,{relatedView:t,immediateParent:t,propertyInParent:"overrideContext"})),m(e,t.resources,f({},n,{relatedView:t,immediateParent:t,propertyInParent:"resources"})),g(e,t.viewFactory,f({},n,{relatedView:t,immediateParent:t,propertyInParent:"viewFactory"})))),t.controllers&&t.controllers.length&&t.controllers.forEach(function(i,o){r.push.apply(r,v(e,i,f({},n,{relatedView:t,immediateParent:t.controllers,propertyInParent:o})))}),t.children&&t.children.length&&t.children.forEach(function(i,o){r.push.apply(r,x(e,i,f({},n,{childOfViewSlot:i,relatedView:t,immediateParent:t.children,propertyInParent:o})))}),r)}function w(e,t,n){var r=[];return!t||n.previouslyTraversed.has(t)?r:(n.previouslyTraversed.add(t),r.push.apply(r,y(e,t.bindingContext,f({},n,{immediateParent:t,propertyInParent:"bindingContext"})).concat(w(e,t.parentOverrideContext,f({},n,{immediateParent:t,propertyInParent:"parentOverrideContext"})))),r)}function x(e,t,n){var r=[];return!t||n.previouslyTraversed.has(t)?r:(n.previouslyTraversed.add(t),r.push.apply(r,y(e,t.bindingContext,f({},n,{immediateParent:t,propertyInParent:"bindingContext"})).concat(w(e,t.overrideContext,f({},n,{immediateParent:t,propertyInParent:"overrideContext"})))),t.children&&t.children.length&&t.children.forEach(function(i,o){r.push.apply(r,b(e,i,f({},n,{childOfViewSlot:t,relatedView:i,immediateParent:t.children,propertyInParent:o})))}),r)}function k(e){return e.children&&e.children.length?e.children.filter(function(e){return e instanceof o.N&&e.children&&e.children.length}):[]}function C(e){var t=P().filter(function(e){return e.au&&e.au.controller&&(e.au.controller.view||e.au.controller.scope)}).map(function(e){return e.au.controller}),n=new Set,r=new Set,i=new Set;return t.forEach(function(t){var o=function(e,t){var n=[],r=[],i=e.view,o=e.scope,s=[];if(i&&i.viewFactory&&i.viewFactory.template===t)n=[e];else if(o&&o.controller&&o.viewFactory&&o.viewFactory.template===t)r=[o.controller];else{var a=i?k(i):[],u=o?k(o):[];s=Array.from(new Set(a.concat(u))).filter(function(e){return function(e,t){return!!e.children.find(function(e){return e.viewFactory&&e.viewFactory.template===t})}(e,t)})}return{matchingViewControllers:n,matchingScopeControllers:r,slotsWithMatchingViews:s}}(t,e),s=o.matchingViewControllers,a=o.matchingScopeControllers,u=o.slotsWithMatchingViews;s.forEach(function(e){return n.add(e)}),a.forEach(function(e){return r.add(e)}),u.forEach(function(e){return i.add(e)})}),{viewControllers:n,scopeControllers:r,slots:i}}function _(e,t){var n=t.parent||t,r=t.get(o.C).elementInstruction||{partReplacements:null},i=n.createChild(),s=e.create(i,r);return s._isUserControlled=!0,s}function S(e,t,n){var r=e[t];if(r)if(r._invalidView)r._replacementView&&(e[t]=r._replacementView);else{var i=function(e){var t=e.firstChild,n=e.lastChild.nextSibling,r=t.parentElement,i=e.bindingContext,o=e.overrideContext,s=e.container;e.removeNodes();var a=e.isAttached;a&&e.detached();var u=e.isBound;return u&&e.unbind(),e._invalidView=!0,{nextSibling:n,parent:r,wasBound:u,wasAttached:a,bindingContext:i,overrideContext:o,container:s}}(r),o=i.nextSibling,s=i.parent,a=i.wasBound,u=i.wasAttached,c=i.bindingContext,l=i.overrideContext,h=i.container,d=r._replacementView=e[t]=_(n||r.viewFactory,h);!d.isBound&&a&&d.bind(c,l),o?d.insertNodesBefore(o):d.appendNodesTo(s),!d.isAttached&&u&&d.attached()}}n.d(t,"getAuElements",function(){return P}),n.d(t,"getControllersWithClassInstances",function(){return T}),n.d(t,"HmrContext",function(){return j});var O=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function s(e){try{u(r.next(e))}catch(e){o(e)}}function a(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(s,a)}u((r=r.apply(e,t)).next())})},E=function(e,t){var n,r,i,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return{next:s(0),throw:s(1),return:s(2)};function s(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=r[2&s[0]?"return":s[0]?"throw":"next"])&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[0,i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}},A={id:null,mainResource:{metadata:{},value:void 0}};function P(){return Array.from(r.b.querySelectorAll(".au-target"))}function T(e){var t,n,r=P().map(function(e){return e.au&&Object.values(e.au)||[]}),i=Array.from(new Set((t=[]).concat.apply(t,r))),o=new Set;return(n=[]).concat.apply(n,i.map(function(t){return v(e,t,{previouslyTraversed:o,parentController:t})}))}var j=function(){function e(e){var t=this;this.loader=e,this.viewEngine=s.b.instance.get(o.I),this.moduleAnalyzerCache=this.viewEngine.moduleAnalyzer.cache;var n={fetch:function(e){return(t={})[e]=function(e){var t=function(e){function t(){return e.apply(this,arguments)||this}return c(t,e),t}(p);return t=l([Object(o.eb)(new d(e))],t)}(e),t;var t},hot:function(e){t.reloadCss(e)}};[".css",".less",".sass",".scss",".styl"].forEach(function(e){return t.viewEngine.addResourcePlugin(e,n)})}return e.prototype.handleModuleChange=function(e,t){return O(this,void 0,void 0,function(){var n,r,o,s,a,u,c;return E(this,function(l){switch(l.label){case 0:return(n=this.loader.moduleRegistry[e])?(console.log("Running default HMR for "+e),delete this.loader.moduleRegistry[e],[4,this.loader.loadModule(e)]):[2];case 1:if(r=l.sent(),o=this.moduleAnalyzerCache[e]){if(a=i.a.get(r),u=a.moduleId,c=a.moduleMember,!(s=this.viewEngine.moduleAnalyzer.analyze(u,r,c)).mainResource&&!s.resources)return t.decline(e),[2];s.mainResource&&s.initialize(this.viewEngine.container),Object.assign(o,s)}return n instanceof Object&&Object.keys(n).forEach(function(t){var i=r[t];if(i){var o=n[t],s=typeof o;if("function"===s||"object"===s)console.log("Analyzing "+e+"->"+t),T(o).forEach(function(n){if(void 0!==n.propertyInParent)if(n.instance){var r=n.immediateParent[n.propertyInParent],o=i.prototype;if(o?Object.setPrototypeOf(r,o):console.warn("No new prototype for "+e+"->"+t),n.relatedView&&n.relatedView.isBound){var s=n.relatedView,a=s.bindingContext,u=s.overrideContext;n.relatedView.unbind(),n.relatedView.bind(a,u)}}else console.log("Replacing",n.immediateParent[n.propertyInParent],"with",i),n.immediateParent[n.propertyInParent]=i})}}),[2]}})})},e.prototype.handleViewChange=function(e){return O(this,void 0,void 0,function(){var t,n,r,i,s,a,u,c,l,h,d,p;return E(this,function(f){switch(f.label){case 0:return t=this.loader.applyPluginToUrl(e,"template-registry-entry"),console.log("Handling HMR for "+e),n=this.loader.getOrCreateTemplateRegistryEntry(e),delete this.loader.templateRegistry[e],delete this.loader.moduleRegistry[e],delete this.loader.moduleRegistry[t],(r=n.factory)?(i=this.getResourceModuleByTemplate(r.template),s=i.mainResource,a=i.id,u=s.metadata,c=s.value,n.factory!==u.viewFactory&&console.info("Different origin factories",n.factory,u.viewFactory),(l=new o.G(u.targetShadowDOM,!0)).associatedModuleId=a,[4,this.viewEngine.loadViewFactory(e,l,null,c)]):(console.error("Something's gone wrong, no original ViewFactory?!"),[2]);case 1:return h=f.sent(),r.template=h.template,r.instructions=h.instructions,r.resources=h.resources,d=C(r.template),p=h,d.slots.forEach(function(e){return function(e,t,n,r){var i=e.children.slice(),o=i.filter(function(e){return r&&r.indexOf(e)>=0||e.viewFactory&&e.viewFactory.template===n}),s=new Map,a=new Map,u=new Map;o.forEach(function(e){s.set(e,e.bindingContext),a.set(e,e.overrideContext),u.set(e,e.controller),e.isBound&&e.unbind(),e._invalidView=!0}),e.removeMany(o,!1,!0),i.forEach(function(n,r){if(n._invalidView){var i=s.get(n),o=a.get(n),c=u.get(n),l=_(t||n.viewFactory,n.container);n._replacementView=l,c&&(c.view=l),l.isBound||l.bind(i,o),e.insert(r,l)}})}(e,p,r.template)}),d.viewControllers.forEach(function(e){return S(e,"view",p)}),d.scopeControllers.forEach(function(e){return S(e,"scope",p)}),[2]}})})},e.prototype.reloadCss=function(e){if(e in this.loader.moduleRegistry){var t=e.lastIndexOf("."),n=e.substring(t+1)+"-resource-plugin",r=this.loader.applyPluginToUrl(e,n);console.log("Handling HMR for "+e),delete this.loader.moduleRegistry[e],delete this.loader.moduleRegistry[r];var i=this.moduleAnalyzerCache[r];if(void 0!==i)if(i.resources&&i.resources.length){var o=i.resources[0].metadata;o._scoped&&o._scoped.injectedElements.length?console.error("Hot Reloading scopedCSS is not yet supported!"):(o.injectedElement&&o.injectedElement.remove(),o.load(s.b.instance))}else console.error("Something's wrong, no resources for this CSS file "+e);else console.error("Unable to find module, check the plugin exists and the module has been loaded with the expected plugin")}},e.prototype.getResourceModuleByTemplate=function(e){return Object.values(this.moduleAnalyzerCache).find(function(t){return t.mainResource&&t.mainResource.metadata&&t.mainResource.metadata.viewFactory&&t.mainResource.metadata.viewFactory.template===e})||A},e.prototype.getResourceModuleById=function(e){return e in this.moduleAnalyzerCache?this.moduleAnalyzerCache[e]:A},e}()},11:function(e,t,n){"use strict";var r=n(0),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};"undefined"==typeof FEATURE_NO_ES2015&&(function(e,t){if(!(t in e)){var n,o=r.d.global,s=0,a=""+Math.random(),u="__symbol:",c=u.length,l="__symbol@@"+a,h="defineProperty",d="defineProperties",p="getOwnPropertyNames",f="getOwnPropertyDescriptor",v="propertyIsEnumerable",g=e[p],m=e[f],y=e.create,b=e.keys,w=e[h],x=e[d],k=m(e,p),C=e.prototype,_=C.hasOwnProperty,S=C[v],O=C.toString,E=(Array.prototype.indexOf,function(e,t,n){_.call(e,l)||w(e,l,{enumerable:!1,configurable:!1,writable:!1,value:{}}),e[l]["@@"+t]=n}),A=function(){},P=function(e){return e!=l&&!_.call(M,e)},T=function(e){return e!=l&&_.call(M,e)},j=function(e){var t=""+e;return T(t)?_.call(this,t)&&this[l]&&this[l]["@@"+t]:S.call(this,e)},R=function(t){return w(C,t,{enumerable:!1,configurable:!0,get:A,set:function(e){n(this,t,{enumerable:!1,configurable:!0,writable:!0,value:e}),E(this,t,!0)}}),M[t]=w(e(t),"constructor",I)},N=function(e){if(this&&this!==o)throw new TypeError("Symbol is not a constructor");return R(u.concat(e||"",a,++s))},M=y(null),I={value:N},V=function(e){return M[e]},L=function(e,t,r){var i=""+t;return T(i)?(n(e,i,r.enumerable?function(e){var t=y(e);return t.enumerable=!1,t}(r):r),E(e,i,!!r.enumerable)):w(e,t,r),e},F=function(t){return t="[object String]"===O.call(t)?t.split(""):e(t),g(t).filter(T).map(V)};k.value=L,w(e,h,k),k.value=F,w(e,t,k);var B="object"===("undefined"==typeof window?"undefined":i(window))?e.getOwnPropertyNames(window):[],q=e.getOwnPropertyNames;k.value=function(e){if("[object Window]"===O.call(e))try{return q(e)}catch(e){return[].concat([],B)}return g(e).filter(P)},w(e,p,k),k.value=function(e,t){var n=F(t);return n.length?b(t).concat(n).forEach(function(n){j.call(t,n)&&L(e,n,t[n])}):x(e,t),e},w(e,d,k),k.value=j,w(C,v,k),k.value=N,w(o,"Symbol",k),k.value=function(e){var t=u.concat(u,e,a);return t in C?M[t]:R(t)},w(N,"for",k),k.value=function(e){return _.call(M,e)?e.slice(2*c,-a.length):void 0},w(N,"keyFor",k),k.value=function(e,t){var n=m(e,t);return n&&T(t)&&(n.enumerable=j.call(e,t)),n},w(e,f,k),k.value=function(e,t){return 1===arguments.length?y(e):function(e,t){var n=y(e);return null!==t&&"object"===(void 0===t?"undefined":i(t))&&g(t).forEach(function(e){j.call(t,e)&&L(n,e,t[e])}),n}(e,t)},w(e,"create",k),k.value=function(){var e=O.call(this);return"[object String]"===e&&T(this)?"[object Symbol]":e},w(C,"toString",k);try{n=y(w({},u,{get:function(){return w(this,u,{value:!1})[u]}}))[u]||w}catch(e){n=function(e,t,n){var r=m(C,t);delete C[t],w(e,t,n),w(C,t,r)}}}}(Object,"getOwnPropertySymbols"),function(e,t){var n,r=e.defineProperty,i=e.prototype,o=i.toString,s="toStringTag";["iterator","match","replace","search","split","hasInstance","isConcatSpreadable","unscopables","species","toPrimitive",s].forEach(function(t){if(!(t in Symbol))switch(r(Symbol,t,{value:Symbol(t)}),t){case s:(n=e.getOwnPropertyDescriptor(i,"toString")).value=function(){var e=o.call(this),t=void 0===this||null===this?void 0:this[Symbol.toStringTag];return void 0===t?e:"[object "+t+"]"},r(i,"toString",n)}})}(Object,Symbol),function(e,t,n){function r(){return this}t[e]||(t[e]=function(){var t=0,n=this,i={next:function(){var e=n.length<=t;return e?{done:e}:{done:e,value:n[t++]}}};return i[e]=r,i}),n[e]||(n[e]=function(){var t=String.fromCodePoint,n=this,i=0,o=n.length,s={next:function(){var e=o<=i,r=e?"":t(n.codePointAt(i));return i+=r.length,e?{done:e}:{done:e,value:r}}};return s[e]=r,s})}(Symbol.iterator,Array.prototype,String.prototype)),"undefined"==typeof FEATURE_NO_ES2015&&(Number.isNaN=Number.isNaN||function(e){return e!=e},Number.isFinite=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)}),String.prototype.endsWith&&!function(){try{return!"ab".endsWith("a",1)}catch(e){return!0}}()||(String.prototype.endsWith=function(e,t){var n=this.toString();("number"!=typeof t||!isFinite(t)||Math.floor(t)!==t||t>n.length)&&(t=n.length),t-=e.length;var r=n.indexOf(e,t);return-1!==r&&r===t}),String.prototype.startsWith&&!function(){try{return!"ab".startsWith("b",1)}catch(e){return!0}}()||(String.prototype.startsWith=function(e,t){return t=t||0,this.substr(t,e.length)===e}),"undefined"==typeof FEATURE_NO_ES2015&&(Array.from||(Array.from=function(){var e=function(e){return e>0?Math.min(function(e){return isNaN(e=+e)?0:(e>0?Math.floor:Math.ceil)(e)}(e),9007199254740991):0},t=function(e,t,n,r){try{return t(n,r)}catch(t){throw"function"==typeof e.return&&e.return(),t}};return function(n){var r,i,o,s,a=Object(n),u="function"==typeof this?this:Array,c=arguments.length,l=c>1?arguments[1]:void 0,h=void 0!==l,d=0,p=a[Symbol.iterator];if(h&&(l=l.bind(c>2?arguments[2]:void 0)),void 0==p||Array.isArray(n))for(i=new u(r=e(a.length));r>d;d++)i[d]=h?l(a[d],d):a[d];else for(s=p.call(a),i=new u;!(o=s.next()).done;d++)i[d]=h?t(s,l,o.value,d):o.value;return i.length=d,i}}()),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{configurable:!0,writable:!0,enumerable:!1,value:function(e){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof e)throw new TypeError("predicate must be a function");for(var t,n=Object(this),r=n.length>>>0,i=arguments[1],o=0;o<r;o++)if(t=n[o],e.call(i,t,o,n))return t}}),Array.prototype.findIndex||Object.defineProperty(Array.prototype,"findIndex",{configurable:!0,writable:!0,enumerable:!1,value:function(e){if(null===this)throw new TypeError("Array.prototype.findIndex called on null or undefined");if("function"!=typeof e)throw new TypeError("predicate must be a function");for(var t,n=Object(this),r=n.length>>>0,i=arguments[1],o=0;o<r;o++)if(t=n[o],e.call(i,t,o,n))return o;return-1}})),"undefined"!=typeof FEATURE_NO_ES2016||Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{configurable:!0,writable:!0,enumerable:!1,value:function(e){var t=Object(this),n=parseInt(t.length)||0;if(0===n)return!1;var r,i,o=parseInt(arguments[1])||0;for(o>=0?r=o:(r=n+o)<0&&(r=0);r<n;){if(e===(i=t[r])||e!=e&&i!=i)return!0;r++}return!1}}),"undefined"==typeof FEATURE_NO_ES2015&&(!function(){var e=!1;try{var t=Object.keys("a");e=1!==t.length||"0"!==t[0]}catch(t){e=!0}e&&(Object.keys=function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),n=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],r=n.length;return function(i){if(void 0===i||null===i)throw TypeError("Cannot convert undefined or null to object");i=Object(i);var o,s,a=[];for(o in i)e.call(i,o)&&a.push(o);if(t)for(s=0;s<r;s++)e.call(i,n[s])&&a.push(n[s]);return a}}())}(),function(e){"assign"in e||e.defineProperty(e,"assign",{configurable:!0,writable:!0,value:function(){var t=e.getOwnPropertySymbols,n=e.propertyIsEnumerable,r=t?function(e){return t(e).filter(n,e)}:function(){return Array.prototype};return function(n){function i(e){n[e]=a[e]}!t||n instanceof e||console.warn("problematic Symbols",n);for(var o=1,s=arguments.length;o<s;++o){var a=arguments[o];null!==a&&void 0!==a&&e.keys(a).concat(r(a)).forEach(i)}return n}}()})}(Object),Object.is||(Object.is=function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t})),"undefined"==typeof FEATURE_NO_ES2015&&function(e){var t,n,r,i=Object.defineProperty,o=function(e,t){return e===t||e!=e&&t!=t};("undefined"==typeof WeakMap&&(e.WeakMap=s({delete:a,clear:f,get:u,has:h,set:d},!0)),"undefined"!=typeof Map&&"function"==typeof(new Map).values&&(new Map).values().next)||(e.Map=s(((n={delete:a,has:h,get:u,set:d,keys:function(){return m(this._itp,this._keys)},values:v,entries:g,forEach:b,clear:f})[Symbol.iterator]=g,n)));"undefined"!=typeof Set&&"function"==typeof(new Set).values&&(new Set).values().next||(e.Set=s(((r={has:l,add:p,delete:a,clear:f,keys:v,values:v,entries:function(){return m(this._itp,this._values,this._values)},forEach:b})[Symbol.iterator]=v,r)));function s(e,t){function n(e){if(!this||this.constructor!==n)return new n(e);this._keys=[],this._values=[],this._itp=[],this.objectOnly=t,e&&function(e){this.add?e.forEach(this.add,this):e.forEach(function(e){this.set(e[0],e[1])},this)}.call(this,e)}return t||i(e,"size",{get:y}),e.constructor=n,n.prototype=e,n}function a(e){return this.has(e)&&(this._keys.splice(t,1),this._values.splice(t,1),this._itp.forEach(function(e){t<e[0]&&e[0]--})),-1<t}function u(e){return this.has(e)?this._values[t]:void 0}function c(e,n){if(this.objectOnly&&n!==Object(n))throw new TypeError("Invalid value used as weak collection key");if(n!=n||0===n)for(t=e.length;t--&&!o(e[t],n););else t=e.indexOf(n);return-1<t}function l(e){return c.call(this,this._values,e)}function h(e){return c.call(this,this._keys,e)}function d(e,n){return this.has(e)?this._values[t]=n:this._values[this._keys.push(e)-1]=n,this}function p(e){return this.has(e)||this._values.push(e),this}function f(){(this._keys||0).length=this._values.length=0}function v(){return m(this._itp,this._values)}function g(){return m(this._itp,this._keys,this._values)}function m(e,t,n){var r,i=[0],o=!1;return e.push(i),(r={})[Symbol.iterator]=function(){return this},r.next=function(){var r,s=i[0];return!o&&s<t.length?(r=n?[t[s],n[s]]:t[s],i[0]++):(o=!0,e.splice(e.indexOf(i),1)),{done:o,value:r}},r}function y(){return this._values.length}function b(e,t){for(var n=this.entries();;){var r=n.next();if(r.done)break;e.call(t,r.value[1],r.value[0],this)}}"undefined"==typeof WeakSet&&(e.WeakSet=s({delete:a,add:p,clear:f,has:l},!0))}(r.d.global),"undefined"==typeof FEATURE_NO_ES2015&&function(){var e=Function.prototype.bind;void 0===r.d.global.Reflect&&(r.d.global.Reflect={}),"function"!=typeof Reflect.defineProperty&&(Reflect.defineProperty=function(e,t,n){if("object"===(void 0===e?"undefined":i(e))?null===e:"function"!=typeof e)throw new TypeError("Reflect.defineProperty called on non-object");try{return Object.defineProperty(e,t,n),!0}catch(e){return!1}}),"function"!=typeof Reflect.construct&&(Reflect.construct=function(t,n){if(n)switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(e.apply(t,r))}),"function"!=typeof Reflect.ownKeys&&(Reflect.ownKeys=function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))})}(),"undefined"==typeof FEATURE_NO_ESNEXT&&function(){var e=Object.freeze({});"function"!=typeof Reflect.getOwnMetadata&&(Reflect.getOwnMetadata=function(t,n,r){if(n.hasOwnProperty("__metadata__"))return(n.__metadata__[r]||e)[t]}),"function"!=typeof Reflect.defineMetadata&&(Reflect.defineMetadata=function(e,t,n,r){var i=n.hasOwnProperty("__metadata__")?n.__metadata__:n.__metadata__={};(i[r]||(i[r]={}))[e]=t}),"function"!=typeof Reflect.metadata&&(Reflect.metadata=function(e,t){return function(n,r){Reflect.defineMetadata(e,t,n,r)}})}()},12:function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var u,c=[],l=!1,h=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!l){var e=a(d);l=!0;for(var t=c.length;t;){for(u=c,c=[];++h<t;)u&&u[h].run();h=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new f(e,t)),1!==c.length||l||a(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},13:function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"bootstrap",function(){return d}),n.d(t,"starting",function(){return p});n(11);var r=n(0),i=[],o=void 0,s=new Promise(function(e){return o=e}),a=r.d.global,u=void 0!==e&&!e.browser;function c(){return r.d.Loader?Promise.resolve(new r.d.Loader):Promise.reject("No PLATFORM.Loader is defined and there is neither a System API (ES6) or a Require API (AMD) globally available to load your app.")}function l(t){var n=function(e,n){return t.normalize(e,n).then(function(n){return t.map(e,n),n})};return function(t){var n=void 0,i=u&&("renderer"===e.type||e.versions["node-webkit"]);if(u&&!i)n="nodejs";else if("undefined"!=typeof window)n="browser";else{if("undefined"==typeof self)throw new Error("Could not determine platform implementation to load.");n="worker"}return t.loadModule("aurelia-pal-"+n).then(function(e){return"nodejs"===n&&!r.f&&e.globalize()||e.initialize()})}(t).then(function(){return t.normalize("aurelia-bootstrapper")}).then(function(e){var t=n("aurelia-framework",e);return Promise.all([t,t.then(function(e){return n("aurelia-dependency-injection",e)}),n("aurelia-router",e),n("aurelia-logging-console",e)])}).then(function(e){var n=e[0];return t.loadModule(n)}).then(function(e){return o(function(){return new e.Aurelia(t)})})}function h(e,t,n){return n.host=e,n.configModuleId=t||null,t?n.loader.loadModule(t).then(function(e){if(!e.configure)throw new Error("Cannot initialize module '"+t+"' without a configure function.");return e.configure(n)}):(n.use.standardConfiguration().developmentLogging(),n.start().then(function(){return n.setRoot()}))}function d(e){var t=s.then(function(t){return e(t())});return i&&i.push(t),t}var p=(a.document&&"complete"!==a.document.readyState?new Promise(function(e){function t(){a.document.removeEventListener("DOMContentLoaded",t),a.removeEventListener("load",t),e()}a.document.addEventListener("DOMContentLoaded",t),a.addEventListener("load",t)}):Promise.resolve()).then(c).then(l).then(function(){for(var e=a.document.querySelectorAll("[aurelia-app],[data-aurelia-app]"),t=0,n=e.length;t<n;++t){var r=e[t],o=r.getAttribute("aurelia-app")||r.getAttribute("data-aurelia-app");d(h.bind(null,r,o))}var s=console.error.bind(console),u=i.map(function(e){return e.catch(s)});return i=null,Promise.all(u)})}.call(this,n(12))},14:function(e,t,n){"use strict";n.r(t),n.d(t,"TextTemplateLoader",function(){return c}),n.d(t,"ensureOriginOnExports",function(){return l}),n.d(t,"WebpackLoader",function(){return h});var r=n(2),i=n(7),o=n(0),s=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),a=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function s(e){try{u(r.next(e))}catch(e){o(e)}}function a(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(s,a)}u((r=r.apply(e,t||[])).next())})},u=function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},c=function(){function e(){}return e.prototype.loadTemplate=function(e,t){return a(this,void 0,void 0,function(){var n;return u(this,function(r){switch(r.label){case 0:return[4,e.loadText(t.address)];case 1:return n=r.sent(),t.template=o.b.createTemplateFromMarkup(n),[2]}})})},e}();function l(e,t){var n,i,o=e;if(o.__useDefault&&(o=o.default),r.a.set(o,new r.a(t,"default")),"object"==typeof o)for(n in o)"function"==typeof(i=o[n])&&r.a.set(i,new r.a(t,n));return e}var h=function(t){function r(){var r=t.call(this)||this;return r.moduleRegistry=Object.create(null),r.loaderPlugins=Object.create(null),r.modulesBeingLoaded=new Map,r.useTemplateLoader(new c),r.addPlugin("template-registry-entry",{fetch:function(t){return a(r,void 0,void 0,function(){var r,i,o=this;return u(this,function(s){switch(s.label){case 0:return this.hmrContext||(r=n(10).HmrContext,this.hmrContext=new r(this)),e.hot.accept(t,function(){return a(o,void 0,void 0,function(){return u(this,function(e){switch(e.label){case 0:return[4,this.hmrContext.handleViewChange(t)];case 1:return e.sent(),[2]}})})}),(i=this.getOrCreateTemplateRegistryEntry(t)).templateIsLoaded?[3,2]:[4,this.templateLoader.loadTemplate(this,i)];case 1:s.sent(),s.label=2;case 2:return[2,i]}})})}}),o.d.eachModule=function(e){var t=n.c;Object.getOwnPropertyNames(t).some(function(n){var r=t[n].exports;return"object"==typeof r&&e(n,r)})},r}return s(r,t),r.prototype._import=function(t,r){return void 0===r&&(r=!0),a(this,void 0,void 0,function(){var i,o,s,a,c,l,h=this;return u(this,function(u){switch(u.label){case 0:if(i=t.split("!"),o=i.splice(i.length-1,1)[0],!(s=1===i.length?i[0]:null))return[3,2];if(!(a=this.loaderPlugins[s]))throw new Error("Plugin "+s+" is not registered in the loader.");return e.hot&&a.hot&&e.hot.accept(o,function(){return a.hot(o)}),[4,a.fetch(o)];case 1:return[2,u.sent()];case 2:return n.m[o]?(r&&e.hot&&this.hmrContext&&e.hot.accept(o,function(){return h.hmrContext.handleModuleChange(o,e.hot)}),[2,n(o)]):(c="async!"+o,n.m[c]?(r&&e.hot&&this.hmrContext&&(e.hot.accept(o,function(){return h.hmrContext.handleModuleChange(o,e.hot)}),e.hot.accept(c,function(){return h.hmrContext.handleModuleChange(o,e.hot)})),l=n(c),[4,new Promise(l)]):[3,4]);case 3:return[2,u.sent()];case 4:throw new Error("Unable to find module with ID: "+o)}})})},r.prototype.map=function(e,t){},r.prototype.normalizeSync=function(e,t){return e},r.prototype.normalize=function(e,t){return Promise.resolve(e)},r.prototype.useTemplateLoader=function(e){this.templateLoader=e},r.prototype.loadAllModules=function(e){var t=this;return Promise.all(e.map(function(e){return t.loadModule(e)}))},r.prototype.loadModule=function(e,t){return void 0===t&&(t=!0),a(this,void 0,void 0,function(){var n,r,i;return u(this,function(o){switch(o.label){case 0:return(n=this.moduleRegistry[e])?[2,n]:(r=this.modulesBeingLoaded.get(e))?[2,r]:(r=this._import(e,t),this.modulesBeingLoaded.set(e,r),[4,r]);case 1:return i=o.sent(),this.moduleRegistry[e]=l(i,e),this.modulesBeingLoaded.delete(e),[2,i]}})})},r.prototype.loadTemplate=function(e){return this.loadModule(this.applyPluginToUrl(e,"template-registry-entry"),!1)},r.prototype.loadText=function(e){return a(this,void 0,void 0,function(){var t;return u(this,function(n){switch(n.label){case 0:return[4,this.loadModule(e,!1)];case 1:return(t=n.sent())instanceof Array&&t[0]instanceof Array&&t.hasOwnProperty("toString")?[2,t.toString()]:[2,t]}})})},r.prototype.applyPluginToUrl=function(e,t){return t+"!"+e},r.prototype.addPlugin=function(e,t){this.loaderPlugins[e]=t},r}(i.a);o.d.Loader=h},15:function(e,t,n){"use strict";n.r(t);var r,i=n(0);Object.defineProperty(i.d,"Loader",{get:function(){return r||(r=n(14).WebpackLoader)},set:function(e){r=e}})},16:function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var s=e[i];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},17:function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},18:function(e,t,n){},19:function(e,t,n){n(18),n(15),e.exports=n(13)},2:function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"a",function(){return l}),n.d(t,"b",function(){return h}),n.d(t,"c",function(){return d}),n.d(t,"e",function(){return p}),n.d(t,"f",function(){return b});var r=n(0),i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function s(e){return e&&("function"==typeof e||"object"===(void 0===e?"undefined":o(e)))}var a={resource:"aurelia:resource",paramTypes:"design:paramtypes",propertyType:"design:type",properties:"design:properties",get:function(e,t,n){if(s(t)){var r=a.getOwn(e,t,n);return void 0===r?a.get(e,Object.getPrototypeOf(t),n):r}},getOwn:function(e,t,n){if(s(t))return Reflect.getOwnMetadata(e,t,n)},define:function(e,t,n,r){Reflect.defineMetadata(e,t,n,r)},getOrCreateOwn:function(e,t,n,r){var i=a.getOwn(e,n,r);return void 0===i&&(i=new t,Reflect.defineMetadata(e,i,n,r)),i}},u=new Map,c=Object.freeze({moduleId:void 0,moduleMember:void 0}),l=function(){function e(e,t){this.moduleId=e,this.moduleMember=t}return e.get=function(t){var n=u.get(t);return void 0===n&&r.d.eachModule(function(r,i){if("object"===(void 0===i?"undefined":o(i)))for(var s in i)try{if(i[s]===t)return u.set(t,n=new e(r,s)),!0}catch(e){}return i===t&&(u.set(t,n=new e(r,"default")),!0)}),n||c},e.set=function(e,t){u.set(e,t)},e}();function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=function(e,n,r){var i=t.length;if(n){for(r=r||{value:e[n],writable:!0,configurable:!0,enumerable:!0};i--;)r=t[i](e,n,r)||r;Object.defineProperty(e,n,r)}else for(;i--;)e=t[i](e)||e;return e};return r.on=r,r}function d(e,t,n){function r(n,r,o){var s=n.constructor.name+"#"+r,a=t?{}:e||{},u="DEPRECATION - "+s;if("function"!=typeof o.value)throw new SyntaxError("Only methods can be marked as deprecated.");return a.message&&(u+=" - "+a.message),i({},o,{value:function(){if(a.error)throw new Error(u);return console.warn(u),o.value.apply(this,arguments)}})}return t?r(e,t,n):r}function p(e){var t=Object.keys(e);return function(n){var r=function(n){for(var r="function"==typeof n?n.prototype:n,i=t.length;i--;){var o=t[i];Object.defineProperty(r,o,{value:e[o],writable:!0})}};return n?r(n):r}}function f(){return!0}function v(){}function g(e){return void 0===e?e={}:"function"==typeof e&&(e={validate:e}),e.validate||(e.validate=f),e.compose||(e.compose=v),e}function m(e){return function(t){return!0===e(t)}}function y(e,t){return function(n){var r=t(n);if(!0!==r)throw new Error(r||e+" was not correctly implemented.")}}function b(e,t){t=g(t);var n=function n(r){var i="function"==typeof r?r.prototype:r;t.compose(i),n.assert(i),Object.defineProperty(i,"protocol:"+e,{enumerable:!1,configurable:!1,writable:!1,value:!0})};return n.validate=m(t.validate),n.assert=y(e,t.validate),n}b.create=function(e,t){t=g(t);var n="protocol:"+e,r=function(n){var r=b(e,t);return n?r(n):r};return r.decorates=function(e){return!0===e[n]},r.validate=m(t.validate),r.assert=y(e,t.validate),r}},3:function(e,t,n){"use strict";n.d(t,"rb",function(){return _e}),n.d(t,"ub",function(){return Cn}),n.d(t,"vb",function(){return Pr}),n.d(t,"Gb",function(){return _}),n.d(t,"Eb",function(){return S}),n.d(t,"eb",function(){return E}),n.d(t,"kb",function(){return A}),n.d(t,"tb",function(){return P}),n.d(t,"lb",function(){return T}),n.d(t,"ib",function(){return F}),n.d(t,"qb",function(){return $}),n.d(t,"Fb",function(){return ne}),n.d(t,"C",function(){return re}),n.d(t,"db",function(){return ce}),n.d(t,"xb",function(){return he}),n.d(t,"Bb",function(){return de}),n.d(t,"sb",function(){return fe}),n.d(t,"K",function(){return ve}),n.d(t,"s",function(){return ge}),n.d(t,"A",function(){return Oe}),n.d(t,"h",function(){return Ee}),n.d(t,"Y",function(){return Ae}),n.d(t,"e",function(){return Pe}),n.d(t,"u",function(){return Te}),n.d(t,"d",function(){return je}),n.d(t,"c",function(){return Re}),n.d(t,"b",function(){return Ne}),n.d(t,"a",function(){return Me}),n.d(t,"p",function(){return Ie}),n.d(t,"o",function(){return Ve}),n.d(t,"n",function(){return Le}),n.d(t,"f",function(){return Fe}),n.d(t,"V",function(){return Be}),n.d(t,"H",function(){return qe}),n.d(t,"I",function(){return De}),n.d(t,"J",function(){return ze}),n.d(t,"F",function(){return He}),n.d(t,"G",function(){return Ue}),n.d(t,"W",function(){return $e}),n.d(t,"B",function(){return Ge}),n.d(t,"fb",function(){return Ke}),n.d(t,"cb",function(){return Xe}),n.d(t,"O",function(){return Ye}),n.d(t,"P",function(){return Ze}),n.d(t,"ob",function(){return Mn}),n.d(t,"y",function(){return In}),n.d(t,"z",function(){return Vn}),n.d(t,"x",function(){return Ln}),n.d(t,"w",function(){return Fn}),n.d(t,"Cb",function(){return qn}),n.d(t,"Q",function(){return Dn}),n.d(t,"T",function(){return zn}),n.d(t,"ab",function(){return Hn}),n.d(t,"mb",function(){return Un}),n.d(t,"v",function(){return Wn}),n.d(t,"U",function(){return Qn}),n.d(t,"X",function(){return $n}),n.d(t,"q",function(){return Gn}),n.d(t,"S",function(){return Kn}),n.d(t,"r",function(){return Xn}),n.d(t,"wb",function(){return Yn}),n.d(t,"nb",function(){return Jn}),n.d(t,"gb",function(){return Zn}),n.d(t,"t",function(){return er}),n.d(t,"jb",function(){return tr}),n.d(t,"pb",function(){return ar}),n.d(t,"Ab",function(){return ur}),n.d(t,"zb",function(){return cr}),n.d(t,"R",function(){return lr}),n.d(t,"N",function(){return hr}),n.d(t,"M",function(){return dr}),n.d(t,"k",function(){return pr}),n.d(t,"g",function(){return fr}),n.d(t,"m",function(){return vr}),n.d(t,"l",function(){return gr}),n.d(t,"Z",function(){return mr}),n.d(t,"Hb",function(){return yr}),n.d(t,"i",function(){return br}),n.d(t,"bb",function(){return wr}),n.d(t,"E",function(){return xr}),n.d(t,"D",function(){return kr}),n.d(t,"L",function(){return _r}),n.d(t,"j",function(){return Er}),n.d(t,"yb",function(){return jr}),n.d(t,"hb",function(){return Nr}),n.d(t,"Db",function(){return Mr});var r,i,o,s,a,u,c,l,h,d,p,f,v,g=n(5),m=n(0),y=n(8),b=n(2),w=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function k(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function C(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _="Binding:target",S="Binding:source",O=Object.create(null);function E(e){if(e in O)return O[e];var t=e.charAt(0).toLowerCase()+e.slice(1).replace(/[_.-](\w|$)/g,function(e,t){return t.toUpperCase()});return O[e]=t,t}function A(e,t){return{bindingContext:e,parentOverrideContext:t||null}}function P(e,t,n){var r=t.overrideContext;if(n){for(;n&&r;)n--,r=r.parentOverrideContext;if(n||!r)return;return e in r?r:r.bindingContext}for(;r&&!(e in r)&&!(r.bindingContext&&e in r.bindingContext);)r=r.parentOverrideContext;return r?e in r?r:r.bindingContext:t.bindingContext||t.overrideContext}function T(e,t){return t?{bindingContext:e,overrideContext:A(e,A(t))}:{bindingContext:e,overrideContext:A(e)}}for(var j=[],R=[],N=0;N<100;N++)j.push("_observer"+N),R.push("_observerVersion"+N);function M(e){for(var t=void 0===this._observerSlots?0:this._observerSlots,n=t;n--&&this[j[n]]!==e;);if(-1===n){for(n=0;this[j[n]];)n++;this[j[n]]=e,e.subscribe(S,this),n===t&&(this._observerSlots=n+1)}void 0===this._version&&(this._version=0),this[R[n]]=this._version}function I(e,t){var n=this.observerLocator.getObserver(e,t);M.call(this,n)}function V(e){var t=this.observerLocator.getArrayObserver(e);M.call(this,t)}function L(e){for(var t=this._observerSlots;t--;)if(e||this[R[t]]!==this._version){var n=this[j[t]];this[j[t]]=null,n&&n.unsubscribe(S,this)}}function F(){return function(e){e.prototype.observeProperty=I,e.prototype.observeArray=V,e.prototype.unobserve=L,e.prototype.addObserver=M}}var B=[],q={},D=0,z=100,H=15,U=!1,W=0;function Q(e){for(var t=B.length,n=0;n<t;){var r=B[n];if(q[r.__connectQueueId]=!1,r.connect(!0),++n%100==0&&m.d.performance.now()-e>H)break}B.splice(0,n),B.length?m.d.requestAnimationFrame(Q):(U=!1,W=0)}function $(e){if(W<z)W++,e.connect(!1);else{var t=e.__connectQueueId;void 0===t&&(t=D,D++,e.__connectQueueId=t),q[t]||(B.push(e),q[t]=!0)}U||(U=!0,m.d.requestAnimationFrame(Q))}function G(e,t){return!this.hasSubscriber(e,t)&&(this._context0?this._context1?this._context2?this._contextsRest?(this._contextsRest.push(e),this._callablesRest.push(t),!0):(this._contextsRest=[e],this._callablesRest=[t],!0):(this._context2=e,this._callable2=t,!0):(this._context1=e,this._callable1=t,!0):(this._context0=e,this._callable0=t,!0))}function K(e,t){if(this._context0===e&&this._callable0===t)return this._context0=null,this._callable0=null,!0;if(this._context1===e&&this._callable1===t)return this._context1=null,this._callable1=null,!0;if(this._context2===e&&this._callable2===t)return this._context2=null,this._callable2=null,!0;var n=this._callablesRest;if(void 0===n||0===n.length)return!1;for(var r=this._contextsRest,i=0;(n[i]!==t||r[i]!==e)&&n.length>i;)i++;return!(i>=n.length)&&(r.splice(i,1),n.splice(i,1),!0)}var X=[],Y=[],J=[];function Z(e,t){var n=this._context0,r=this._callable0,i=this._context1,o=this._callable1,s=this._context2,a=this._callable2,u=this._contextsRest?this._contextsRest.length:0,c=void 0,l=void 0,h=void 0,d=void 0;if(u){for(h=J.length;h--&&J[h];);for(h<0?(h=J.length,c=[],l=[],J.push(!0),X.push(c),Y.push(l)):(J[h]=!0,c=X[h],l=Y[h]),d=u;d--;)c[d]=this._contextsRest[d],l[d]=this._callablesRest[d]}if(n&&(r?r.call(n,e,t):n(e,t)),i&&(o?o.call(i,e,t):i(e,t)),s&&(a?a.call(s,e,t):s(e,t)),u){for(d=0;d<u;d++){var p=l[d],f=c[d];p?p.call(f,e,t):f(e,t),c[d]=null,l[d]=null}J[h]=!1}}function ee(){return!!(this._context0||this._context1||this._context2||this._contextsRest&&this._contextsRest.length)}function te(e,t){if(this._context0===e&&this._callable0===t||this._context1===e&&this._callable1===t||this._context2===e&&this._callable2===t)return!0;var n=void 0,r=this._contextsRest;if(!r||0===(n=r.length))return!1;for(var i=this._callablesRest;n--;)if(r[n]===e&&i[n]===t)return!0;return!1}function ne(){return function(e){e.prototype.addSubscriber=G,e.prototype.removeSubscriber=K,e.prototype.callSubscribers=Z,e.prototype.hasSubscribers=ee,e.prototype.hasSubscriber=te}}var re=F()(r=ne()(r=function(){function e(e,t,n,r){this.scope=e,this.expression=t,this.observerLocator=n,this.lookupFunctions=r}return e.prototype.getValue=function(){return this.expression.evaluate(this.scope,this.lookupFunctions)},e.prototype.setValue=function(e){this.expression.assign(this.scope,e)},e.prototype.subscribe=function(e,t){var n=this;if(this.hasSubscribers()||(this.oldValue=this.expression.evaluate(this.scope,this.lookupFunctions),this.expression.connect(this,this.scope)),this.addSubscriber(e,t),1===arguments.length&&e instanceof Function)return{dispose:function(){n.unsubscribe(e,t)}}},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&(this.unobserve(!0),this.oldValue=void 0)},e.prototype.call=function(){var e=this.expression.evaluate(this.scope,this.lookupFunctions),t=this.oldValue;e!==t&&(this.oldValue=e,this.callSubscribers(e,t)),this._version++,this.expression.connect(this,this.scope),this.unobserve(!1)},e}())||r)||r;function ie(e){return+e==e>>>0}function oe(e){return+e}function se(e,t,n){return{index:e,removed:t,addedCount:n}}function ae(){}ae.prototype={calcEditDistances:function(e,t,n,r,i,o){for(var s=o-i+1,a=n-t+1,u=new Array(s),c=void 0,l=void 0,h=0;h<s;++h)u[h]=new Array(a),u[h][0]=h;for(var d=0;d<a;++d)u[0][d]=d;for(var p=1;p<s;++p)for(var f=1;f<a;++f)this.equals(e[t+f-1],r[i+p-1])?u[p][f]=u[p-1][f-1]:(c=u[p-1][f]+1,l=u[p][f-1]+1,u[p][f]=c<l?c:l);return u},spliceOperationsFromEditDistances:function(e){for(var t=e.length-1,n=e[0].length-1,r=e[t][n],i=[];t>0||n>0;)if(0!==t)if(0!==n){var o=e[t-1][n-1],s=e[t-1][n],a=e[t][n-1],u=void 0;(u=s<a?s<o?s:o:a<o?a:o)===o?(o===r?i.push(0):(i.push(1),r=o),t--,n--):u===s?(i.push(3),t--,r=s):(i.push(2),n--,r=a)}else i.push(3),t--;else i.push(2),n--;return i.reverse(),i},calcSplices:function(e,t,n,r,i,o){var s=0,a=0,u=Math.min(n-t,o-i);if(0===t&&0===i&&(s=this.sharedPrefix(e,r,u)),n===e.length&&o===r.length&&(a=this.sharedSuffix(e,r,u-s)),i+=s,o-=a,(n-=a)-(t+=s)==0&&o-i==0)return[];if(t===n){for(var c=se(t,[],0);i<o;)c.removed.push(r[i++]);return[c]}if(i===o)return[se(t,[],n-t)];for(var l=this.spliceOperationsFromEditDistances(this.calcEditDistances(e,t,n,r,i,o)),h=void 0,d=[],p=t,f=i,v=0;v<l.length;++v)switch(l[v]){case 0:h&&(d.push(h),h=void 0),p++,f++;break;case 1:h||(h=se(p,[],0)),h.addedCount++,p++,h.removed.push(r[f]),f++;break;case 2:h||(h=se(p,[],0)),h.addedCount++,p++;break;case 3:h||(h=se(p,[],0)),h.removed.push(r[f]),f++}return h&&d.push(h),d},sharedPrefix:function(e,t,n){for(var r=0;r<n;++r)if(!this.equals(e[r],t[r]))return r;return n},sharedSuffix:function(e,t,n){for(var r=e.length,i=t.length,o=0;o<n&&this.equals(e[--r],t[--i]);)o++;return o},calculateSplices:function(e,t){return this.calcSplices(e,0,e.length,t,0,t.length)},equals:function(e,t){return e===t}};var ue=new ae;function ce(e,t,n,r,i,o){return ue.calcSplices(e,t,n,r,i,o)}function le(e,t,n,r){return t<n||r<e?-1:t===n||r===e?0:e<n?t<r?t-n:r-n:r<t?r-e:t-e}function he(e,t,n,r){for(var i=se(t,n,r),o=!1,s=0,a=0;a<e.length;a++){var u=e[a];if(u.index+=s,!o){var c=le(i.index,i.index+i.removed.length,u.index,u.index+u.addedCount);if(c>=0){e.splice(a,1),a--,s-=u.addedCount-u.removed.length,i.addedCount+=u.addedCount-c;var l=i.removed.length+u.removed.length-c;if(i.addedCount||l){var h=u.removed;if(i.index<u.index){var d=i.removed.slice(0,u.index-i.index);Array.prototype.push.apply(d,h),h=d}if(i.index+i.removed.length>u.index+u.addedCount){var p=i.removed.slice(u.index+u.addedCount-i.index);Array.prototype.push.apply(h,p)}i.removed=h,u.index<i.index&&(i.index=u.index)}else o=!0}else if(i.index<u.index){o=!0,e.splice(a,0,i),a++;var f=i.addedCount-i.removed.length;u.index+=f,s+=f}}}o||e.push(i)}function de(e,t){var n=[];return function(e,t){for(var n=[],r=0;r<t.length;r++){var i=t[r];switch(i.type){case"splice":he(n,i.index,i.removed.slice(),i.addedCount);break;case"add":case"update":case"delete":if(!ie(i.name))continue;var o=oe(i.name);if(o<0)continue;he(n,o,[i.oldValue],"delete"===i.type?0:1);break;default:console.error("Unexpected record type: "+JSON.stringify(i))}}return n}(0,t).forEach(function(t){1!==t.addedCount||1!==t.removed.length?n=n.concat(ce(e,t.index,t.index+t.addedCount,t.removed,0,t.removed.length)):t.removed[0]!==e[t.index]&&n.push(t)}),n}function pe(e,t,n,r){return{type:e,object:t,key:n,oldValue:r}}function fe(e){for(var t=new Array(e.size),n=e.keys(),r=0,i=void 0;(i=n.next())&&!i.done;)t[r]=pe("added",e,i.value),r++;return t}var ve=ne()(i=function(){function e(e,t){this.taskQueue=e,this.queued=!1,this.changeRecords=null,this.oldCollection=null,this.collection=t,this.lengthPropertyName=t instanceof Map||t instanceof Set?"size":"length"}return e.prototype.subscribe=function(e,t){this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)},e.prototype.addChangeRecord=function(e){if(this.hasSubscribers()||this.lengthObserver){if("splice"===e.type){var t=e.index,n=e.object.length;t>n?t=n-e.addedCount:t<0&&(t=n+e.removed.length+t-e.addedCount),t<0&&(t=0),e.index=t}null===this.changeRecords?this.changeRecords=[e]:this.changeRecords.push(e),this.queued||(this.queued=!0,this.taskQueue.queueMicroTask(this))}},e.prototype.flushChangeRecords=function(){(this.changeRecords&&this.changeRecords.length||this.oldCollection)&&this.call()},e.prototype.reset=function(e){this.oldCollection=e,this.hasSubscribers()&&!this.queued&&(this.queued=!0,this.taskQueue.queueMicroTask(this))},e.prototype.getLengthObserver=function(){return this.lengthObserver||(this.lengthObserver=new ge(this.collection))},e.prototype.call=function(){var e=this.changeRecords,t=this.oldCollection,n=void 0;this.queued=!1,this.changeRecords=[],this.oldCollection=null,this.hasSubscribers()&&(n=t?this.collection instanceof Map||this.collection instanceof Set?fe(t):ce(this.collection,0,this.collection.length,t,0,t.length):this.collection instanceof Map||this.collection instanceof Set?e:de(this.collection,e),this.callSubscribers(n)),this.lengthObserver&&this.lengthObserver.call(this.collection[this.lengthPropertyName])},e}())||i,ge=ne()(o=function(){function e(e){this.collection=e,this.lengthPropertyName=e instanceof Map||e instanceof Set?"size":"length",this.currentValue=e[this.lengthPropertyName]}return e.prototype.getValue=function(){return this.collection[this.lengthPropertyName]},e.prototype.setValue=function(e){this.collection[this.lengthPropertyName]=e},e.prototype.subscribe=function(e,t){this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)},e.prototype.call=function(e){var t=this.currentValue;this.callSubscribers(e,t),this.currentValue=e},e}())||o,me=Array.prototype.pop,ye=Array.prototype.push,be=Array.prototype.reverse,we=Array.prototype.shift,xe=Array.prototype.sort,ke=Array.prototype.splice,Ce=Array.prototype.unshift;function _e(e,t){return Se.for(e,t)}Array.prototype.pop=function(){var e=this.length>0,t=me.apply(this,arguments);return e&&void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"delete",object:this,name:this.length,oldValue:t}),t},Array.prototype.push=function(){var e=ye.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"splice",object:this,index:this.length-arguments.length,removed:[],addedCount:arguments.length}),e},Array.prototype.reverse=function(){var e=void 0;void 0!==this.__array_observer__&&(this.__array_observer__.flushChangeRecords(),e=this.slice());var t=be.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.reset(e),t},Array.prototype.shift=function(){var e=this.length>0,t=we.apply(this,arguments);return e&&void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"delete",object:this,name:0,oldValue:t}),t},Array.prototype.sort=function(){var e=void 0;void 0!==this.__array_observer__&&(this.__array_observer__.flushChangeRecords(),e=this.slice());var t=xe.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.reset(e),t},Array.prototype.splice=function(){var e=ke.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"splice",object:this,index:+arguments[0],removed:e,addedCount:arguments.length>2?arguments.length-2:0}),e},Array.prototype.unshift=function(){var e=Ce.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"splice",object:this,index:0,removed:[],addedCount:arguments.length}),e};var Se=function(e){function t(t,n){return k(this,e.call(this,t,n))}return C(t,e),t.for=function(e,n){return"__array_observer__"in n||Reflect.defineProperty(n,"__array_observer__",{value:t.create(e,n),enumerable:!1,configurable:!1}),n.__array_observer__},t.create=function(e,n){return new t(e,n)},t}(ve),Oe=function(){function e(){this.isAssignable=!1}return e.prototype.evaluate=function(e,t,n){throw new Error('Binding expression "'+this+'" cannot be evaluated.')},e.prototype.assign=function(e,t,n){throw new Error('Binding expression "'+this+'" cannot be assigned to.')},e.prototype.toString=function(){return"undefined"==typeof FEATURE_NO_UNPARSER?$e.unparse(this):Function.prototype.toString.call(this)},e}(),Ee=function(e){function t(t,n,r){var i=k(this,e.call(this));return i.expression=t,i.name=n,i.args=r,i}return C(t,e),t.prototype.evaluate=function(e,t){return this.expression.evaluate(e,t)},t.prototype.assign=function(e,t,n){return this.expression.assign(e,t,n)},t.prototype.accept=function(e){return e.visitBindingBehavior(this)},t.prototype.connect=function(e,t){this.expression.connect(e,t)},t.prototype.bind=function(e,t,n){this.expression.expression&&this.expression.bind&&this.expression.bind(e,t,n);var r=n.bindingBehaviors(this.name);if(!r)throw new Error('No BindingBehavior named "'+this.name+'" was found!');var i="behavior-"+this.name;if(e[i])throw new Error('A binding behavior named "'+this.name+'" has already been applied to "'+this.expression+'"');e[i]=r,r.bind.apply(r,[e,t].concat(We(t,this.args,e.lookupFunctions)))},t.prototype.unbind=function(e,t){var n="behavior-"+this.name;e[n].unbind(e,t),e[n]=null,this.expression.expression&&this.expression.unbind&&this.expression.unbind(e,t)},t}(Oe),Ae=function(e){function t(t,n,r){var i=k(this,e.call(this));return i.expression=t,i.name=n,i.args=r,i.allArgs=[t].concat(r),i}return C(t,e),t.prototype.evaluate=function(e,t){var n=t.valueConverters(this.name);if(!n)throw new Error('No ValueConverter named "'+this.name+'" was found!');return"toView"in n?n.toView.apply(n,We(e,this.allArgs,t)):this.allArgs[0].evaluate(e,t)},t.prototype.assign=function(e,t,n){var r=n.valueConverters(this.name);if(!r)throw new Error('No ValueConverter named "'+this.name+'" was found!');return"fromView"in r&&(t=r.fromView.apply(r,[t].concat(We(e,this.args,n)))),this.allArgs[0].assign(e,t,n)},t.prototype.accept=function(e){return e.visitValueConverter(this)},t.prototype.connect=function(e,t){for(var n=this.allArgs,r=n.length;r--;)n[r].connect(e,t);var i=e.lookupFunctions.valueConverters(this.name);if(!i)throw new Error('No ValueConverter named "'+this.name+'" was found!');var o=i.signals;if(void 0!==o)for(r=o.length;r--;)Nr(e,o[r])},t}(Oe),Pe=function(e){function t(t,n){var r=k(this,e.call(this));return r.target=t,r.value=n,r.isAssignable=!0,r}return C(t,e),t.prototype.evaluate=function(e,t){return this.target.assign(e,this.value.evaluate(e,t))},t.prototype.accept=function(e){e.visitAssign(this)},t.prototype.connect=function(e,t){},t.prototype.assign=function(e,t){this.value.assign(e,t),this.target.assign(e,t)},t}(Oe),Te=function(e){function t(t,n,r){var i=k(this,e.call(this));return i.condition=t,i.yes=n,i.no=r,i}return C(t,e),t.prototype.evaluate=function(e,t){return this.condition.evaluate(e,t)?this.yes.evaluate(e,t):this.no.evaluate(e,t)},t.prototype.accept=function(e){return e.visitConditional(this)},t.prototype.connect=function(e,t){this.condition.connect(e,t),this.condition.evaluate(t)?this.yes.connect(e,t):this.no.connect(e,t)},t}(Oe),je=function(e){function t(t){var n=k(this,e.call(this));return n.ancestor=t,n}return C(t,e),t.prototype.evaluate=function(e,t){for(var n=e.overrideContext,r=this.ancestor;r--&&n;)n=n.parentOverrideContext;return r<1&&n?n.bindingContext:void 0},t.prototype.accept=function(e){return e.visitAccessThis(this)},t.prototype.connect=function(e,t){},t}(Oe),Re=function(e){function t(t,n){var r=k(this,e.call(this));return r.name=t,r.ancestor=n,r.isAssignable=!0,r}return C(t,e),t.prototype.evaluate=function(e,t){return P(this.name,e,this.ancestor)[this.name]},t.prototype.assign=function(e,t){var n=P(this.name,e,this.ancestor);return n?n[this.name]=t:void 0},t.prototype.accept=function(e){return e.visitAccessScope(this)},t.prototype.connect=function(e,t){var n=P(this.name,t,this.ancestor);e.observeProperty(n,this.name)},t}(Oe),Ne=function(e){function t(t,n){var r=k(this,e.call(this));return r.object=t,r.name=n,r.isAssignable=!0,r}return C(t,e),t.prototype.evaluate=function(e,t){var n=this.object.evaluate(e,t);return null===n||void 0===n?n:n[this.name]},t.prototype.assign=function(e,t){var n=this.object.evaluate(e);return null!==n&&void 0!==n||(n={},this.object.assign(e,n)),n[this.name]=t,t},t.prototype.accept=function(e){return e.visitAccessMember(this)},t.prototype.connect=function(e,t){this.object.connect(e,t);var n=this.object.evaluate(t);n&&e.observeProperty(n,this.name)},t}(Oe),Me=function(e){function t(t,n){var r=k(this,e.call(this));return r.object=t,r.key=n,r.isAssignable=!0,r}return C(t,e),t.prototype.evaluate=function(e,t){return function(e,t){if(Array.isArray(e))return e[parseInt(t,10)];if(e)return e[t];if(null===e||void 0===e)return;return e[t]}(this.object.evaluate(e,t),this.key.evaluate(e,t))},t.prototype.assign=function(e,t){return function(e,t,n){if(Array.isArray(e)){var r=parseInt(t,10);e.length<=r&&(e.length=r+1),e[r]=n}else e[t]=n;return n}(this.object.evaluate(e),this.key.evaluate(e),t)},t.prototype.accept=function(e){return e.visitAccessKeyed(this)},t.prototype.connect=function(e,t){this.object.connect(e,t);var n=this.object.evaluate(t);if(n instanceof Object){this.key.connect(e,t);var r=this.key.evaluate(t);null===r||void 0===r||Array.isArray(n)&&"number"==typeof r||e.observeProperty(n,r)}},t}(Oe),Ie=function(e){function t(t,n,r){var i=k(this,e.call(this));return i.name=t,i.args=n,i.ancestor=r,i}return C(t,e),t.prototype.evaluate=function(e,t,n){var r=We(e,this.args,t),i=P(this.name,e,this.ancestor),o=Qe(i,this.name,n);if(o)return o.apply(i,r)},t.prototype.accept=function(e){return e.visitCallScope(this)},t.prototype.connect=function(e,t){for(var n=this.args,r=n.length;r--;)n[r].connect(e,t)},t}(Oe),Ve=function(e){function t(t,n,r){var i=k(this,e.call(this));return i.object=t,i.name=n,i.args=r,i}return C(t,e),t.prototype.evaluate=function(e,t,n){var r=this.object.evaluate(e,t),i=We(e,this.args,t),o=Qe(r,this.name,n);if(o)return o.apply(r,i)},t.prototype.accept=function(e){return e.visitCallMember(this)},t.prototype.connect=function(e,t){if(this.object.connect(e,t),Qe(this.object.evaluate(t),this.name,!1))for(var n=this.args,r=n.length;r--;)n[r].connect(e,t)},t}(Oe),Le=function(e){function t(t,n){var r=k(this,e.call(this));return r.func=t,r.args=n,r}return C(t,e),t.prototype.evaluate=function(e,t,n){var r=this.func.evaluate(e,t);if("function"==typeof r)return r.apply(null,We(e,this.args,t));if(n||null!==r&&void 0!==r)throw new Error(this.func+" is not a function")},t.prototype.accept=function(e){return e.visitCallFunction(this)},t.prototype.connect=function(e,t){if(this.func.connect(e,t),"function"==typeof this.func.evaluate(t))for(var n=this.args,r=n.length;r--;)n[r].connect(e,t)},t}(Oe),Fe=function(e){function t(t,n,r){var i=k(this,e.call(this));return i.operation=t,i.left=n,i.right=r,i}return C(t,e),t.prototype.evaluate=function(e,t){var n=this.left.evaluate(e,t);switch(this.operation){case"&&":return n&&this.right.evaluate(e,t);case"||":return n||this.right.evaluate(e,t)}var r=this.right.evaluate(e,t);switch(this.operation){case"==":return n==r;case"===":return n===r;case"!=":return n!=r;case"!==":return n!==r;case"instanceof":return"function"==typeof r&&n instanceof r;case"in":return"object"===(void 0===r?"undefined":x(r))&&null!==r&&n in r}if(null===n||null===r||void 0===n||void 0===r){switch(this.operation){case"+":return null!==n&&void 0!==n?n:null!==r&&void 0!==r?r:0;case"-":return null!==n&&void 0!==n?n:null!==r&&void 0!==r?0-r:0}return null}switch(this.operation){case"+":return function(e,t){if(null!==e&&null!==t)return"string"==typeof e&&"string"!=typeof t?e+t.toString():"string"!=typeof e&&"string"==typeof t?e.toString()+t:e+t;if(null!==e)return e;if(null!==t)return t;return 0}(n,r);case"-":return n-r;case"*":return n*r;case"/":return n/r;case"%":return n%r;case"<":return n<r;case">":return n>r;case"<=":return n<=r;case">=":return n>=r;case"^":return n^r}throw new Error("Internal error ["+this.operation+"] not handled")},t.prototype.accept=function(e){return e.visitBinary(this)},t.prototype.connect=function(e,t){this.left.connect(e,t);var n=this.left.evaluate(t);"&&"===this.operation&&!n||"||"===this.operation&&n||this.right.connect(e,t)},t}(Oe),Be=function(e){function t(t,n){var r=k(this,e.call(this));return r.operation=t,r.expression=n,r}return C(t,e),t.prototype.evaluate=function(e,t){switch(this.operation){case"!":return!this.expression.evaluate(e,t);case"typeof":return x(this.expression.evaluate(e,t));case"void":return void this.expression.evaluate(e,t)}throw new Error("Internal error ["+this.operation+"] not handled")},t.prototype.accept=function(e){return e.visitPrefix(this)},t.prototype.connect=function(e,t){this.expression.connect(e,t)},t}(Oe),qe=function(e){function t(t){var n=k(this,e.call(this));return n.value=t,n}return C(t,e),t.prototype.evaluate=function(e,t){return this.value},t.prototype.accept=function(e){return e.visitLiteralPrimitive(this)},t.prototype.connect=function(e,t){},t}(Oe),De=function(e){function t(t){var n=k(this,e.call(this));return n.value=t,n}return C(t,e),t.prototype.evaluate=function(e,t){return this.value},t.prototype.accept=function(e){return e.visitLiteralString(this)},t.prototype.connect=function(e,t){},t}(Oe),ze=function(e){function t(t,n,r,i){var o=k(this,e.call(this));if(o.cooked=t,o.expressions=n||[],o.length=o.expressions.length,o.tagged=void 0!==i,o.tagged)if(o.cooked.raw=r,o.tag=i,i instanceof Re)o.contextType="Scope";else{if(!(i instanceof Ne||i instanceof Me))throw new Error(o.tag+" is not a valid template tag");o.contextType="Object"}return o}return C(t,e),t.prototype.getScopeContext=function(e,t){return P(this.tag.name,e,this.tag.ancestor)},t.prototype.getObjectContext=function(e,t){return this.tag.object.evaluate(e,t)},t.prototype.evaluate=function(e,t,n){for(var r=new Array(this.length),i=0;i<this.length;i++)r[i]=this.expressions[i].evaluate(e,t);if(this.tagged){var o=this.tag.evaluate(e,t);if("function"==typeof o){var s=this["get"+this.contextType+"Context"](e,t);return o.call.apply(o,[s,this.cooked].concat(r))}if(!n)return null;throw new Error(this.tag+" is not a function")}for(var a=this.cooked[0],u=0;u<this.length;u++)a=String.prototype.concat(a,r[u],this.cooked[u+1]);return a},t.prototype.accept=function(e){return e.visitLiteralTemplate(this)},t.prototype.connect=function(e,t){for(var n=0;n<this.length;n++)this.expressions[n].connect(e,t);this.tagged&&this.tag.connect(e,t)},t}(Oe),He=function(e){function t(t){var n=k(this,e.call(this));return n.elements=t,n}return C(t,e),t.prototype.evaluate=function(e,t){for(var n=this.elements,r=[],i=0,o=n.length;i<o;++i)r[i]=n[i].evaluate(e,t);return r},t.prototype.accept=function(e){return e.visitLiteralArray(this)},t.prototype.connect=function(e,t){for(var n=this.elements.length,r=0;r<n;r++)this.elements[r].connect(e,t)},t}(Oe),Ue=function(e){function t(t,n){var r=k(this,e.call(this));return r.keys=t,r.values=n,r}return C(t,e),t.prototype.evaluate=function(e,t){for(var n={},r=this.keys,i=this.values,o=0,s=r.length;o<s;++o)n[r[o]]=i[o].evaluate(e,t);return n},t.prototype.accept=function(e){return e.visitLiteralObject(this)},t.prototype.connect=function(e,t){for(var n=this.keys.length,r=0;r<n;r++)this.values[r].connect(e,t)},t}(Oe);function We(e,t,n){for(var r=t.length,i=[],o=0;o<r;o++)i[o]=t[o].evaluate(e,n);return i}function Qe(e,t,n){var r=null===e||void 0===e?null:e[t];if("function"==typeof r)return r;if(!n&&(null===r||void 0===r))return null;throw new Error(t+" is not a function")}var $e=null;"undefined"==typeof FEATURE_NO_UNPARSER&&($e=function(){function e(e){this.buffer=e}return e.unparse=function(e){var t=[],n=new $e(t);return e.accept(n),t.join("")},e.prototype.write=function(e){this.buffer.push(e)},e.prototype.writeArgs=function(e){this.write("(");for(var t=0,n=e.length;t<n;++t)0!==t&&this.write(","),e[t].accept(this);this.write(")")},e.prototype.visitBindingBehavior=function(e){var t=e.args;e.expression.accept(this),this.write("&"+e.name);for(var n=0,r=t.length;n<r;++n)this.write(":"),t[n].accept(this)},e.prototype.visitValueConverter=function(e){var t=e.args;e.expression.accept(this),this.write("|"+e.name);for(var n=0,r=t.length;n<r;++n)this.write(":"),t[n].accept(this)},e.prototype.visitAssign=function(e){e.target.accept(this),this.write("="),e.value.accept(this)},e.prototype.visitConditional=function(e){e.condition.accept(this),this.write("?"),e.yes.accept(this),this.write(":"),e.no.accept(this)},e.prototype.visitAccessThis=function(e){if(0!==e.ancestor){this.write("$parent");for(var t=e.ancestor-1;t--;)this.write(".$parent")}else this.write("$this")},e.prototype.visitAccessScope=function(e){for(var t=e.ancestor;t--;)this.write("$parent.");this.write(e.name)},e.prototype.visitAccessMember=function(e){e.object.accept(this),this.write("."+e.name)},e.prototype.visitAccessKeyed=function(e){e.object.accept(this),this.write("["),e.key.accept(this),this.write("]")},e.prototype.visitCallScope=function(e){for(var t=e.ancestor;t--;)this.write("$parent.");this.write(e.name),this.writeArgs(e.args)},e.prototype.visitCallFunction=function(e){e.func.accept(this),this.writeArgs(e.args)},e.prototype.visitCallMember=function(e){e.object.accept(this),this.write("."+e.name),this.writeArgs(e.args)},e.prototype.visitPrefix=function(e){this.write("("+e.operation),e.operation.charCodeAt(0)>=97&&this.write(" "),e.expression.accept(this),this.write(")")},e.prototype.visitBinary=function(e){e.left.accept(this),105===e.operation.charCodeAt(0)?this.write(" "+e.operation+" "):this.write(e.operation),e.right.accept(this)},e.prototype.visitLiteralPrimitive=function(e){this.write(""+e.value)},e.prototype.visitLiteralArray=function(e){var t=e.elements;this.write("[");for(var n=0,r=t.length;n<r;++n)0!==n&&this.write(","),t[n].accept(this);this.write("]")},e.prototype.visitLiteralObject=function(e){var t=e.keys,n=e.values;this.write("{");for(var r=0,i=t.length;r<i;++r)0!==r&&this.write(","),this.write("'"+t[r]+"':"),n[r].accept(this);this.write("}")},e.prototype.visitLiteralString=function(e){var t=e.value.replace(/'/g,"'");this.write("'"+t+"'")},e.prototype.visitLiteralTemplate=function(e){var t=e.cooked,n=e.expressions,r=n.length;this.write("`"),this.write(t[0]);for(var i=0;i<r;i++)n[i].accept(this),this.write(t[i+1]);this.write("`")},e}());var Ge=function(){function e(){}return e.prototype.cloneExpressionArray=function(e){for(var t=[],n=e.length;n--;)t[n]=e[n].accept(this);return t},e.prototype.visitBindingBehavior=function(e){return new Ee(e.expression.accept(this),e.name,this.cloneExpressionArray(e.args))},e.prototype.visitValueConverter=function(e){return new Ae(e.expression.accept(this),e.name,this.cloneExpressionArray(e.args))},e.prototype.visitAssign=function(e){return new Pe(e.target.accept(this),e.value.accept(this))},e.prototype.visitConditional=function(e){return new Te(e.condition.accept(this),e.yes.accept(this),e.no.accept(this))},e.prototype.visitAccessThis=function(e){return new je(e.ancestor)},e.prototype.visitAccessScope=function(e){return new Re(e.name,e.ancestor)},e.prototype.visitAccessMember=function(e){return new Ne(e.object.accept(this),e.name)},e.prototype.visitAccessKeyed=function(e){return new Me(e.object.accept(this),e.key.accept(this))},e.prototype.visitCallScope=function(e){return new Ie(e.name,this.cloneExpressionArray(e.args),e.ancestor)},e.prototype.visitCallFunction=function(e){return new Le(e.func.accept(this),this.cloneExpressionArray(e.args))},e.prototype.visitCallMember=function(e){return new Ve(e.object.accept(this),e.name,this.cloneExpressionArray(e.args))},e.prototype.visitUnary=function(e){return new Be(prefix.operation,prefix.expression.accept(this))},e.prototype.visitBinary=function(e){return new Fe(e.operation,e.left.accept(this),e.right.accept(this))},e.prototype.visitLiteralPrimitive=function(e){return new qe(e)},e.prototype.visitLiteralArray=function(e){return new He(this.cloneExpressionArray(e.elements))},e.prototype.visitLiteralObject=function(e){return new Ue(e.keys,this.cloneExpressionArray(e.values))},e.prototype.visitLiteralString=function(e){return new De(e.value)},e.prototype.visitLiteralTemplate=function(e){return new ze(e.cooked,this.cloneExpressionArray(e.expressions),e.raw,e.tag&&e.tag.accept(this))},e}();function Ke(e){var t=new Ge;return e.accept(t)}var Xe={oneTime:0,toView:1,oneWay:1,twoWay:2,fromView:3},Ye=function(){function e(){this.cache=Object.create(null)}return e.prototype.parse=function(e){return e=e||"",this.cache[e]||(this.cache[e]=new Ze(e).parseBindingBehavior())},e}(),Je=String.fromCharCode,Ze=function(){function e(e){this.idx=0,this.start=0,this.src=e,this.len=e.length,this.tkn=dt,this.val=void 0,this.ch=e.charCodeAt(0)}return w(e,[{key:"raw",get:function(){return this.src.slice(this.start,this.idx)}}]),e.prototype.parseBindingBehavior=function(){this.nextToken(),this.tkn&lt&&this.err("Invalid start of expression");for(var e=this.parseValueConverter();this.opt(Ft);)e=new Ee(e,this.val,this.parseVariadicArgs());return this.tkn!==dt&&this.err("Unconsumed token "+this.raw),e},e.prototype.parseValueConverter=function(){for(var e=this.parseExpression();this.opt(Bt);)e=new Ae(e,this.val,this.parseVariadicArgs());return e},e.prototype.parseVariadicArgs=function(){this.nextToken();for(var e=[];this.opt(Vt);)e.push(this.parseExpression());return e},e.prototype.parseExpression=function(){for(var e=this.idx,t=this.parseConditional();this.tkn===an;)t.isAssignable||this.err("Expression "+this.src.slice(e,this.start)+" is not assignable"),this.nextToken(),e=this.idx,t=new Pe(t,this.parseConditional());return t},e.prototype.parseConditional=function(){var e=this.parseBinary(0);if(this.opt(Lt)){var t=this.parseExpression();this.expect(Vt),e=new Te(e,t,this.parseExpression())}return e},e.prototype.parseBinary=function(e){for(var t=this.parseLeftHandSide(0);this.tkn&yt;){var n=this.tkn;if((n&ct)<=e)break;this.nextToken(),t=new Fe(ln[n&ut],t,this.parseBinary(n&ct))}return t},e.prototype.parseLeftHandSide=function(e){var t=void 0;e:switch(this.tkn){case Zt:return this.nextToken(),this.parseLeftHandSide(0);case en:return this.nextToken(),new Fe("-",new qe(0),this.parseLeftHandSide(0));case un:case tn:case nn:var n=ln[this.tkn&ut];return this.nextToken(),new Be(n,this.parseLeftHandSide(0));case Et:do{if(this.nextToken(),e++,this.opt(Tt))this.tkn===Tt&&this.err();else{if(this.tkn&ht){t=new je(e&at),e=e&ot|tt;break e}this.err()}}while(this.tkn===Et);case pt:t=new Re(this.val,e&at),this.nextToken(),e=e&ot|nt;break;case Ot:this.nextToken(),t=new je(0),e=e&ot|tt;break;case At:this.nextToken(),t=this.parseExpression(),this.expect(Rt);break;case Mt:this.nextToken();var r=[];if(this.tkn!==It)do{r.push(this.parseExpression())}while(this.opt(Nt));this.expect(It),t=new He(r);break;case Pt:var i=[],o=[];for(this.nextToken();this.tkn!==jt;){if(this.tkn&ft){var s=this.ch,a=this.tkn,u=this.idx;i.push(this.val),this.nextToken(),this.opt(Vt)?o.push(this.parseExpression()):(this.ch=s,this.tkn=a,this.idx=u,o.push(this.parseLeftHandSide(ot)))}else this.tkn&vt?(i.push(this.val),this.nextToken(),this.expect(Vt),o.push(this.parseExpression())):this.err();this.tkn!==jt&&this.expect(Nt)}this.expect(jt),t=new Ue(i,o);break;case mt:t=new De(this.val),this.nextToken();break;case wt:t=new ze([this.val]),this.nextToken();break;case xt:t=this.parseTemplate(0);break;case gt:t=new qe(this.val),this.nextToken();break;case _t:case St:case Ct:case kt:t=new qe(ln[this.tkn&ut]),this.nextToken();break;default:this.idx>=this.len?this.err("Unexpected end of expression"):this.err()}if(e&ot)return t;for(var c=this.val;this.tkn&bt;)switch(this.tkn){case Tt:if(this.nextToken(),this.tkn&ft||this.err(),c=this.val,this.nextToken(),e=(e&(tt|nt))<<1|e&rt|(e&it)>>1,this.tkn===At)continue;t=e&nt?new Re(c,t.ancestor):new Ne(t,c);continue;case Mt:this.nextToken(),e=it,t=new Me(t,this.parseExpression()),this.expect(It);break;case At:this.nextToken();for(var l=[];this.tkn!==Rt&&(l.push(this.parseExpression()),this.opt(Nt)););this.expect(Rt),t=e&nt?new Ie(c,l,t.ancestor):e&rt?new Ve(t,c,l):new Le(t,l),e=0;break;case wt:t=new ze([this.val],[],[this.raw],t),this.nextToken();break;case xt:t=this.parseTemplate(e|st,t)}return t},e.prototype.parseTemplate=function(e,t){var n=[this.val],r=e&st?[this.raw]:void 0;this.expect(xt);for(var i=[this.parseExpression()];(this.tkn=this.scanTemplateTail())!==wt;)n.push(this.val),e&st&&r.push(this.raw),this.expect(xt),i.push(this.parseExpression());return n.push(this.val),e&st&&r.push(this.raw),this.nextToken(),new ze(n,i,r,t)},e.prototype.nextToken=function(){for(;this.idx<this.len;)if(this.ch<=32)this.next();else{if(this.start=this.idx,36===this.ch||this.ch>=97&&this.ch<=122)return void(this.tkn=this.scanIdentifier());if(null!==(this.tkn=wn[this.ch](this)))return}this.tkn=dt},e.prototype.next=function(){return this.ch=this.src.charCodeAt(++this.idx)},e.prototype.scanIdentifier=function(){for(;yn.has(this.next())||this.ch>127&&bn[this.ch];);return cn[this.val=this.raw]||pt},e.prototype.scanNumber=function(e){if(e)this.val=0;else for(this.val=this.ch-48;this.next()<=57&&this.ch>=48;)this.val=10*this.val+this.ch-48;if(e||46===this.ch){e||this.next();for(var t=this.idx,n=this.ch-48;this.next()<=57&&this.ch>=48;)n=10*n+this.ch-48;this.val=this.val+n/Math.pow(10,this.idx-t)}if(101===this.ch||69===this.ch){var r=this.idx;for(this.next(),45!==this.ch&&43!==this.ch||this.next(),this.ch>=48&&this.ch<=57||(this.idx=r,this.err("Invalid exponent"));this.next()<=57&&this.ch>=48;);this.val=parseFloat(this.src.slice(this.start,this.idx))}return gt},e.prototype.scanString=function(){var e=this.ch;this.next();for(var t=void 0,n=this.idx;this.ch!==e;)if(92===this.ch){t||(t=[]),t.push(this.src.slice(n,this.idx)),this.next();var r=void 0;if(117===this.ch)if(this.next(),this.idx+4<this.len){var i=this.src.slice(this.idx,this.idx+4);/[A-Z0-9]{4}/i.test(i)||this.err("Invalid unicode escape [\\u"+i+"]"),r=parseInt(i,16),this.idx+=4,this.ch=this.src.charCodeAt(this.idx)}else this.err();else r=et(this.ch),this.next();t.push(Je(r)),n=this.idx}else 0===this.ch?this.err("Unterminated quote"):this.next();var o=this.src.slice(n,this.idx);this.next();var s=o;return null!==t&&void 0!==t&&(t.push(o),s=t.join("")),this.val=s,mt},e.prototype.scanTemplate=function(){for(var e=!0,t="";96!==this.next();)if(36===this.ch){if(this.idx+1<this.len&&123===this.src.charCodeAt(this.idx+1)){this.idx++,e=!1;break}t+="$"}else 92===this.ch?t+=Je(et(this.next())):t+=Je(this.ch);return this.next(),this.val=t,e?wt:xt},e.prototype.scanTemplateTail=function(){return this.idx>=this.len&&this.err("Unterminated template"),this.idx--,this.scanTemplate()},e.prototype.err=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Unexpected token "+this.raw,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.start;throw new Error("Parser Error: "+e+" at column "+t+" in expression ["+this.src+"]")},e.prototype.opt=function(e){return this.tkn===e&&(this.nextToken(),!0)},e.prototype.expect=function(e){this.tkn===e?this.nextToken():this.err("Missing expected token "+ln[e&ut],this.idx)},e}();function et(e){switch(e){case 102:return 12;case 110:return 10;case 114:return 13;case 116:return 9;case 118:return 11;default:return e}}var tt=1024,nt=2048,rt=4096,it=8192,ot=16384,st=32768,at=511,ut=63,ct=448,lt=2048,ht=16384,dt=65536|ht|lt,pt=1<<17,ft=32768|pt,vt=1<<18,gt=1<<19|vt,mt=1<<20|vt,yt=1<<21,bt=1<<24,wt=1<<25|bt,xt=1<<26|bt,kt=32768|vt,Ct=32769|vt,_t=32770|vt,St=32771|vt,Ot=4|ft,Et=5|ft,At=8198|ht|bt,Pt=8199,Tt=8388616|bt,jt=4105|ht|lt,Rt=4106|ht|lt,Nt=11|ht,Mt=8204|ht|1<<23|bt,It=4109|lt,Vt=14|ht,Lt=15,Ft=18|ht,Bt=19|ht,qt=84|yt,Dt=149|yt,zt=214|yt,Ht=279|yt,Ut=280|yt,Wt=281|yt,Qt=282|yt,$t=347|yt,Gt=348|yt,Kt=349|yt,Xt=350|yt,Yt=33119|yt,Jt=33120|yt,Zt=417|yt|1<<22,en=418|yt|1<<22,tn=4227107,nn=4227108,rn=485|yt,on=486|yt,sn=487|yt,an=40,un=4194345,cn=Object.create(null);cn.true=Ct,cn.null=_t,cn.false=kt,cn.undefined=St,cn.$this=Ot,cn.$parent=Et,cn.in=Yt,cn.instanceof=Jt,cn.typeof=tn,cn.void=nn;var ln=[!1,!0,null,void 0,"$this","$parent","(","{",".","}",")",",","[","]",":","?","'",'"',"&","|","||","&&","^","==","!=","===","!==","<",">","<=",">=","in","instanceof","+","-","typeof","void","*","%","/","=","!"],hn=[36,0,48,58,65,91,95,0,97,123],dn=[36,0,65,91,95,0,97,123,170,0,186,0,192,215,216,247,248,697,736,741,7424,7462,7468,7517,7522,7526,7531,7544,7545,7615,7680,7936,8305,0,8319,0,8336,8349,8490,8492,8498,0,8526,0,8544,8585,11360,11392,42786,42888,42891,42927,42928,42936,42999,43008,43824,43867,43868,43877,64256,64263,65313,65339,65345,65371],pn=[48,58],fn=[0,33,127,161];function vn(e,t,n,r){for(var i=n.length,o=0;o<i;o+=2){var s=n[o],a=n[o+1];if(a=a>0?a:s+1,e)for(var u=s;u<a;)e[u]=r,u++;if(t)for(var c=s;c<a;c++)t.add(c)}}function gn(e){return function(t){return t.next(),e}}function mn(e){return e.err("Unexpected character ["+Je(e.ch)+"]"),null}var yn=new Set;vn(null,yn,hn,!0);var bn=new Uint8Array(65535);vn(bn,null,dn,1),vn(bn,null,pn,1);for(var wn=new Array(65535),xn=0;xn<65535;)wn[xn]=mn,xn++;vn(wn,null,fn,function(e){return e.next(),null}),vn(wn,null,dn,function(e){return e.scanIdentifier()}),vn(wn,null,pn,function(e){return e.scanNumber(!1)}),wn[34]=wn[39]=function(e){return e.scanString()},wn[96]=function(e){return e.scanTemplate()},wn[33]=function(e){return 61!==e.next()?un:61!==e.next()?Ut:(e.next(),Qt)},wn[61]=function(e){return 61!==e.next()?an:61!==e.next()?Ht:(e.next(),Wt)},wn[38]=function(e){return 38!==e.next()?Ft:(e.next(),Dt)},wn[124]=function(e){return 124!==e.next()?Bt:(e.next(),qt)},wn[46]=function(e){return e.next()<=57&&e.ch>=48?e.scanNumber(!0):Tt},wn[60]=function(e){return 61!==e.next()?$t:(e.next(),Kt)},wn[62]=function(e){return 61!==e.next()?Gt:(e.next(),Xt)},wn[37]=gn(on),wn[40]=gn(At),wn[41]=gn(Rt),wn[42]=gn(rn),wn[43]=gn(Zt),wn[44]=gn(Nt),wn[45]=gn(en),wn[47]=gn(sn),wn[58]=gn(Vt),wn[63]=gn(Lt),wn[91]=gn(Mt),wn[93]=gn(It),wn[94]=gn(zt),wn[123]=gn(Pt),wn[125]=gn(jt);var kn=Map.prototype;function Cn(e,t){return _n.for(e,t)}var _n=function(e){function t(t,n){return k(this,e.call(this,t,n))}return C(t,e),t.for=function(e,n){return"__map_observer__"in n||Reflect.defineProperty(n,"__map_observer__",{value:t.create(e,n),enumerable:!1,configurable:!1}),n.__map_observer__},t.create=function(e,n){var r=new t(e,n),i=kn;return i.set===n.set&&i.delete===n.delete&&i.clear===n.clear||(i={set:n.set,delete:n.delete,clear:n.clear}),n.set=function(){var e=n.has(arguments[0]),t=e?"update":"add",o=n.get(arguments[0]),s=i.set.apply(n,arguments);return e&&o===n.get(arguments[0])||r.addChangeRecord({type:t,object:n,key:arguments[0],oldValue:o}),s},n.delete=function(){var e=n.has(arguments[0]),t=n.get(arguments[0]),o=i.delete.apply(n,arguments);return e&&r.addChangeRecord({type:"delete",object:n,key:arguments[0],oldValue:t}),o},n.clear=function(){var e=i.clear.apply(n,arguments);return r.addChangeRecord({type:"clear",object:n}),e},r},t}(ve);function Sn(e){return e.path&&e.path[0]||e.deepPath&&e.deepPath[0]||e.target}function On(){this.standardStopPropagation(),this.propagationStopped=!0}function En(e){e.propagationStopped=!1;for(var t=Sn(e),n=[];t;){if(t.capturedCallbacks){var r=t.capturedCallbacks[e.type];r&&(e.stopPropagation!==On&&(e.standardStopPropagation=e.stopPropagation,e.stopPropagation=On),n.push(r))}t=t.parentNode}for(var i=n.length-1;i>=0&&!e.propagationStopped;i--){var o=n[i];"handleEvent"in o?o.handleEvent(e):o(e)}}var An=function(){function e(e){this.eventName=e,this.count=0}return e.prototype.increment=function(){this.count++,1===this.count&&m.b.addEventListener(this.eventName,En,!0)},e.prototype.decrement=function(){this.count--,0===this.count&&m.b.removeEventListener(this.eventName,En,!0)},e}();function Pn(e){e.propagationStopped=!1;for(var t=Sn(e);t&&!e.propagationStopped;){if(t.delegatedCallbacks){var n=t.delegatedCallbacks[e.type];n&&(e.stopPropagation!==On&&(e.standardStopPropagation=e.stopPropagation,e.stopPropagation=On),"handleEvent"in n?n.handleEvent(e):n(e))}t=t.parentNode}}var Tn=function(){function e(e){this.eventName=e,this.count=0}return e.prototype.increment=function(){this.count++,1===this.count&&m.b.addEventListener(this.eventName,Pn,!1)},e.prototype.decrement=function(){this.count--,0===this.count&&m.b.removeEventListener(this.eventName,Pn,!1)},e}(),jn=function(){function e(e,t,n){this.entry=e,this.lookup=t,this.targetEvent=n}return e.prototype.dispose=function(){this.entry.decrement(),this.lookup[this.targetEvent]=null},e}(),Rn=function(){function e(e,t,n){this.target=e,this.targetEvent=t,this.callback=n}return e.prototype.dispose=function(){this.target.removeEventListener(this.targetEvent,this.callback)},e}(),Nn=function(){function e(){this.delegatedHandlers={},this.capturedHandlers={}}return e.prototype.subscribe=function(e,t,n,r,i){var o=void 0,s=void 0,a=void 0;if(r===Mn.bubbling){o=this.delegatedHandlers,a=o[t]||(o[t]=new Tn(t));var u=e.delegatedCallbacks||(e.delegatedCallbacks={});return a.increment(),u[t]=n,!0===i?new jn(a,u,t):function(){a.decrement(),u[t]=null}}if(r===Mn.capturing){s=this.capturedHandlers,a=s[t]||(s[t]=new An(t));var c=e.capturedCallbacks||(e.capturedCallbacks={});return a.increment(),c[t]=n,!0===i?new jn(a,c,t):function(){a.decrement(),c[t]=null}}return e.addEventListener(t,n),!0===i?new Rn(e,t,n):function(){e.removeEventListener(t,n)}},e}(),Mn={none:0,capturing:1,bubbling:2},In=function(){function e(){this.elementHandlerLookup={},this.eventStrategyLookup={},this.registerElementConfig({tagName:"input",properties:{value:["change","input"],checked:["change","input"],files:["change","input"]}}),this.registerElementConfig({tagName:"textarea",properties:{value:["change","input"]}}),this.registerElementConfig({tagName:"select",properties:{value:["change"]}}),this.registerElementConfig({tagName:"content editable",properties:{value:["change","input","blur","keyup","paste"]}}),this.registerElementConfig({tagName:"scrollable element",properties:{scrollTop:["scroll"],scrollLeft:["scroll"]}}),this.defaultEventStrategy=new Nn}return e.prototype.registerElementConfig=function(e){var t=e.tagName.toLowerCase(),n=e.properties,r=void 0,i=this.elementHandlerLookup[t]={};for(r in n)n.hasOwnProperty(r)&&(i[r]=n[r])},e.prototype.registerEventStrategy=function(e,t){this.eventStrategyLookup[e]=t},e.prototype.getElementHandler=function(e,t){var n=void 0,r=this.elementHandlerLookup;if(e.tagName){if(r[n=e.tagName.toLowerCase()]&&r[n][t])return new Vn(r[n][t]);if("textContent"===t||"innerHTML"===t)return new Vn(r["content editable"].value);if("scrollTop"===t||"scrollLeft"===t)return new Vn(r["scrollable element"][t])}return null},e.prototype.addEventListener=function(e,t,n,r,i){return(this.eventStrategyLookup[t]||this.defaultEventStrategy).subscribe(e,t,n,r,i)},e}(),Vn=function(){function e(e){this.events=e,this.element=null,this.handler=null}return e.prototype.subscribe=function(e,t){this.element=e,this.handler=t;for(var n=this.events,r=0,i=n.length;i>r;++r)e.addEventListener(n[r],t)},e.prototype.dispose=function(){if(null!==this.element){for(var e=this.element,t=this.handler,n=this.events,r=0,i=n.length;i>r;++r)e.removeEventListener(n[r],t);this.element=this.handler=null}},e}(),Ln=function(){function e(){this.tracked=[],this.checkDelay=120}return e.prototype.addProperty=function(e){var t=this.tracked;t.push(e),1===t.length&&this.scheduleDirtyCheck()},e.prototype.removeProperty=function(e){var t=this.tracked;t.splice(t.indexOf(e),1)},e.prototype.scheduleDirtyCheck=function(){var e=this;setTimeout(function(){return e.check()},this.checkDelay)},e.prototype.check=function(){for(var e=this.tracked,t=e.length;t--;){var n=e[t];n.isDirty()&&n.call()}e.length&&this.scheduleDirtyCheck()},e}(),Fn=ne()(s=function(){function e(e,t,n){this.dirtyChecker=e,this.obj=t,this.propertyName=n}return e.prototype.getValue=function(){return this.obj[this.propertyName]},e.prototype.setValue=function(e){this.obj[this.propertyName]=e},e.prototype.call=function(){var e=this.oldValue,t=this.getValue();this.callSubscribers(t,e),this.oldValue=t},e.prototype.isDirty=function(){return this.oldValue!==this.obj[this.propertyName]},e.prototype.subscribe=function(e,t){this.hasSubscribers()||(this.oldValue=this.getValue(),this.dirtyChecker.addProperty(this)),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&this.dirtyChecker.removeProperty(this)},e}())||s,Bn=g.getLogger("property-observation"),qn={getValue:function(e,t){return e[t]},setValue:function(e,t,n){t[n]=e}},Dn=function(){function e(e,t){this.doNotCache=!0,this.primitive=e,this.propertyName=t}return e.prototype.getValue=function(){return this.primitive[this.propertyName]},e.prototype.setValue=function(){var e=x(this.primitive);throw new Error("The "+this.propertyName+" property of a "+e+" ("+this.primitive+") cannot be assigned.")},e.prototype.subscribe=function(){},e.prototype.unsubscribe=function(){},e}(),zn=ne()(a=function(){function e(e,t,n){this.taskQueue=e,this.obj=t,this.propertyName=n,this.queued=!1,this.observing=!1}return e.prototype.getValue=function(){return this.obj[this.propertyName]},e.prototype.setValue=function(e){this.obj[this.propertyName]=e},e.prototype.getterValue=function(){return this.currentValue},e.prototype.setterValue=function(e){var t=this.currentValue;t!==e&&(this.queued||(this.oldValue=t,this.queued=!0,this.taskQueue.queueMicroTask(this)),this.currentValue=e)},e.prototype.call=function(){var e=this.oldValue,t=this.currentValue;this.queued=!1,this.callSubscribers(t,e)},e.prototype.subscribe=function(e,t){this.observing||this.convertProperty(),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)},e.prototype.convertProperty=function(){this.observing=!0,this.currentValue=this.obj[this.propertyName],this.setValue=this.setterValue,this.getValue=this.getterValue,Reflect.defineProperty(this.obj,this.propertyName,{configurable:!0,enumerable:!(this.propertyName in this.obj)||this.obj.propertyIsEnumerable(this.propertyName),get:this.getValue.bind(this),set:this.setValue.bind(this)})||Bn.warn("Cannot observe property '"+this.propertyName+"' of object",this.obj)},e}())||a,Hn=function(){function e(e,t,n){this.element=e,this.propertyName=t,this.attributeName=n}return e.prototype.getValue=function(){return this.element.getAttributeNS("http://www.w3.org/1999/xlink",this.attributeName)},e.prototype.setValue=function(e){return this.element.setAttributeNS("http://www.w3.org/1999/xlink",this.attributeName,e)},e.prototype.subscribe=function(){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "'+this.propertyName+'" property is not supported.')},e}(),Un={getValue:function(e,t){return e.getAttribute(t)},setValue:function(e,t,n){null===e||void 0===e?t.removeAttribute(n):t.setAttribute(n,e)}},Wn=function(){function e(e,t){this.element=e,this.propertyName=t}return e.prototype.getValue=function(){return this.element.getAttribute(this.propertyName)},e.prototype.setValue=function(e){return null===e||void 0===e?this.element.removeAttribute(this.propertyName):this.element.setAttribute(this.propertyName,e)},e.prototype.subscribe=function(){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "'+this.propertyName+'" property is not supported.')},e}(),Qn=function(){function e(e,t){this.element=e,this.propertyName=t,this.styles=null,this.version=0}return e.prototype.getValue=function(){return this.element.style.cssText},e.prototype._setProperty=function(e,t){var n="";null!==t&&void 0!==t&&"function"==typeof t.indexOf&&-1!==t.indexOf("!important")&&(n="important",t=t.replace("!important","")),this.element.style.setProperty(e,t,n)},e.prototype.setValue=function(e){var t=this.styles||{},n=void 0,r=this.version;if(null!==e&&void 0!==e)if(e instanceof Object){var i=void 0;for(n in e)e.hasOwnProperty(n)&&(i=e[n],t[n=n.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})]=r,this._setProperty(n,i))}else if(e.length)for(var o=/\s*([\w\-]+)\s*:\s*((?:(?:[\w\-]+\(\s*(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[\w\-]+\(\s*(?:^"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^\)]*)\),?|[^\)]*)\),?|"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^;]*),?\s*)+);?/g,s=void 0;null!==(s=o.exec(e));)(n=s[1])&&(t[n]=r,this._setProperty(n,s[2]));if(this.styles=t,this.version+=1,0!==r)for(n in r-=1,t)t.hasOwnProperty(n)&&t[n]===r&&this.element.style.removeProperty(n)},e.prototype.subscribe=function(){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "'+this.propertyName+'" property is not supported.')},e}(),$n=ne()(u=function(){function e(e,t,n){this.element=e,this.propertyName=t,this.handler=n,"files"===t&&(this.setValue=function(){})}return e.prototype.getValue=function(){return this.element[this.propertyName]},e.prototype.setValue=function(e){e=void 0===e||null===e?"":e,this.element[this.propertyName]!==e&&(this.element[this.propertyName]=e,this.notify())},e.prototype.notify=function(){var e=this.oldValue,t=this.getValue();this.callSubscribers(t,e),this.oldValue=t},e.prototype.handleEvent=function(){this.notify()},e.prototype.subscribe=function(e,t){this.hasSubscribers()||(this.oldValue=this.getValue(),this.handler.subscribe(this.element,this)),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&this.handler.dispose()},e}())||u,Gn=ne()(c=function(){function e(e,t,n){this.element=e,this.handler=t,this.observerLocator=n}return e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){this.initialSync&&this.value===e||(this.arrayObserver&&(this.arrayObserver.unsubscribe("CheckedObserver:array",this),this.arrayObserver=null),"checkbox"===this.element.type&&Array.isArray(e)&&(this.arrayObserver=this.observerLocator.getArrayObserver(e),this.arrayObserver.subscribe("CheckedObserver:array",this)),this.oldValue=this.value,this.value=e,this.synchronizeElement(),this.notify(),this.initialSync||(this.initialSync=!0,this.observerLocator.taskQueue.queueMicroTask(this)))},e.prototype.call=function(e,t){this.synchronizeElement(),this.valueObserver||(this.valueObserver=this.element.__observers__.model||this.element.__observers__.value,this.valueObserver&&this.valueObserver.subscribe("CheckedObserver:value",this))},e.prototype.synchronizeElement=function(){var e=this.value,t=this.element,n=t.hasOwnProperty("model")?t.model:t.value,r="radio"===t.type,i=t.matcher||function(e,t){return e===t};t.checked=r&&!!i(e,n)||!r&&!0===e||!r&&Array.isArray(e)&&-1!==e.findIndex(function(e){return!!i(e,n)})},e.prototype.synchronizeValue=function(){var e=this.value,t=this.element,n=t.hasOwnProperty("model")?t.model:t.value,r=void 0,i=t.matcher||function(e,t){return e===t};if("checkbox"===t.type){if(Array.isArray(e))return r=e.findIndex(function(e){return!!i(e,n)}),void(t.checked&&-1===r?e.push(n):t.checked||-1===r||e.splice(r,1));e=t.checked}else{if(!t.checked)return;e=n}this.oldValue=this.value,this.value=e,this.notify()},e.prototype.notify=function(){var e=this.oldValue,t=this.value;t!==e&&this.callSubscribers(t,e)},e.prototype.handleEvent=function(){this.synchronizeValue()},e.prototype.subscribe=function(e,t){this.hasSubscribers()||this.handler.subscribe(this.element,this),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&this.handler.dispose()},e.prototype.unbind=function(){this.arrayObserver&&(this.arrayObserver.unsubscribe("CheckedObserver:array",this),this.arrayObserver=null),this.valueObserver&&this.valueObserver.unsubscribe("CheckedObserver:value",this)},e}())||c,Kn=ne()(l=function(){function e(e,t,n){this.element=e,this.handler=t,this.observerLocator=n}return e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){if(null!==e&&void 0!==e&&this.element.multiple&&!Array.isArray(e))throw new Error("Only null or Array instances can be bound to a multi-select.");this.value!==e&&(this.arrayObserver&&(this.arrayObserver.unsubscribe("SelectValueObserver:array",this),this.arrayObserver=null),Array.isArray(e)&&(this.arrayObserver=this.observerLocator.getArrayObserver(e),this.arrayObserver.subscribe("SelectValueObserver:array",this)),this.oldValue=this.value,this.value=e,this.synchronizeOptions(),this.notify(),this.initialSync||(this.initialSync=!0,this.observerLocator.taskQueue.queueMicroTask(this)))},e.prototype.call=function(e,t){this.synchronizeOptions()},e.prototype.synchronizeOptions=function(){var e=this.value,t=void 0;Array.isArray(e)&&(t=!0);for(var n=this.element.options,r=n.length,i=this.element.matcher||function(e,t){return e===t},o=function(){var o=n.item(r),s=o.hasOwnProperty("model")?o.model:o.value;if(t)return o.selected=-1!==e.findIndex(function(e){return!!i(s,e)}),"continue";o.selected=!!i(s,e)};r--;)o()},e.prototype.synchronizeValue=function(){for(var e=this,t=this.element.options,n=0,r=[],i=0,o=t.length;i<o;i++){var s=t.item(i);s.selected&&(r.push(s.hasOwnProperty("model")?s.model:s.value),n++)}if(this.element.multiple){if(Array.isArray(this.value)){var a=function(){for(var t=e.element.matcher||function(e,t){return e===t},n=0,i=function(){var i=e.value[n];-1===r.findIndex(function(e){return t(i,e)})?e.value.splice(n,1):n++};n<e.value.length;)i();n=0;for(var o=function(){var i=r[n];-1===e.value.findIndex(function(e){return t(i,e)})&&e.value.push(i),n++};n<r.length;)o();return{v:void 0}}();if("object"===(void 0===a?"undefined":x(a)))return a.v}}else r=0===n?null:r[0];r!==this.value&&(this.oldValue=this.value,this.value=r,this.notify())},e.prototype.notify=function(){var e=this.oldValue,t=this.value;this.callSubscribers(t,e)},e.prototype.handleEvent=function(){this.synchronizeValue()},e.prototype.subscribe=function(e,t){this.hasSubscribers()||this.handler.subscribe(this.element,this),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&this.handler.dispose()},e.prototype.bind=function(){var e=this;this.domObserver=m.b.createMutationObserver(function(){e.synchronizeOptions(),e.synchronizeValue()}),this.domObserver.observe(this.element,{childList:!0,subtree:!0,characterData:!0})},e.prototype.unbind=function(){this.domObserver.disconnect(),this.domObserver=null,this.arrayObserver&&(this.arrayObserver.unsubscribe("SelectValueObserver:array",this),this.arrayObserver=null)},e}())||l,Xn=function(){function e(e){this.element=e,this.doNotCache=!0,this.value="",this.version=0}return e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){var t=this.nameIndex||{},n=this.version,r=void 0,i=void 0;if(null!==e&&void 0!==e&&e.length)for(var o=0,s=(r=e.split(/\s+/)).length;o<s;o++)""!==(i=r[o])&&(t[i]=n,this.element.classList.add(i));if(this.value=e,this.nameIndex=t,this.version+=1,0!==n)for(i in n-=1,t)t.hasOwnProperty(i)&&t[i]===n&&this.element.classList.remove(i)},e.prototype.subscribe=function(){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "class" property is not supported.')},e}();function Yn(e){return!!(e&&e.get&&e.get.dependencies)}function Jn(e,t,n){Object.getOwnPropertyDescriptor(e.prototype,t).get.dependencies=n}function Zn(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e,n,r){return r.get.dependencies=t,r}}var er=function(e){function t(t,n){var r=k(this,e.call(this));return r.name=t,r.dependencies=n,r.isAssignable=!0,r}return C(t,e),t.prototype.evaluate=function(e,t){return e.bindingContext[this.name]},t.prototype.assign=function(e,t){e.bindingContext[this.name]=t},t.prototype.accept=function(e){throw new Error("not implemented")},t.prototype.connect=function(e,t){for(var n=this.dependencies,r=n.length;r--;)n[r].connect(e,t)},t}(Oe);function tr(e,t,n,r){var i=n.get.dependencies;if(!(i instanceof er)){for(var o=i.length;o--;)i[o]=r.parser.parse(i[o]);i=n.get.dependencies=new er(t,i)}var s={bindingContext:e,overrideContext:A(e)};return new re(s,i,r)}var nr=void 0,rr=void 0,ir=void 0,or=void 0;if("undefined"==typeof FEATURE_NO_SVG){nr={a:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","target","transform","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],altGlyph:["class","dx","dy","externalResourcesRequired","format","glyphRef","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],altGlyphDef:["id","xml:base","xml:lang","xml:space"],altGlyphItem:["id","xml:base","xml:lang","xml:space"],animate:["accumulate","additive","attributeName","attributeType","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],animateColor:["accumulate","additive","attributeName","attributeType","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],animateMotion:["accumulate","additive","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keyPoints","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","origin","path","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","rotate","systemLanguage","to","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],animateTransform:["accumulate","additive","attributeName","attributeType","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","type","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],circle:["class","cx","cy","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","r","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],clipPath:["class","clipPathUnits","externalResourcesRequired","id","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],"color-profile":["id","local","name","rendering-intent","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],cursor:["externalResourcesRequired","id","requiredExtensions","requiredFeatures","systemLanguage","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],defs:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],desc:["class","id","style","xml:base","xml:lang","xml:space"],ellipse:["class","cx","cy","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rx","ry","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],feBlend:["class","height","id","in","in2","mode","result","style","width","x","xml:base","xml:lang","xml:space","y"],feColorMatrix:["class","height","id","in","result","style","type","values","width","x","xml:base","xml:lang","xml:space","y"],feComponentTransfer:["class","height","id","in","result","style","width","x","xml:base","xml:lang","xml:space","y"],feComposite:["class","height","id","in","in2","k1","k2","k3","k4","operator","result","style","width","x","xml:base","xml:lang","xml:space","y"],feConvolveMatrix:["bias","class","divisor","edgeMode","height","id","in","kernelMatrix","kernelUnitLength","order","preserveAlpha","result","style","targetX","targetY","width","x","xml:base","xml:lang","xml:space","y"],feDiffuseLighting:["class","diffuseConstant","height","id","in","kernelUnitLength","result","style","surfaceScale","width","x","xml:base","xml:lang","xml:space","y"],feDisplacementMap:["class","height","id","in","in2","result","scale","style","width","x","xChannelSelector","xml:base","xml:lang","xml:space","y","yChannelSelector"],feDistantLight:["azimuth","elevation","id","xml:base","xml:lang","xml:space"],feFlood:["class","height","id","result","style","width","x","xml:base","xml:lang","xml:space","y"],feFuncA:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feFuncB:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feFuncG:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feFuncR:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feGaussianBlur:["class","height","id","in","result","stdDeviation","style","width","x","xml:base","xml:lang","xml:space","y"],feImage:["class","externalResourcesRequired","height","id","preserveAspectRatio","result","style","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],feMerge:["class","height","id","result","style","width","x","xml:base","xml:lang","xml:space","y"],feMergeNode:["id","xml:base","xml:lang","xml:space"],feMorphology:["class","height","id","in","operator","radius","result","style","width","x","xml:base","xml:lang","xml:space","y"],feOffset:["class","dx","dy","height","id","in","result","style","width","x","xml:base","xml:lang","xml:space","y"],fePointLight:["id","x","xml:base","xml:lang","xml:space","y","z"],feSpecularLighting:["class","height","id","in","kernelUnitLength","result","specularConstant","specularExponent","style","surfaceScale","width","x","xml:base","xml:lang","xml:space","y"],feSpotLight:["id","limitingConeAngle","pointsAtX","pointsAtY","pointsAtZ","specularExponent","x","xml:base","xml:lang","xml:space","y","z"],feTile:["class","height","id","in","result","style","width","x","xml:base","xml:lang","xml:space","y"],feTurbulence:["baseFrequency","class","height","id","numOctaves","result","seed","stitchTiles","style","type","width","x","xml:base","xml:lang","xml:space","y"],filter:["class","externalResourcesRequired","filterRes","filterUnits","height","id","primitiveUnits","style","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],font:["class","externalResourcesRequired","horiz-adv-x","horiz-origin-x","horiz-origin-y","id","style","vert-adv-y","vert-origin-x","vert-origin-y","xml:base","xml:lang","xml:space"],"font-face":["accent-height","alphabetic","ascent","bbox","cap-height","descent","font-family","font-size","font-stretch","font-style","font-variant","font-weight","hanging","id","ideographic","mathematical","overline-position","overline-thickness","panose-1","slope","stemh","stemv","strikethrough-position","strikethrough-thickness","underline-position","underline-thickness","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","widths","x-height","xml:base","xml:lang","xml:space"],"font-face-format":["id","string","xml:base","xml:lang","xml:space"],"font-face-name":["id","name","xml:base","xml:lang","xml:space"],"font-face-src":["id","xml:base","xml:lang","xml:space"],"font-face-uri":["id","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],foreignObject:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","width","x","xml:base","xml:lang","xml:space","y"],g:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],glyph:["arabic-form","class","d","glyph-name","horiz-adv-x","id","lang","orientation","style","unicode","vert-adv-y","vert-origin-x","vert-origin-y","xml:base","xml:lang","xml:space"],glyphRef:["class","dx","dy","format","glyphRef","id","style","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],hkern:["g1","g2","id","k","u1","u2","xml:base","xml:lang","xml:space"],image:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","preserveAspectRatio","requiredExtensions","requiredFeatures","style","systemLanguage","transform","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],line:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","x1","x2","xml:base","xml:lang","xml:space","y1","y2"],linearGradient:["class","externalResourcesRequired","gradientTransform","gradientUnits","id","spreadMethod","style","x1","x2","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y1","y2"],marker:["class","externalResourcesRequired","id","markerHeight","markerUnits","markerWidth","orient","preserveAspectRatio","refX","refY","style","viewBox","xml:base","xml:lang","xml:space"],mask:["class","externalResourcesRequired","height","id","maskContentUnits","maskUnits","requiredExtensions","requiredFeatures","style","systemLanguage","width","x","xml:base","xml:lang","xml:space","y"],metadata:["id","xml:base","xml:lang","xml:space"],"missing-glyph":["class","d","horiz-adv-x","id","style","vert-adv-y","vert-origin-x","vert-origin-y","xml:base","xml:lang","xml:space"],mpath:["externalResourcesRequired","id","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],path:["class","d","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","pathLength","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],pattern:["class","externalResourcesRequired","height","id","patternContentUnits","patternTransform","patternUnits","preserveAspectRatio","requiredExtensions","requiredFeatures","style","systemLanguage","viewBox","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],polygon:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","points","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],polyline:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","points","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],radialGradient:["class","cx","cy","externalResourcesRequired","fx","fy","gradientTransform","gradientUnits","id","r","spreadMethod","style","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],rect:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rx","ry","style","systemLanguage","transform","width","x","xml:base","xml:lang","xml:space","y"],script:["externalResourcesRequired","id","type","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],set:["attributeName","attributeType","begin","dur","end","externalResourcesRequired","fill","id","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],stop:["class","id","offset","style","xml:base","xml:lang","xml:space"],style:["id","media","title","type","xml:base","xml:lang","xml:space"],svg:["baseProfile","class","contentScriptType","contentStyleType","externalResourcesRequired","height","id","onabort","onactivate","onclick","onerror","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","onresize","onscroll","onunload","onzoom","preserveAspectRatio","requiredExtensions","requiredFeatures","style","systemLanguage","version","viewBox","width","x","xml:base","xml:lang","xml:space","y","zoomAndPan"],switch:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],symbol:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","preserveAspectRatio","style","viewBox","xml:base","xml:lang","xml:space"],text:["class","dx","dy","externalResourcesRequired","id","lengthAdjust","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","textLength","transform","x","xml:base","xml:lang","xml:space","y"],textPath:["class","externalResourcesRequired","id","lengthAdjust","method","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","spacing","startOffset","style","systemLanguage","textLength","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],title:["class","id","style","xml:base","xml:lang","xml:space"],tref:["class","dx","dy","externalResourcesRequired","id","lengthAdjust","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","textLength","x","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],tspan:["class","dx","dy","externalResourcesRequired","id","lengthAdjust","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","textLength","x","xml:base","xml:lang","xml:space","y"],use:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],view:["externalResourcesRequired","id","preserveAspectRatio","viewBox","viewTarget","xml:base","xml:lang","xml:space","zoomAndPan"],vkern:["g1","g2","id","k","u1","u2","xml:base","xml:lang","xml:space"]},rr={a:!0,altGlyph:!0,animate:!0,animateColor:!0,circle:!0,clipPath:!0,defs:!0,ellipse:!0,feBlend:!0,feColorMatrix:!0,feComponentTransfer:!0,feComposite:!0,feConvolveMatrix:!0,feDiffuseLighting:!0,feDisplacementMap:!0,feFlood:!0,feGaussianBlur:!0,feImage:!0,feMerge:!0,feMorphology:!0,feOffset:!0,feSpecularLighting:!0,feTile:!0,feTurbulence:!0,filter:!0,font:!0,foreignObject:!0,g:!0,glyph:!0,glyphRef:!0,image:!0,line:!0,linearGradient:!0,marker:!0,mask:!0,"missing-glyph":!0,path:!0,pattern:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,svg:!0,switch:!0,symbol:!0,text:!0,textPath:!0,tref:!0,tspan:!0,use:!0},ir={"alignment-baseline":!0,"baseline-shift":!0,"clip-path":!0,"clip-rule":!0,clip:!0,"color-interpolation-filters":!0,"color-interpolation":!0,"color-profile":!0,"color-rendering":!0,color:!0,cursor:!0,direction:!0,display:!0,"dominant-baseline":!0,"enable-background":!0,"fill-opacity":!0,"fill-rule":!0,fill:!0,filter:!0,"flood-color":!0,"flood-opacity":!0,"font-family":!0,"font-size-adjust":!0,"font-size":!0,"font-stretch":!0,"font-style":!0,"font-variant":!0,"font-weight":!0,"glyph-orientation-horizontal":!0,"glyph-orientation-vertical":!0,"image-rendering":!0,kerning:!0,"letter-spacing":!0,"lighting-color":!0,"marker-end":!0,"marker-mid":!0,"marker-start":!0,mask:!0,opacity:!0,overflow:!0,"pointer-events":!0,"shape-rendering":!0,"stop-color":!0,"stop-opacity":!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,"stroke-linecap":!0,"stroke-linejoin":!0,"stroke-miterlimit":!0,"stroke-opacity":!0,"stroke-width":!0,stroke:!0,"text-anchor":!0,"text-decoration":!0,"text-rendering":!0,"unicode-bidi":!0,visibility:!0,"word-spacing":!0,"writing-mode":!0};var sr=function(e){var t=m.b.createElement("div");return t.innerHTML=e,t.firstChild};or=function(){function e(){"altglyph"===sr("<svg><altGlyph /></svg>").firstElementChild.nodeName&&ar.altGlyph&&(ar.altglyph=ar.altGlyph,delete ar.altGlyph,ar.altglyphdef=ar.altGlyphDef,delete ar.altGlyphDef,ar.altglyphitem=ar.altGlyphItem,delete ar.altGlyphItem,ar.glyphref=ar.glyphRef,delete ar.glyphRef)}return e.prototype.isStandardSvgAttribute=function(e,t){return ur[e]&&cr[t]||ar[e]&&-1!==ar[e].indexOf(t)},e}()}var ar=nr,ur=rr,cr=ir,lr=or||function(){function e(){}return e.prototype.isStandardSvgAttribute=function(){return!1},e}(),hr=(d=h=function(){function e(e,t,n,r,i){this.taskQueue=e,this.eventManager=t,this.dirtyChecker=n,this.svgAnalyzer=r,this.parser=i,this.adapters=[],this.logger=g.getLogger("observer-locator")}return e.prototype.getObserver=function(e,t){var n,r=e.__observers__;return r&&t in r?r[t]:((n=this.createPropertyObserver(e,t)).doNotCache||(void 0===r&&(r=this.getOrCreateObserversLookup(e)),r[t]=n),n)},e.prototype.getOrCreateObserversLookup=function(e){return e.__observers__||this.createObserversLookup(e)},e.prototype.createObserversLookup=function(e){var t={};return Reflect.defineProperty(e,"__observers__",{enumerable:!1,configurable:!1,writable:!1,value:t})||this.logger.warn("Cannot add observers to object",e),t},e.prototype.addAdapter=function(e){this.adapters.push(e)},e.prototype.getAdapterObserver=function(e,t,n){for(var r=0,i=this.adapters.length;r<i;r++){var o=this.adapters[r].getObserver(e,t,n);if(o)return o}return null},e.prototype.createPropertyObserver=function(e,t){var n,r=void 0,i=void 0;if(!(e instanceof Object))return new Dn(e,t);if(e instanceof m.b.Element){if("class"===t)return new Xn(e);if("style"===t||"css"===t)return new Qn(e,t);if(r=this.eventManager.getElementHandler(e,t),"value"===t&&"select"===e.tagName.toLowerCase())return new Kn(e,r,this);if("checked"===t&&"input"===e.tagName.toLowerCase())return new Gn(e,r,this);if(r)return new $n(e,t,r);if(i=/^xlink:(.+)$/.exec(t))return new Hn(e,t,i[1]);if("role"===t&&(e instanceof m.b.Element||e instanceof m.b.SVGElement)||/^\w+:|^data-|^aria-/.test(t)||e instanceof m.b.SVGElement&&this.svgAnalyzer.isStandardSvgAttribute(e.nodeName,t))return new Wn(e,t)}if(Yn(n=Object.getPropertyDescriptor(e,t)))return tr(e,t,n,this);if(n){var o=n.get||n.set;if(o){if(o.getObserver)return o.getObserver(e);var s=this.getAdapterObserver(e,t,n);return s||new Fn(this.dirtyChecker,e,t)}}return e instanceof Array?"length"===t?this.getArrayObserver(e).getLengthObserver():new Fn(this.dirtyChecker,e,t):e instanceof Map?"size"===t?this.getMapObserver(e).getLengthObserver():new Fn(this.dirtyChecker,e,t):e instanceof Set?"size"===t?this.getSetObserver(e).getLengthObserver():new Fn(this.dirtyChecker,e,t):new zn(this.taskQueue,e,t)},e.prototype.getAccessor=function(e,t){if(e instanceof m.b.Element){if("class"===t||"style"===t||"css"===t||"value"===t&&("input"===e.tagName.toLowerCase()||"select"===e.tagName.toLowerCase())||"checked"===t&&"input"===e.tagName.toLowerCase()||"model"===t&&"input"===e.tagName.toLowerCase()||/^xlink:.+$/.exec(t))return this.getObserver(e,t);if(/^\w+:|^data-|^aria-/.test(t)||e instanceof m.b.SVGElement&&this.svgAnalyzer.isStandardSvgAttribute(e.nodeName,t)||"img"===e.tagName.toLowerCase()&&"src"===t||"a"===e.tagName.toLowerCase()&&"href"===t)return Un}return qn},e.prototype.getArrayObserver=function(e){return _e(this.taskQueue,e)},e.prototype.getMapObserver=function(e){return Cn(this.taskQueue,e)},e.prototype.getSetObserver=function(e){return Pr(this.taskQueue,e)},e}(),h.inject=[y.a,In,Ln,lr,Ye],d),dr=function(){function e(){}return e.prototype.getObserver=function(e,t,n){throw new Error("BindingAdapters must implement getObserver(object, propertyName).")},e}(),pr=function(){function e(e,t,n,r,i,o){this.observerLocator=e,this.targetProperty=t,this.sourceExpression=n,this.mode=r,this.lookupFunctions=i,this.attribute=o,this.discrete=!1}return e.prototype.createBinding=function(e){return new fr(this.observerLocator,this.sourceExpression,e,this.targetProperty,this.mode,this.lookupFunctions)},e}(),fr=F()(p=function(){function e(e,t,n,r,i,o){this.observerLocator=e,this.sourceExpression=t,this.target=n,this.targetProperty=r,this.mode=i,this.lookupFunctions=o}return e.prototype.updateTarget=function(e){this.targetObserver.setValue(e,this.target,this.targetProperty)},e.prototype.updateSource=function(e){this.sourceExpression.assign(this.source,e,this.lookupFunctions)},e.prototype.call=function(e,t,n){if(this.isBound){if(e===S)return n=this.targetObserver.getValue(this.target,this.targetProperty),(t=this.sourceExpression.evaluate(this.source,this.lookupFunctions))!==n&&this.updateTarget(t),void(this.mode!==Xe.oneTime&&(this._version++,this.sourceExpression.connect(this,this.source),this.unobserve(!1)));if(e!==_)throw new Error("Unexpected call context "+e);t!==this.sourceExpression.evaluate(this.source,this.lookupFunctions)&&this.updateSource(t)}},e.prototype.bind=function(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.sourceExpression.bind&&this.sourceExpression.bind(this,e,this.lookupFunctions);var t=this.mode;if(!this.targetObserver){var n=t===Xe.twoWay||t===Xe.fromView?"getObserver":"getAccessor";this.targetObserver=this.observerLocator[n](this.target,this.targetProperty)}if("bind"in this.targetObserver&&this.targetObserver.bind(),this.mode!==Xe.fromView){var r=this.sourceExpression.evaluate(e,this.lookupFunctions);this.updateTarget(r)}t!==Xe.oneTime&&(t===Xe.toView?$(this):t===Xe.twoWay?(this.sourceExpression.connect(this,e),this.targetObserver.subscribe(_,this)):t===Xe.fromView&&this.targetObserver.subscribe(_,this))},e.prototype.unbind=function(){this.isBound&&(this.isBound=!1,this.sourceExpression.unbind&&this.sourceExpression.unbind(this,this.source),this.source=null,"unbind"in this.targetObserver&&this.targetObserver.unbind(),this.targetObserver.unsubscribe&&this.targetObserver.unsubscribe(_,this),this.unobserve(!0))},e.prototype.connect=function(e){if(this.isBound){if(e){var t=this.sourceExpression.evaluate(this.source,this.lookupFunctions);this.updateTarget(t)}this.sourceExpression.connect(this,this.source)}},e}())||p,vr=function(){function e(e,t,n,r){this.observerLocator=e,this.targetProperty=t,this.sourceExpression=n,this.lookupFunctions=r}return e.prototype.createBinding=function(e){return new gr(this.observerLocator,this.sourceExpression,e,this.targetProperty,this.lookupFunctions)},e}(),gr=function(){function e(e,t,n,r,i){this.sourceExpression=t,this.target=n,this.targetProperty=e.getObserver(n,r),this.lookupFunctions=i}return e.prototype.callSource=function(e){var t=this.source.overrideContext;Object.assign(t,e),t.$event=e;var n=this.sourceExpression.evaluate(this.source,this.lookupFunctions,!0);for(var r in delete t.$event,e)delete t[r];return n},e.prototype.bind=function(e){var t=this;if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.sourceExpression.bind&&this.sourceExpression.bind(this,e,this.lookupFunctions),this.targetProperty.setValue(function(e){return t.callSource(e)})},e.prototype.unbind=function(){this.isBound&&(this.isBound=!1,this.sourceExpression.unbind&&this.sourceExpression.unbind(this,this.source),this.source=null,this.targetProperty.setValue(null))},e}(),mr=function(){function e(e){this.name=e}return e.convention=function(t){if(t.endsWith("ValueConverter"))return new e(E(t.substring(0,t.length-14)))},e.prototype.initialize=function(e,t){this.instance=e.get(t)},e.prototype.register=function(e,t){e.registerValueConverter(t||this.name,this.instance)},e.prototype.load=function(e,t){},e}();function yr(e){if(void 0===e||"string"==typeof e)return function(t){b.d.define(b.d.resource,new mr(e),t)};b.d.define(b.d.resource,new mr,e)}var br=function(){function e(e){this.name=e}return e.convention=function(t){if(t.endsWith("BindingBehavior"))return new e(E(t.substring(0,t.length-15)))},e.prototype.initialize=function(e,t){this.instance=e.get(t)},e.prototype.register=function(e,t){e.registerBindingBehavior(t||this.name,this.instance)},e.prototype.load=function(e,t){},e}();function wr(e){if(void 0===e||"string"==typeof e)return function(t){b.d.define(b.d.resource,new br(e),t)};b.d.define(b.d.resource,new br,e)}var xr=function(){function e(e,t,n,r,i,o){this.eventManager=e,this.targetEvent=t,this.sourceExpression=n,this.delegationStrategy=r,this.discrete=!0,this.preventDefault=i,this.lookupFunctions=o}return e.prototype.createBinding=function(e){return new kr(this.eventManager,this.targetEvent,this.delegationStrategy,this.sourceExpression,e,this.preventDefault,this.lookupFunctions)},e}(),kr=function(){function e(e,t,n,r,i,o,s){this.eventManager=e,this.targetEvent=t,this.delegationStrategy=n,this.sourceExpression=r,this.target=i,this.preventDefault=o,this.lookupFunctions=s}return e.prototype.callSource=function(e){var t=this.source.overrideContext;t.$event=e;var n=this.sourceExpression.evaluate(this.source,this.lookupFunctions,!0);return delete t.$event,!0!==n&&this.preventDefault&&e.preventDefault(),n},e.prototype.handleEvent=function(e){this.callSource(e)},e.prototype.bind=function(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.sourceExpression.bind&&this.sourceExpression.bind(this,e,this.lookupFunctions),this._handler=this.eventManager.addEventListener(this.target,this.targetEvent,this,this.delegationStrategy,!0)},e.prototype.unbind=function(){this.isBound&&(this.isBound=!1,this.sourceExpression.unbind&&this.sourceExpression.unbind(this,this.source),this.source=null,this._handler.dispose(),this._handler=null)},e}();function Cr(e){var t=e.au;if(void 0===t)throw new Error('No Aurelia APIs are defined for the element: "'+e.tagName+'".');return t}var _r=function(){function e(e,t,n){this.sourceExpression=e,this.apiName=t,this.lookupFunctions=n,this.discrete=!0}return e.prototype.createBinding=function(t){return new Sr(this.sourceExpression,e.locateAPI(t,this.apiName),this.lookupFunctions)},e.locateAPI=function(e,t){switch(t){case"element":return e;case"controller":return Cr(e).controller;case"view-model":return Cr(e).controller.viewModel;case"view":return Cr(e).controller.view;default:var n=Cr(e)[t];if(void 0===n)throw new Error('Attempted to reference "'+t+"\", but it was not found amongst the target's API.");return n.viewModel}},e}(),Sr=function(){function e(e,t,n){this.sourceExpression=e,this.target=t,this.lookupFunctions=n}return e.prototype.bind=function(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.sourceExpression.bind&&this.sourceExpression.bind(this,e,this.lookupFunctions),this.sourceExpression.assign(this.source,this.target,this.lookupFunctions)},e.prototype.unbind=function(){this.isBound&&(this.isBound=!1,this.sourceExpression.evaluate(this.source,this.lookupFunctions)===this.target&&this.sourceExpression.assign(this.source,null,this.lookupFunctions),this.sourceExpression.unbind&&this.sourceExpression.unbind(this,this.source),this.source=null)},e}(),Or={bindingBehaviors:function(e){return null},valueConverters:function(e){return null}},Er=(v=f=function(){function e(e,t){this.observerLocator=e,this.parser=t}return e.prototype.createBindingExpression=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Xe.toView,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Or;return new pr(this.observerLocator,e,this.parser.parse(t),n,r)},e.prototype.propertyObserver=function(e,t){var n=this;return{subscribe:function(r){var i=n.observerLocator.getObserver(e,t);return i.subscribe(r),{dispose:function(){return i.unsubscribe(r)}}}}},e.prototype.collectionObserver=function(e){var t=this;return{subscribe:function(n){var r=void 0;if(e instanceof Array)r=t.observerLocator.getArrayObserver(e);else if(e instanceof Map)r=t.observerLocator.getMapObserver(e);else{if(!(e instanceof Set))throw new Error("collection must be an instance of Array, Map or Set.");r=t.observerLocator.getSetObserver(e)}return r.subscribe(n),{dispose:function(){return r.unsubscribe(n)}}}}},e.prototype.expressionObserver=function(e,t){var n={bindingContext:e,overrideContext:A(e)};return new re(n,this.parser.parse(t),this.observerLocator,Or)},e.prototype.parseExpression=function(e){return this.parser.parse(e)},e.prototype.registerAdapter=function(e){this.observerLocator.addAdapter(e)},e}(),f.inject=[hr,Ye],v),Ar=Set.prototype;function Pr(e,t){return Tr.for(e,t)}var Tr=function(e){function t(t,n){return k(this,e.call(this,t,n))}return C(t,e),t.for=function(e,n){return"__set_observer__"in n||Reflect.defineProperty(n,"__set_observer__",{value:t.create(e,n),enumerable:!1,configurable:!1}),n.__set_observer__},t.create=function(e,n){var r=new t(e,n),i=Ar;return i.add===n.add&&i.delete===n.delete&&i.clear===n.clear||(i={add:n.add,delete:n.delete,clear:n.clear}),n.add=function(){var e=n.size,t=i.add.apply(n,arguments);return n.size===e||r.addChangeRecord({type:"add",object:n,value:Array.from(n).pop()}),t},n.delete=function(){var e=n.has(arguments[0]),t=i.delete.apply(n,arguments);return e&&r.addChangeRecord({type:"delete",object:n,value:arguments[0]}),t},n.clear=function(){var e=i.clear.apply(n,arguments);return r.addChangeRecord({type:"clear",object:n}),e},r},t}(ve);function jr(e,t,n){function r(e,t,n,r){var i=void 0===t;i&&(e=e.prototype,t="string"==typeof r?r:r.name);var o="_"+t,s={configurable:!0,enumerable:!1,writable:!0},a=r&&r.changeHandler||t+"Changed";if(n?"function"==typeof n.initializer&&(s.value=n.initializer()):n={},"enumerable"in n||(n.enumerable=!0),delete n.value,delete n.writable,delete n.initializer,Reflect.defineProperty(e,o,s),n.get=function(){return this[o]},n.set=function(e){var n=this[o];e!==n&&(this[o]=e,Reflect.defineProperty(this,o,{enumerable:!1}),this[a]&&this[a](e,n,t))},n.get.dependencies=[o],!i)return n;Reflect.defineProperty(e,t,n)}return void 0===t?function(t,n,i){return r(t,n,i,e)}:r(e,t,n)}var Rr={};function Nr(e,t){Rr.hasOwnProperty(t)||(Rr[t]=0),e.observeProperty(Rr,t)}function Mr(e){Rr.hasOwnProperty(e)&&Rr[e]++}},4:function(e,t,n){"use strict";n.d(t,"z",function(){return p}),n.d(t,"k",function(){return f}),n.d(t,"f",function(){return v}),n.d(t,"a",function(){return g}),n.d(t,"h",function(){return m}),n.d(t,"i",function(){return y}),n.d(t,"c",function(){return b}),n.d(t,"g",function(){return w}),n.d(t,"q",function(){return x}),n.d(t,"u",function(){return k}),n.d(t,"n",function(){return C}),n.d(t,"w",function(){return _}),n.d(t,"x",function(){return S}),n.d(t,"p",function(){return O}),n.d(t,"v",function(){return E}),n.d(t,"t",function(){return A}),n.d(t,"s",function(){return P}),n.d(t,"d",function(){return T}),n.d(t,"y",function(){return j}),n.d(t,"B",function(){return R}),n.d(t,"A",function(){return N}),n.d(t,"l",function(){return M}),n.d(t,"j",function(){return I}),n.d(t,"m",function(){return L}),n.d(t,"e",function(){return B}),n.d(t,"b",function(){return H}),n.d(t,"o",function(){return U}),n.d(t,"r",function(){return W});var r,i,o,s,a,u,c,l,h=n(2),d=n(0),p=h.f.create("aurelia:resolver",function(e){return"function"==typeof e.get||"Resolvers must implement: get(container: Container, key: any): any"}),f=p()(r=function(){function e(e,t){this.strategy=e,this.state=t}return e.prototype.get=function(e,t){switch(this.strategy){case 0:return this.state;case 1:var n=e.invoke(this.state);return this.state=n,this.strategy=0,n;case 2:return e.invoke(this.state);case 3:return this.state(e,t,this);case 4:return this.state[0].get(e,t);case 5:return e.get(this.state);default:throw new Error("Invalid strategy: "+this.strategy)}},e}())||r,v=p()(i=function(){function e(e){this._key=e}return e.prototype.get=function(e){var t=this;return function(){return e.get(t._key)}},e.of=function(t){return new e(t)},e}())||i,g=p()(o=function(){function e(e){this._key=e}return e.prototype.get=function(e){return e.getAll(this._key)},e.of=function(t){return new e(t)},e}())||o,m=p()(s=function(){function e(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this._key=e,this._checkParent=t}return e.prototype.get=function(e){return e.hasResolver(this._key,this._checkParent)?e.get(this._key):null},e.of=function(t){return new e(t,!(arguments.length>1&&void 0!==arguments[1])||arguments[1])},e}())||s,y=p()(a=function(){function e(e){this._key=e}return e.prototype.get=function(e){return e.parent?e.parent.get(this._key):null},e.of=function(t){return new e(t)},e}())||a,b=p()(u=function(){function e(e){this._key=e}return e.prototype.get=function(e){var t=this._key,n=e.getResolver(t);return n&&3===n.strategy&&(t=n.state),function(){for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];return e.invoke(t,r)}},e.of=function(t){return new e(t)},e}())||u,w=p()(c=function(){function e(e){this.key=e,this.asKey=e;for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this.dynamicDependencies=n}return e.prototype.get=function(e){var t=this.dynamicDependencies.length>0?this.dynamicDependencies.map(function(t){return t["protocol:aurelia:resolver"]?t.get(e):e.get(t)}):void 0,n=this.key,r=e.getResolver(n);r&&3===r.strategy&&(n=r.state);var i=e.invoke(n,t);return e.registerInstance(this.asKey,i),i},e.prototype.as=function(e){return this.asKey=e,this},e.of=function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return new(Function.prototype.bind.apply(e,[null].concat([t],r)))},e}())||c;function x(e){return U(e),e.inject}function k(e){return function(t,n,r){x(t)[r]=v.of(e)}}function C(e){return function(t,n,r){x(t)[r]=g.of(e)}}function _(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=function(e){return function(t,n,r){var i=x(t);i[r]=m.of(i[r],e)}};return t("boolean"!=typeof e||e)}function S(e,t,n){var r=x(e);r[n]=y.of(r[n])}function O(e){return function(t,n,r){x(t)[r]=b.of(e)}}function E(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=function(e){return function(t,r,i){var o=x(t);o[i]=w.of.apply(w,[o[i]].concat(n)),e&&o[i].as(e)}};return arguments.length>=1?i(e):i()}function A(e){return function(t){h.d.define(h.d.invoker,e,t)}}function P(e){var t=function(e){h.d.define(h.d.invoker,T.instance,e)};return e?t(e):t}var T=function(){function e(){}return e.prototype.invoke=function(e,t,n){for(var r=n.length,i=new Array(r);r--;)i[r]=e.get(n[r]);return t.apply(void 0,i)},e.prototype.invokeWithDynamicDependencies=function(e,t,n,r){for(var i=n.length,o=new Array(i);i--;)o[i]=e.get(n[i]);return void 0!==r&&(o=o.concat(r)),t.apply(void 0,o)},e}();function j(e){return function(t){h.d.define(h.d.registration,e,t)}}function R(e){return j(new M(e))}function N(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return j(new I(e,t))}T.instance=new T;var M=function(){function e(e){this._key=e}return e.prototype.registerResolver=function(e,t,n){var r=e.getResolver(this._key||t);return void 0===r?e.registerTransient(this._key||t,n):r},e}(),I=function(){function e(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];"boolean"==typeof e?this._registerInChild=e:(this._key=e,this._registerInChild=t)}return e.prototype.registerResolver=function(e,t,n){var r=this._registerInChild?e:e.root,i=r.getResolver(this._key||t);return void 0===i?r.registerSingleton(this._key||t,n):i},e}();function V(e){if(null===e||void 0===e)throw new Error("key/value cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?")}var L=Object.freeze([]);h.d.registration="aurelia:registration",h.d.invoker="aurelia:invoker";var F=p.decorates,B=function(){function e(e,t,n){this.fn=e,this.invoker=t,this.dependencies=n}return e.prototype.invoke=function(e,t){return void 0!==t?this.invoker.invokeWithDynamicDependencies(e,this.fn,this.dependencies,t):this.invoker.invoke(e,this.fn,this.dependencies)},e}();function q(e,t,n,r){for(var i=n.length,o=new Array(i),s=void 0;i--;){if(null===(s=n[i])||void 0===s)throw new Error("Constructor Parameter with index "+i+" cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?");o[i]=e.get(s)}return void 0!==r&&(o=o.concat(r)),Reflect.construct(t,o)}var D=((l={})[0]={invoke:function(e,t){return new t},invokeWithDynamicDependencies:q},l[1]={invoke:function(e,t,n){return new t(e.get(n[0]))},invokeWithDynamicDependencies:q},l[2]={invoke:function(e,t,n){return new t(e.get(n[0]),e.get(n[1]))},invokeWithDynamicDependencies:q},l[3]={invoke:function(e,t,n){return new t(e.get(n[0]),e.get(n[1]),e.get(n[2]))},invokeWithDynamicDependencies:q},l[4]={invoke:function(e,t,n){return new t(e.get(n[0]),e.get(n[1]),e.get(n[2]),e.get(n[3]))},invokeWithDynamicDependencies:q},l[5]={invoke:function(e,t,n){return new t(e.get(n[0]),e.get(n[1]),e.get(n[2]),e.get(n[3]),e.get(n[4]))},invokeWithDynamicDependencies:q},l.fallback={invoke:q,invokeWithDynamicDependencies:q},l);function z(e){return e.hasOwnProperty("inject")?"function"==typeof e.inject?e.inject():e.inject:[]}var H=function(){function e(e){void 0===e&&(e={}),this._configuration=e,this._onHandlerCreated=e.onHandlerCreated,this._handlers=e.handlers||(e.handlers=new Map),this._resolvers=new Map,this.root=this,this.parent=null}return e.prototype.makeGlobal=function(){return e.instance=this,this},e.prototype.setHandlerCreatedCallback=function(e){this._onHandlerCreated=e,this._configuration.onHandlerCreated=e},e.prototype.registerInstance=function(e,t){return this.registerResolver(e,new f(0,void 0===t?e:t))},e.prototype.registerSingleton=function(e,t){return this.registerResolver(e,new f(1,void 0===t?e:t))},e.prototype.registerTransient=function(e,t){return this.registerResolver(e,new f(2,void 0===t?e:t))},e.prototype.registerHandler=function(e,t){return this.registerResolver(e,new f(3,t))},e.prototype.registerAlias=function(e,t){return this.registerResolver(t,new f(5,e))},e.prototype.registerResolver=function(e,t){V(e);var n=this._resolvers,r=n.get(e);return void 0===r?n.set(e,t):4===r.strategy?r.state.push(t):n.set(e,new f(4,[r,t])),t},e.prototype.autoRegister=function(e,t){if("function"==typeof(t=void 0===t?e:t)){var n=h.d.get(h.d.registration,t);return void 0===n?this.registerResolver(e,new f(1,t)):n.registerResolver(this,e,t)}return this.registerResolver(e,new f(0,t))},e.prototype.autoRegisterAll=function(e){for(var t=e.length;t--;)this.autoRegister(e[t])},e.prototype.unregister=function(e){this._resolvers.delete(e)},e.prototype.hasResolver=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return V(e),this._resolvers.has(e)||t&&null!==this.parent&&this.parent.hasResolver(e,t)},e.prototype.getResolver=function(e){return this._resolvers.get(e)},e.prototype.get=function(t){if(V(t),t===e)return this;if(F(t))return t.get(this,t);var n=this._resolvers.get(t);if(void 0===n){if(null===this.parent)return this.autoRegister(t).get(this,t);var r=h.d.get(h.d.registration,t);return void 0===r?this.parent._get(t):r.registerResolver(this,t,t).get(this,t)}return n.get(this,t)},e.prototype._get=function(e){var t=this._resolvers.get(e);return void 0===t?null===this.parent?this.autoRegister(e).get(this,e):this.parent._get(e):t.get(this,e)},e.prototype.getAll=function(e){V(e);var t=this._resolvers.get(e);if(void 0===t)return null===this.parent?L:this.parent.getAll(e);if(4===t.strategy){for(var n=t.state,r=n.length,i=new Array(r);r--;)i[r]=n[r].get(this,e);return i}return[t.get(this,e)]},e.prototype.createChild=function(){var t=new e(this._configuration);return t.root=this.root,t.parent=this,t},e.prototype.invoke=function(e,t){try{var n=this._handlers.get(e);return void 0===n&&(n=this._createInvocationHandler(e),this._handlers.set(e,n)),n.invoke(this,t)}catch(t){throw new d.a("Error invoking "+e.name+". Check the inner error for details.",t,!0)}},e.prototype._createInvocationHandler=function(e){var t=void 0;if(void 0===e.inject)t=h.d.getOwn(h.d.paramTypes,e)||L;else{t=[];for(var n=e;"function"==typeof n;){var r;(r=t).push.apply(r,z(n)),n=Object.getPrototypeOf(n)}}var i=h.d.getOwn(h.d.invoker,e)||D[t.length]||D.fallback,o=new B(e,i,t);return void 0!==this._onHandlerCreated?this._onHandlerCreated(o):o},e}();function U(e){var t=function(e){e.hasOwnProperty("inject")||(e.inject=(h.d.getOwn(h.d.paramTypes,e)||L).slice())};return e?t(e):t}function W(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e,n,r){if("number"==typeof r)return U(e),void(1===t.length&&(e.inject[r]=t[0]));r?r.value.inject=t:e.inject=t}}},5:function(e,t,n){"use strict";n.r(t),n.d(t,"logLevel",function(){return r}),n.d(t,"getLogger",function(){return p}),n.d(t,"addAppender",function(){return f}),n.d(t,"removeAppender",function(){return v}),n.d(t,"getAppenders",function(){return g}),n.d(t,"clearAppenders",function(){return m}),n.d(t,"addCustomLevel",function(){return y}),n.d(t,"removeCustomLevel",function(){return b}),n.d(t,"setLevel",function(){return w}),n.d(t,"getLevel",function(){return x}),n.d(t,"Logger",function(){return k});var r={none:0,error:10,warn:20,info:30,debug:40},i={},o=[],s=r.none,a=["none","error","warn","info","debug"];function u(e){return a.filter(function(t){return t===e}).length>0}function c(){return[this].concat(Array.prototype.slice.call(arguments))}function l(e){var t=r[e];return function(){if(!(this.level<t))for(var n=c.apply(this,arguments),r=o.length;r--;){var i;(i=o[r])[e].apply(i,n)}}}function h(e){var t=r[e];return function(){if(!(this.level<t))for(var n=c.apply(this,arguments),r=o.length;r--;){var i=o[r];void 0!==i[e]&&i[e].apply(i,n)}}}function d(){var e=k.prototype;for(var t in r)u(t)?"none"!==t&&(e[t]=l(t)):e[t]=h(t)}function p(e){return i[e]||new k(e)}function f(e){1===o.push(e)&&d()}function v(e){o=o.filter(function(t){return t!==e})}function g(){return[].concat(o)}function m(){o=[],function(){var e=k.prototype;for(var t in r)"none"!==t&&(e[t]=function(){})}()}function y(e,t){if(void 0!==r[e])throw Error('Log level "'+e+'" already exists.');if(isNaN(t))throw Error("Value must be a number.");r[e]=t,o.length>0?d():k.prototype[e]=function(){}}function b(e){if(void 0!==r[e]){if(u(e))throw Error('Built-in log level "'+e+'" cannot be removed.');delete r[e],delete k.prototype[e]}}function w(e){for(var t in s=e,i)i[t].setLevel(e)}function x(){return s}var k=function(){function e(e){var t=i[e];if(t)return t;i[e]=this,this.id=e,this.level=s}return e.prototype.debug=function(e){},e.prototype.info=function(e){},e.prototype.warn=function(e){},e.prototype.error=function(e){},e.prototype.setLevel=function(e){this.level=e},e.prototype.isDebugEnabled=function(){return this.level===r.debug},e}()},6:function(e,t,n){"use strict";n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"a",function(){return c}),n.d(t,"c",function(){return d});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};function i(e,t){var n=t&&t.split("/"),r=e.trim().split("/");if("."===r[0].charAt(0)&&n){var i=n.slice(0,n.length-1);r.unshift.apply(r,i)}return function(e){for(var t=0;t<e.length;++t){var n=e[t];if("."===n)e.splice(t,1),t-=1;else if(".."===n){if(0===t||1===t&&".."===e[2]||".."===e[t-1])continue;t>0&&(e.splice(t-1,2),t-=2)}}}(r),r.join("/")}function o(e,t){if(!e)return t;if(!t)return e;var n=e.match(/^([^/]*?:)\//),r=n&&n.length>0?n[1]:"",i=void 0;i=0===(e=e.substr(r.length)).indexOf("///")&&"file:"===r?"///":0===e.indexOf("//")?"//":0===e.indexOf("/")?"/":"";for(var o="/"===t.slice(-1)?"/":"",s=e.split("/"),a=t.split("/"),u=[],c=0,l=s.length;c<l;++c)if(".."===s[c])u.pop();else{if("."===s[c]||""===s[c])continue;u.push(s[c])}for(var h=0,d=a.length;h<d;++h)if(".."===a[h])u.pop();else{if("."===a[h]||""===a[h])continue;u.push(a[h])}return r+i+u.join("/")+o}var s=encodeURIComponent,a=function(e){return s(e).replace("%24","$")};function u(e,t,n){var i=[];if(null===t||void 0===t)return i;if(Array.isArray(t))for(var o=0,c=t.length;o<c;o++)if(n)i.push(a(e)+"="+s(t[o]));else{var l=e+"["+("object"===r(t[o])&&null!==t[o]?o:"")+"]";i=i.concat(u(l,t[o]))}else if("object"!==(void 0===t?"undefined":r(t))||n)i.push(a(e)+"="+s(t));else for(var h in t)i=i.concat(u(e+"["+h+"]",t[h]));return i}function c(e,t){for(var n=[],r=Object.keys(e||{}).sort(),i=0,o=r.length;i<o;i++){var s=r[i];n=n.concat(u(s,e[s],t))}return 0===n.length?"":n.join("&")}function l(e,t){return Array.isArray(e)?(e.push(t),e):void 0!==e?[e,t]:t}function h(e,t,n){for(var i=e,o=t.length-1,s=0;s<=o;s++){var a=""===t[s]?i.length:t[s];if(s<o){var u=i[a]&&"object"!==r(i[a])?[i[a]]:i[a];i=i[a]=u||(isNaN(t[s+1])?{}:[])}else i=i[a]=n}}function d(e){var t={};if(!e||"string"!=typeof e)return t;var n=e;"?"===n.charAt(0)&&(n=n.substr(1));for(var r=n.replace(/\+/g," ").split("&"),i=0;i<r.length;i++){var o=r[i].split("="),s=decodeURIComponent(o[0]);if(s){var a=s.split("]["),u=a.length-1;if(/\[/.test(a[0])&&/\]$/.test(a[u])?(a[u]=a[u].replace(/\]$/,""),u=(a=a.shift().split("[").concat(a)).length-1):u=0,o.length>=2){var c=o[1]?decodeURIComponent(o[1]):"";u?h(t,a,c):t[s]=l(t[s],c)}else t[s]=!0}}return t}},7:function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"c",function(){return a}),n.d(t,"a",function(){return u});var r=n(6),i=n(2),o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function(e,t){this.src=e,this.name=t},a=function(){function e(e){this.templateIsLoaded=!1,this.factoryIsReady=!1,this.resources=null,this.dependencies=null,this.address=e,this.onReady=null,this._template=null,this._factory=null}return e.prototype.addDependency=function(e,t){var n="string"==typeof e?Object(r.d)(e,this.address):i.a.get(e).moduleId;this.dependencies.push(new s(n,t))},o(e,[{key:"template",get:function(){return this._template},set:function(e){var t,n=this.address,i=void 0,o=void 0,a=void 0;this._template=e,this.templateIsLoaded=!0,t=e.content.querySelectorAll("require"),a=this.dependencies=new Array(t.length);for(var u=0,c=t.length;u<c;++u){if(!(o=(i=t[u]).getAttribute("from")))throw new Error("<require> element in "+n+' has no "from" attribute.');a[u]=new s(Object(r.d)(o,n),i.getAttribute("as")),i.parentNode&&i.parentNode.removeChild(i)}}},{key:"factory",get:function(){return this._factory},set:function(e){this._factory=e,this.factoryIsReady=!0}}]),e}(),u=function(){function e(){this.templateRegistry={}}return e.prototype.map=function(e,t){throw new Error("Loaders must implement map(id, source).")},e.prototype.normalizeSync=function(e,t){throw new Error("Loaders must implement normalizeSync(moduleId, relativeTo).")},e.prototype.normalize=function(e,t){throw new Error("Loaders must implement normalize(moduleId: string, relativeTo: string): Promise<string>.")},e.prototype.loadModule=function(e){throw new Error("Loaders must implement loadModule(id).")},e.prototype.loadAllModules=function(e){throw new Error("Loader must implement loadAllModules(ids).")},e.prototype.loadTemplate=function(e){throw new Error("Loader must implement loadTemplate(url).")},e.prototype.loadText=function(e){throw new Error("Loader must implement loadText(url).")},e.prototype.applyPluginToUrl=function(e,t){throw new Error("Loader must implement applyPluginToUrl(url, pluginName).")},e.prototype.addPlugin=function(e,t){throw new Error("Loader must implement addPlugin(pluginName, implementation).")},e.prototype.getOrCreateTemplateRegistryEntry=function(e){return this.templateRegistry[e]||(this.templateRegistry[e]=new a(e))},e}()},8:function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function o(e){return function(){var t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}var s=function(){function e(){var e=this;this.flushing=!1,this.longStacks=!1,this.microTaskQueue=[],this.microTaskQueueCapacity=1024,this.taskQueue=[],r.c.mutationObserver?this.requestFlushMicroTaskQueue=function(e){var t=r.b.createMutationObserver(e),n="a",i=r.b.createTextNode("a"),o=Object.create(null);return o.a="b",o.b="a",t.observe(i,{characterData:!0}),function(){i.data=n=o[n]}}(function(){return e.flushMicroTaskQueue()}):this.requestFlushMicroTaskQueue=o(function(){return e.flushMicroTaskQueue()}),this.requestFlushTaskQueue=o(function(){return e.flushTaskQueue()})}return e.prototype._flushQueue=function(e,t){var n=0,r=void 0;try{for(this.flushing=!0;n<e.length;)if(r=e[n],this.longStacks&&(this.stack="string"==typeof r.stack?r.stack:void 0),r.call(),++n>t){for(var o=0,s=e.length-n;o<s;o++)e[o]=e[o+n];e.length-=n,n=0}}catch(e){!function(e,t,n){n&&t.stack&&"object"===(void 0===e?"undefined":i(e))&&null!==e&&(e.stack=a(e.stack)+t.stack),"onError"in t?t.onError(e):setTimeout(function(){throw e},0)}(e,r,this.longStacks)}finally{this.flushing=!1}},e.prototype.queueMicroTask=function(e){this.microTaskQueue.length<1&&this.requestFlushMicroTaskQueue(),this.longStacks&&(e.stack=this.prepareQueueStack("\nEnqueued in MicroTaskQueue by:\n")),this.microTaskQueue.push(e)},e.prototype.queueTask=function(e){this.taskQueue.length<1&&this.requestFlushTaskQueue(),this.longStacks&&(e.stack=this.prepareQueueStack("\nEnqueued in TaskQueue by:\n")),this.taskQueue.push(e)},e.prototype.flushTaskQueue=function(){var e=this.taskQueue;this.taskQueue=[],this._flushQueue(e,Number.MAX_VALUE)},e.prototype.flushMicroTaskQueue=function(){var e=this.microTaskQueue;this._flushQueue(e,this.microTaskQueueCapacity),e.length=0},e.prototype.prepareQueueStack=function(e){var t=e+function(e){return e.replace(/^[\s\S]*?\bqueue(Micro)?Task\b[^\n]*\n/,"")}(function(){var e=new Error;if(e.stack)return e.stack;try{throw e}catch(e){return e.stack}}());return"string"==typeof this.stack&&(t=a(t)+this.stack),t},e}();function a(e){var t=e.lastIndexOf("flushMicroTaskQueue");return t<0&&(t=e.lastIndexOf("flushTaskQueue"))<0?e:(t=e.lastIndexOf("\n",t))<0?e:e.substr(0,t)}},9:function(e,t,n){"use strict";function r(e){throw new Error("History must implement "+e+"().")}n.d(t,"a",function(){return i});var i=function(){function e(){}return e.prototype.activate=function(e){r("activate")},e.prototype.deactivate=function(){r("deactivate")},e.prototype.getAbsoluteRoot=function(){r("getAbsoluteRoot")},e.prototype.navigate=function(e,t){r("navigate")},e.prototype.navigateBack=function(){r("navigateBack")},e.prototype.setTitle=function(e){r("setTitle")},e.prototype.setState=function(e,t){r("setState")},e.prototype.getState=function(e){r("getState")},e}()},app:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.isLoading=!0,this.progress=null}return e.prototype.start=function(){this.isLoading=!0},e.prototype.stop=function(){this.isLoading=!1},e.prototype.setProgress=function(){this.progress=40},e.prototype.clearProgress=function(){this.progress=null},e}();t.App=r},"app.html":function(e,t){e.exports='<template>\r\n    Aurelia Nano Bar\r\n    <nano-bar is-loading.bind="isLoading" progress.bind="progress"></nano-bar>\r\n    <button click.delegate="start()">\r\n        Start\r\n    </button>\r\n    <button click.delegate="stop()">\r\n        Complete\r\n    </button>\r\n    <button click.delegate="setProgress()">\r\n        Set Progress to 40%\r\n    </button>\r\n    <button click.delegate="clearProgress()">\r\n        Clear Progress\r\n    </button>\r\n</template>'},"aurelia-event-aggregator":function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"configure",function(){return u});var r=n(5).getLogger("event-aggregator"),i=function(){function e(e,t){this.messageType=e,this.callback=t}return e.prototype.handle=function(e){e instanceof this.messageType&&this.callback.call(null,e)},e}();function o(e,t,n){try{e(t,n)}catch(e){r.error(e)}}function s(e,t){try{e.handle(t)}catch(e){r.error(e)}}var a=function(){function e(){this.eventLookup={},this.messageHandlers=[]}return e.prototype.publish=function(e,t){var n=void 0,r=void 0;if(!e)throw new Error("Event was invalid.");if("string"==typeof e){if(n=this.eventLookup[e])for(r=(n=n.slice()).length;r--;)o(n[r],t,e)}else for(r=(n=this.messageHandlers.slice()).length;r--;)s(n[r],e)},e.prototype.subscribe=function(e,t){var n=void 0,r=void 0;if(!e)throw new Error("Event channel/type was invalid.");return"string"==typeof e?(n=t,r=this.eventLookup[e]||(this.eventLookup[e]=[])):(n=new i(e,t),r=this.messageHandlers),r.push(n),{dispose:function(){var e=r.indexOf(n);-1!==e&&r.splice(e,1)}}},e.prototype.subscribeOnce=function(e,t){var n=this.subscribe(e,function(e,r){return n.dispose(),t(e,r)});return n},e}();function u(e){e.instance(a,function(e){var t=new a;return e.subscribeOnce=function(e,n){return t.subscribeOnce(e,n)},e.subscribe=function(e,n){return t.subscribe(e,n)},e.publish=function(e,n){t.publish(e,n)},t}(e.aurelia))}},"aurelia-framework":function(e,t,n){"use strict";n.r(t),n.d(t,"Aurelia",function(){return p}),n.d(t,"FrameworkConfiguration",function(){return k}),n.d(t,"LogManager",function(){return C});var r=n(5),i=n(4),o=n(7),s=n(1),a=n(0),u=n(6);n.d(t,"resolver",function(){return i.z}),n.d(t,"StrategyResolver",function(){return i.k}),n.d(t,"Lazy",function(){return i.f}),n.d(t,"All",function(){return i.a}),n.d(t,"Optional",function(){return i.h}),n.d(t,"Parent",function(){return i.i}),n.d(t,"Factory",function(){return i.c}),n.d(t,"NewInstance",function(){return i.g}),n.d(t,"getDecoratorDependencies",function(){return i.q}),n.d(t,"lazy",function(){return i.u}),n.d(t,"all",function(){return i.n}),n.d(t,"optional",function(){return i.w}),n.d(t,"parent",function(){return i.x}),n.d(t,"factory",function(){return i.p}),n.d(t,"newInstance",function(){return i.v}),n.d(t,"invoker",function(){return i.t}),n.d(t,"invokeAsFactory",function(){return i.s}),n.d(t,"FactoryInvoker",function(){return i.d}),n.d(t,"registration",function(){return i.y}),n.d(t,"transient",function(){return i.B}),n.d(t,"singleton",function(){return i.A}),n.d(t,"TransientRegistration",function(){return i.l}),n.d(t,"SingletonRegistration",function(){return i.j}),n.d(t,"_emptyParameters",function(){return i.m}),n.d(t,"InvocationHandler",function(){return i.e}),n.d(t,"Container",function(){return i.b}),n.d(t,"autoinject",function(){return i.o}),n.d(t,"inject",function(){return i.r});var c=n(3);n.d(t,"getArrayObserver",function(){return c.rb}),n.d(t,"getMapObserver",function(){return c.ub}),n.d(t,"getSetObserver",function(){return c.vb}),n.d(t,"targetContext",function(){return c.Gb}),n.d(t,"sourceContext",function(){return c.Eb}),n.d(t,"camelCase",function(){return c.eb}),n.d(t,"createOverrideContext",function(){return c.kb}),n.d(t,"getContextFor",function(){return c.tb}),n.d(t,"createScopeForTest",function(){return c.lb}),n.d(t,"connectable",function(){return c.ib}),n.d(t,"enqueueBindingConnect",function(){return c.qb}),n.d(t,"subscriberCollection",function(){return c.Fb}),n.d(t,"ExpressionObserver",function(){return c.C}),n.d(t,"calcSplices",function(){return c.db}),n.d(t,"mergeSplice",function(){return c.xb}),n.d(t,"projectArraySplices",function(){return c.Bb}),n.d(t,"getChangeRecords",function(){return c.sb}),n.d(t,"ModifyCollectionObserver",function(){return c.K}),n.d(t,"CollectionLengthObserver",function(){return c.s}),n.d(t,"Expression",function(){return c.A}),n.d(t,"BindingBehavior",function(){return c.h}),n.d(t,"ValueConverter",function(){return c.Y}),n.d(t,"Assign",function(){return c.e}),n.d(t,"Conditional",function(){return c.u}),n.d(t,"AccessThis",function(){return c.d}),n.d(t,"AccessScope",function(){return c.c}),n.d(t,"AccessMember",function(){return c.b}),n.d(t,"AccessKeyed",function(){return c.a}),n.d(t,"CallScope",function(){return c.p}),n.d(t,"CallMember",function(){return c.o}),n.d(t,"CallFunction",function(){return c.n}),n.d(t,"Binary",function(){return c.f}),n.d(t,"Unary",function(){return c.V}),n.d(t,"LiteralPrimitive",function(){return c.H}),n.d(t,"LiteralString",function(){return c.I}),n.d(t,"LiteralTemplate",function(){return c.J}),n.d(t,"LiteralArray",function(){return c.F}),n.d(t,"LiteralObject",function(){return c.G}),n.d(t,"Unparser",function(){return c.W}),n.d(t,"ExpressionCloner",function(){return c.B}),n.d(t,"cloneExpression",function(){return c.fb}),n.d(t,"bindingMode",function(){return c.cb}),n.d(t,"Parser",function(){return c.O}),n.d(t,"ParserImplementation",function(){return c.P}),n.d(t,"delegationStrategy",function(){return c.ob}),n.d(t,"EventManager",function(){return c.y}),n.d(t,"EventSubscriber",function(){return c.z}),n.d(t,"DirtyChecker",function(){return c.x}),n.d(t,"DirtyCheckProperty",function(){return c.w}),n.d(t,"propertyAccessor",function(){return c.Cb}),n.d(t,"PrimitiveObserver",function(){return c.Q}),n.d(t,"SetterObserver",function(){return c.T}),n.d(t,"XLinkAttributeObserver",function(){return c.ab}),n.d(t,"dataAttributeAccessor",function(){return c.mb}),n.d(t,"DataAttributeObserver",function(){return c.v}),n.d(t,"StyleObserver",function(){return c.U}),n.d(t,"ValueAttributeObserver",function(){return c.X}),n.d(t,"CheckedObserver",function(){return c.q}),n.d(t,"SelectValueObserver",function(){return c.S}),n.d(t,"ClassObserver",function(){return c.r}),n.d(t,"hasDeclaredDependencies",function(){return c.wb}),n.d(t,"declarePropertyDependencies",function(){return c.nb}),n.d(t,"computedFrom",function(){return c.gb}),n.d(t,"ComputedExpression",function(){return c.t}),n.d(t,"createComputedObserver",function(){return c.jb}),n.d(t,"elements",function(){return c.pb}),n.d(t,"presentationElements",function(){return c.Ab}),n.d(t,"presentationAttributes",function(){return c.zb}),n.d(t,"SVGAnalyzer",function(){return c.R}),n.d(t,"ObserverLocator",function(){return c.N}),n.d(t,"ObjectObservationAdapter",function(){return c.M}),n.d(t,"BindingExpression",function(){return c.k}),n.d(t,"Binding",function(){return c.g}),n.d(t,"CallExpression",function(){return c.m}),n.d(t,"Call",function(){return c.l}),n.d(t,"ValueConverterResource",function(){return c.Z}),n.d(t,"valueConverter",function(){return c.Hb}),n.d(t,"BindingBehaviorResource",function(){return c.i}),n.d(t,"bindingBehavior",function(){return c.bb}),n.d(t,"ListenerExpression",function(){return c.E}),n.d(t,"Listener",function(){return c.D}),n.d(t,"NameExpression",function(){return c.L}),n.d(t,"BindingEngine",function(){return c.j}),n.d(t,"observable",function(){return c.yb}),n.d(t,"connectBindingToSignal",function(){return c.hb}),n.d(t,"signalBindings",function(){return c.Db});var l=n(2);n.d(t,"metadata",function(){return l.d}),n.d(t,"Origin",function(){return l.a}),n.d(t,"decorators",function(){return l.b}),n.d(t,"deprecated",function(){return l.c}),n.d(t,"mixin",function(){return l.e}),n.d(t,"protocol",function(){return l.f}),n.d(t,"animationEvent",function(){return s.Q}),n.d(t,"Animator",function(){return s.a}),n.d(t,"CompositionTransactionNotifier",function(){return s.i}),n.d(t,"CompositionTransactionOwnershipToken",function(){return s.j}),n.d(t,"CompositionTransaction",function(){return s.h}),n.d(t,"_hyphenate",function(){return s.O}),n.d(t,"_isAllWhitespace",function(){return s.P}),n.d(t,"ViewEngineHooksResource",function(){return s.J}),n.d(t,"viewEngineHooks",function(){return s.lb}),n.d(t,"ElementEvents",function(){return s.n}),n.d(t,"ResourceLoadContext",function(){return s.v}),n.d(t,"ViewCompileInstruction",function(){return s.G}),n.d(t,"BehaviorInstruction",function(){return s.b}),n.d(t,"TargetInstruction",function(){return s.C}),n.d(t,"viewStrategy",function(){return s.nb}),n.d(t,"RelativeViewStrategy",function(){return s.t}),n.d(t,"ConventionalViewStrategy",function(){return s.l}),n.d(t,"NoViewStrategy",function(){return s.r}),n.d(t,"TemplateRegistryViewStrategy",function(){return s.D}),n.d(t,"InlineViewStrategy",function(){return s.p}),n.d(t,"StaticViewStrategy",function(){return s.A}),n.d(t,"ViewLocator",function(){return s.L}),n.d(t,"BindingLanguage",function(){return s.e}),n.d(t,"SlotCustomAttribute",function(){return s.z}),n.d(t,"PassThroughSlot",function(){return s.s}),n.d(t,"ShadowSlot",function(){return s.y}),n.d(t,"ShadowDOM",function(){return s.x}),n.d(t,"validateBehaviorName",function(){return s.jb}),n.d(t,"ViewResources",function(){return s.M}),n.d(t,"View",function(){return s.F}),n.d(t,"ViewSlot",function(){return s.N}),n.d(t,"BoundViewFactory",function(){return s.f}),n.d(t,"ViewFactory",function(){return s.K}),n.d(t,"ViewCompiler",function(){return s.H}),n.d(t,"ResourceModule",function(){return s.w}),n.d(t,"ResourceDescription",function(){return s.u}),n.d(t,"ModuleAnalyzer",function(){return s.q}),n.d(t,"ViewEngine",function(){return s.I}),n.d(t,"Controller",function(){return s.k}),n.d(t,"BehaviorPropertyObserver",function(){return s.c}),n.d(t,"BindableProperty",function(){return s.d}),n.d(t,"HtmlBehaviorResource",function(){return s.o}),n.d(t,"children",function(){return s.U}),n.d(t,"child",function(){return s.T}),n.d(t,"SwapStrategies",function(){return s.B}),n.d(t,"CompositionEngine",function(){return s.g}),n.d(t,"ElementConfigResource",function(){return s.m}),n.d(t,"resource",function(){return s.eb}),n.d(t,"behavior",function(){return s.R}),n.d(t,"customElement",function(){return s.X}),n.d(t,"customAttribute",function(){return s.W}),n.d(t,"templateController",function(){return s.fb}),n.d(t,"bindable",function(){return s.S}),n.d(t,"dynamicOptions",function(){return s.Y}),n.d(t,"useShadowDOM",function(){return s.gb}),n.d(t,"processAttributes",function(){return s.cb}),n.d(t,"processContent",function(){return s.db}),n.d(t,"containerless",function(){return s.V}),n.d(t,"useViewStrategy",function(){return s.ib}),n.d(t,"useView",function(){return s.hb}),n.d(t,"inlineView",function(){return s.ab}),n.d(t,"noView",function(){return s.bb}),n.d(t,"view",function(){return s.kb}),n.d(t,"elementConfig",function(){return s.Z}),n.d(t,"viewResources",function(){return s.mb}),n.d(t,"TemplatingEngine",function(){return s.E}),n.d(t,"TemplateDependency",function(){return o.b}),n.d(t,"TemplateRegistryEntry",function(){return o.c}),n.d(t,"Loader",function(){return o.a});var h=n(8);n.d(t,"TaskQueue",function(){return h.a}),n.d(t,"relativeToFile",function(){return u.d}),n.d(t,"join",function(){return u.b}),n.d(t,"buildQueryString",function(){return u.a}),n.d(t,"parseQueryString",function(){return u.c}),n.d(t,"AggregateError",function(){return a.a}),n.d(t,"FEATURE",function(){return a.c}),n.d(t,"PLATFORM",function(){return a.d}),n.d(t,"DOM",function(){return a.b}),n.d(t,"isInitialized",function(){return a.f}),n.d(t,"initializePAL",function(){return a.e}),n.d(t,"reset",function(){return a.g});var d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var p=function(){function e(t,n,u){this.loader=t||new a.d.Loader,this.container=n||(new i.b).makeGlobal(),this.resources=u||new s.M,this.use=new k(this),this.logger=r.getLogger("aurelia"),this.hostConfigured=!1,this.host=null,this.use.instance(e,this),this.use.instance(o.a,this.loader),this.use.instance(s.M,this.resources)}return e.prototype.start=function(){var e=this;return this._started?this._started:(this.logger.info("Aurelia Starting"),this._started=this.use.apply().then(function(){if(a.b.addEventListener("submit",function(e){var t=e.target,n=t.action;"form"!==t.tagName.toLowerCase()||n||e.preventDefault()}),!e.container.hasResolver(s.e)){var t="You must configure Aurelia with a BindingLanguage implementation.";throw e.logger.error(t),new Error(t)}e.logger.info("Aurelia Started");var n=a.b.createCustomEvent("aurelia-started",{bubbles:!0,cancelable:!0});return a.b.dispatchEvent(n),e}))},e.prototype.enhance=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this._configureHost(n||a.b.querySelectorAll("body")[0]),new Promise(function(n){var r=e.container.get(s.E);e.root=r.enhance({container:e.container,element:e.host,resources:e.resources,bindingContext:t}),e.root.attached(),e._onAureliaComposed(),n(e)})},e.prototype.setRoot=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r={};this.root&&this.root.viewModel&&this.root.viewModel.router&&(this.root.viewModel.router.deactivate(),this.root.viewModel.router.reset()),this._configureHost(n);var i=this.container.get(s.E);return delete this.container.get(s.h).initialComposition,t||(t=this.configModuleId?Object(u.d)("./app",this.configModuleId):"app"),r.viewModel=t,r.container=r.childContainer=this.container,r.viewSlot=this.hostSlot,r.host=this.host,i.compose(r).then(function(t){return e.root=t,r.viewSlot.attached(),e._onAureliaComposed(),e})},e.prototype._configureHost=function(e){if(!this.hostConfigured){if(e=e||this.host,this.host=e&&"string"!=typeof e?e:a.b.getElementById(e||"applicationHost"),!this.host)throw new Error("No applicationHost was specified.");this.hostConfigured=!0,this.host.aurelia=this,this.hostSlot=new s.N(this.host,!0),this.hostSlot.transformChildNodesIntoView(),this.container.registerInstance(a.b.boundary,this.host)}},e.prototype._onAureliaComposed=function(){var e=a.b.createCustomEvent("aurelia-composed",{bubbles:!0,cancelable:!0});setTimeout(function(){return a.b.dispatchEvent(e)},1)},e}(),f=r.getLogger("aurelia"),v=/\.[^/.]+$/;function g(e,t){var n=void 0;return function r(){return(n=t.shift())?Promise.resolve(n(e)).then(r):Promise.resolve()}()}function m(e,t,n){if(0===Object.keys(t).length)return Promise.resolve();var r=e.container.get(s.I);return Promise.all(Object.keys(t).map(function(n){return function(t){var n=t.moduleId,r=y(n);i(n)&&(n=o(n));return e.loader.normalize(n,t.relativeTo).then(function(e){return{name:t.moduleId,importId:i(t.moduleId)?function(e,t){return o(e)+"."+t}(e,r):e}})}(t[n])})).then(function(e){var t=[],i=[];return e.forEach(function(e){t.push(void 0),i.push(e.importId)}),r.importViewResources(i,t,n)});function i(e){var t=y(e);return!!t&&(""!==t&&(".js"!==t&&".ts"!==t))}function o(e){return e.replace(v,"")}}function y(e){var t=e.match(v);if(t&&t.length>0)return t[0].split(".")[1]}function b(e){return Promise.all(e.behaviorsToLoad.map(function(t){return t.load(e.container,t.target)})).then(function(){e.behaviorsToLoad=null})}function w(e){if(e.processed)throw new Error("This config instance has already been applied. To load more plugins or global resources, create a new FrameworkConfiguration instance.")}function x(e,t){return"Invalid "+t+" ["+e+"], "+t+" must be specified as functions or relative module IDs."}var k=function(){function e(e){var t=this;this.aurelia=e,this.container=e.container,this.info=[],this.processed=!1,this.preTasks=[],this.postTasks=[],this.behaviorsToLoad=[],this.configuredPlugins=[],this.resourcesToLoad={},this.preTask(function(){return e.loader.normalize("aurelia-bootstrapper").then(function(e){return t.bootstrapperName=e})}),this.postTask(function(){return m(e,t.resourcesToLoad,e.resources)})}return e.prototype.instance=function(e,t){return this.container.registerInstance(e,t),this},e.prototype.singleton=function(e,t){return this.container.registerSingleton(e,t),this},e.prototype.transient=function(e,t){return this.container.registerTransient(e,t),this},e.prototype.preTask=function(e){return w(this),this.preTasks.push(e),this},e.prototype.postTask=function(e){return w(this),this.postTasks.push(e),this},e.prototype.feature=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};switch(void 0===e?"undefined":d(e)){case"string":var n=/\/index$/i.test(e),r=n||y(e)?e:e+"/index",i=n?e.substr(0,e.length-6):e;this.info.push({moduleId:r,resourcesRelativeTo:[i,""],config:t});break;case"function":this.info.push({configure:e,config:t||{}});break;default:throw new Error(x(e,"feature"))}return this},e.prototype.globalResources=function(e){var t=this;w(this);for(var n=Array.isArray(e)?e:arguments,r=void 0,i=this.resourcesRelativeTo||["",""],o=0,a=n.length;o<a;++o)switch(void 0===(r=n[o])?"undefined":d(r)){case"string":var c=i[0],l=i[1],h=r;(r.startsWith("./")||r.startsWith("../"))&&""!==c&&(h=Object(u.b)(c,r)),this.resourcesToLoad[h]={moduleId:h,relativeTo:l};break;case"function":var p=this.aurelia.resources.autoRegister(this.container,r);p instanceof s.o&&null!==p.elementName&&1===this.behaviorsToLoad.push(p)&&this.postTask(function(){return b(t)});break;default:throw new Error(x(r,"resource"))}return this},e.prototype.globalName=function(e,t){return w(this),this.resourcesToLoad[e]={moduleId:t,relativeTo:""},this},e.prototype.plugin=function(e,t){w(this);var n=void 0;switch(void 0===e?"undefined":d(e)){case"string":n={moduleId:e,resourcesRelativeTo:[e,""],config:t||{}};break;case"function":n={configure:e,config:t||{}};break;default:throw new Error(x(e,"plugin"))}return this.info.push(n),this},e.prototype._addNormalizedPlugin=function(e,t){var n=this,r={moduleId:e,resourcesRelativeTo:[e,""],config:t||{}};return this.info.push(r),this.preTask(function(){var t=[e,n.bootstrapperName];return r.moduleId=e,r.resourcesRelativeTo=t,Promise.resolve()}),this},e.prototype.defaultBindingLanguage=function(){return this._addNormalizedPlugin("aurelia-templating-binding")},e.prototype.router=function(){return this._addNormalizedPlugin("aurelia-templating-router")},e.prototype.history=function(){return this._addNormalizedPlugin("aurelia-history-browser")},e.prototype.defaultResources=function(){return this._addNormalizedPlugin("aurelia-templating-resources")},e.prototype.eventAggregator=function(){return this._addNormalizedPlugin("aurelia-event-aggregator")},e.prototype.basicConfiguration=function(){return this.defaultBindingLanguage().defaultResources().eventAggregator()},e.prototype.standardConfiguration=function(){return this.basicConfiguration().history().router()},e.prototype.developmentLogging=function(e){var t=this,n=e?r.logLevel[e]:void 0;return void 0===n&&(n=r.logLevel.debug),this.preTask(function(){return t.aurelia.loader.normalize("aurelia-logging-console",t.bootstrapperName).then(function(e){return t.aurelia.loader.loadModule(e).then(function(e){r.addAppender(new e.ConsoleAppender),r.setLevel(n)})})}),this},e.prototype.apply=function(){var e=this;return this.processed?Promise.resolve():g(this,this.preTasks).then(function(){var t=e.aurelia.loader,n=e.info,r=void 0;return function i(){return(r=n.shift())?function(e,t,n){if(f.debug("Loading plugin "+n.moduleId+"."),"string"==typeof n.moduleId){e.resourcesRelativeTo=n.resourcesRelativeTo;var r=n.moduleId;return n.resourcesRelativeTo.length>1?t.normalize(n.moduleId,n.resourcesRelativeTo[1]).then(function(e){return i(e)}):i(r)}if("function"==typeof n.configure)return-1!==e.configuredPlugins.indexOf(n.configure)?Promise.resolve():(e.configuredPlugins.push(n.configure),Promise.resolve(n.configure.call(null,e,n.config||{})));throw new Error(x(n.moduleId||n.configure,"plugin"));function i(r){return t.loadModule(r).then(function(t){if("configure"in t)return-1!==e.configuredPlugins.indexOf(t.configure)?Promise.resolve():Promise.resolve(t.configure(e,n.config||{})).then(function(){e.configuredPlugins.push(t.configure),e.resourcesRelativeTo=null,f.debug("Configured plugin "+n.moduleId+".")});e.resourcesRelativeTo=null,f.debug("Loaded plugin "+n.moduleId+".")})}}(e,t,r).then(i):(e.processed=!0,e.configuredPlugins=null,Promise.resolve())}().then(function(){return g(e,e.postTasks)})})},e}(),C=r},"aurelia-history-browser":function(e,t,n){"use strict";n.d(t,"configure",function(){return h});var r,i,o=n(0),s=n(9);function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var c=function(){function e(){}return e.prototype.activate=function(e){},e.prototype.deactivate=function(){},e}(),l=function(e){function t(){var n=a(this,e.call(this));return n.handler=function(e){var r=t.getEventInfo(e),i=r.shouldHandleEvent,o=r.href;i&&(e.preventDefault(),n.history.navigate(o))},n}return u(t,e),t.prototype.activate=function(e){e._hasPushState&&(this.history=e,o.b.addEventListener("click",this.handler,!0))},t.prototype.deactivate=function(){o.b.removeEventListener("click",this.handler)},t.getEventInfo=function(e){var n={shouldHandleEvent:!1,href:null,anchor:null},r=t.findClosestAnchor(e.target);if(!r||!t.targetIsThisWindow(r))return n;if(r.hasAttribute("download")||r.hasAttribute("router-ignore"))return n;if(e.altKey||e.ctrlKey||e.metaKey||e.shiftKey)return n;var i=r.getAttribute("href");n.anchor=r,n.href=i;var o=1===e.which,s=i&&!("#"===i.charAt(0)||/^[a-z]+:/i.test(i));return n.shouldHandleEvent=o&&s,n},t.findClosestAnchor=function(e){for(;e;){if("A"===e.tagName)return e;e=e.parentNode}},t.targetIsThisWindow=function(e){var t=e.getAttribute("target"),n=o.d.global;return!t||t===n.name||"_self"===t},t}(c);function h(e){e.singleton(s.a,d),e.transient(c,l)}var d=(i=r=function(e){function t(t){var n=a(this,e.call(this));return n._isActive=!1,n._checkUrlCallback=n._checkUrl.bind(n),n.location=o.d.location,n.history=o.d.history,n.linkHandler=t,n}return u(t,e),t.prototype.activate=function(e){if(this._isActive)throw new Error("History has already been activated.");var t=!!e.pushState;this._isActive=!0,this.options=Object.assign({},{root:"/"},this.options,e),this.root=("/"+this.options.root+"/").replace(f,"/"),this._wantsHashChange=!1!==this.options.hashChange,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var n=void 0;if(this._hasPushState?n="popstate":this._wantsHashChange&&(n="hashchange"),o.d.addEventListener(n,this._checkUrlCallback),this._wantsHashChange&&t){var r=this.location,i=r.pathname.replace(/[^\/]$/,"$&/")===this.root;if(!this._hasPushState&&!i)return this.fragment=this._getFragment(null,!0),this.location.replace(this.root+this.location.search+"#"+this.fragment),!0;this._hasPushState&&i&&r.hash&&(this.fragment=this._getHash().replace(p,""),this.history.replaceState({},o.b.title,this.root+this.fragment+r.search))}if(this.fragment||(this.fragment=this._getFragment()),this.linkHandler.activate(this),!this.options.silent)return this._loadUrl()},t.prototype.deactivate=function(){o.d.removeEventListener("popstate",this._checkUrlCallback),o.d.removeEventListener("hashchange",this._checkUrlCallback),this._isActive=!1,this.linkHandler.deactivate()},t.prototype.getAbsoluteRoot=function(){return""+function(e,t,n){return e+"//"+t+(n?":"+n:"")}(this.location.protocol,this.location.hostname,this.location.port)+this.root},t.prototype.navigate=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.trigger,r=void 0===n||n,i=t.replace,s=void 0!==i&&i;if(e&&g.test(e))return this.location.href=e,!0;if(!this._isActive)return!1;if(e=this._getFragment(e||""),this.fragment===e&&!s)return!1;this.fragment=e;var a=this.root+e;return""===e&&"/"!==a&&(a=a.slice(0,-1)),this._hasPushState?(a=a.replace("//","/"),this.history[s?"replaceState":"pushState"]({},o.b.title,a)):this._wantsHashChange?function(e,t,n){if(n){var r=e.href.replace(/(javascript:|#).*$/,"");e.replace(r+"#"+t)}else e.hash="#"+t}(this.location,e,s):this.location.assign(a),!r||this._loadUrl(e)},t.prototype.navigateBack=function(){this.history.back()},t.prototype.setTitle=function(e){o.b.title=e},t.prototype.setState=function(e,t){var n=Object.assign({},this.history.state),r=this.location,i=r.pathname,o=r.search,s=r.hash;n[e]=t,this.history.replaceState(n,null,""+i+o+s)},t.prototype.getState=function(e){return Object.assign({},this.history.state)[e]},t.prototype._getHash=function(){return this.location.hash.substr(1)},t.prototype._getFragment=function(e,t){var n=void 0;return e||(this._hasPushState||!this._wantsHashChange||t?(e=this.location.pathname+this.location.search,n=this.root.replace(v,""),e.indexOf(n)||(e=e.substr(n.length))):e=this._getHash()),"/"+e.replace(p,"")},t.prototype._checkUrl=function(){this._getFragment()!==this.fragment&&this._loadUrl()},t.prototype._loadUrl=function(e){var t=this.fragment=this._getFragment(e);return!!this.options.routeHandler&&this.options.routeHandler(t)},t}(s.a),r.inject=[c],i),p=/^#?\/*|\s+$/g,f=/^\/+|\/+$/g,v=/\/$/,g=/^([a-z][a-z0-9+\-.]*:)?\/\//i},"aurelia-logging-console":function(e,t,n){"use strict";n.d(t,"ConsoleAppender",function(){return r});n(5);var r=function(){function e(){}return e.prototype.debug=function(e){for(var t,n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(t=console).debug.apply(t,["DEBUG ["+e.id+"]"].concat(r))},e.prototype.info=function(e){for(var t,n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(t=console).info.apply(t,["INFO ["+e.id+"]"].concat(r))},e.prototype.warn=function(e){for(var t,n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(t=console).warn.apply(t,["WARN ["+e.id+"]"].concat(r))},e.prototype.error=function(e){for(var t,n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(t=console).error.apply(t,["ERROR ["+e.id+"]"].concat(r))},e}()},"aurelia-nano-bar":function(e,t,n){"use strict";n.r(t),n.d(t,"configure",function(){return r});n("aurelia-framework");function r(e){e.globalResources(["./nano-bar"])}},"aurelia-nano-bar/nano-bar":function(e,t,n){"use strict";n.r(t),n.d(t,"NanoBarCustomElement",function(){return c});var r,i=n("aurelia-framework"),o=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s},s=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},a=function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function s(e){try{u(r.next(e))}catch(e){o(e)}}function a(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(s,a)}u((r=r.apply(e,t||[])).next())})},u=function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},c=function(){function e(e){this.element=e,this.isLoading=!1,this.progress=null,this._progress=0,this._position="fixed",this._height=2,this._transitionFunction=r.instant}return e.prototype.bind=function(){if("boolean"!=typeof this.isLoading)throw new Error("is-loading is not bound properly to a boolean value; did you forget to call .bind?");if(null!==this.progress&&"number"!=typeof this.progress)throw new Error("progress is not bound properly to a number or null; did you forget to call .bind?")},e.prototype.attached=function(){return a(this,void 0,void 0,function(){return u(this,function(e){return this.intializePosition(),this.isLoading&&this.start(),[2]})})},e.prototype.intializePosition=function(){this.element.parentElement&&"body"!==this.element.parentElement.nodeName.toLowerCase()&&(this._position="relative")},e.prototype.isLoadingChanged=function(e,t){e&&(100===this._progress&&(this._progress=0),this.start()),t&&!e&&this.complete()},e.prototype.progressChanged=function(e){"number"==typeof e?(clearInterval(this.incTimer),this._progress=e):this._progress=0},e.prototype.start=function(){var e=this;this._height=2,setTimeout(function(){e._transitionFunction=r.ease,null===e.progress&&(e._progress=5),e.incTimer=setInterval(function(){return e.autoincrement()},500)},100)},e.prototype.complete=function(){var e=this;this.incTimer&&clearInterval(this.incTimer),this._progress=100,setTimeout(function(){e._height=0,setTimeout(function(){e._transitionFunction=r.instant,e._progress=0},300)},300)},e.prototype.autoincrement=function(){this._progress>90||(this._progress=this._progress+this.randomIntRange(1,10))},e.prototype.randomIntRange=function(e,t){return Math.floor(Math.random()*(t-e+1)+e)},e.prototype.detached=function(){this.incTimer&&clearInterval(this.incTimer)},o([i.bindable,s("design:type",Boolean)],e.prototype,"isLoading",void 0),o([i.bindable,s("design:type",Object)],e.prototype,"progress",void 0),e=o([i.autoinject,s("design:paramtypes",[Element])],e)}();!function(e){e.instant="all 0ms linear",e.ease="all 200ms ease"}(r||(r={}))},"aurelia-nano-bar/nano-bar.css":function(e,t,n){(e.exports=n(16)(!1)).push([e.i,".nanobar {\n    width: 100%;\n    background-color: #33C3F0;\n    z-index: 1001;\n    height: 2px;\n    position: fixed;\n    top: 0;\n    left: 0;\n}\n\n.nanobar__tip {\n    width: 100px;\n    height: 100%;\n    box-shadow: 0 0 10px #33C3F0, 0 0 5px #33C3F0;\n    position: absolute;\n    right: 0;\n    transform: rotate(3deg) translate(0px, -4px);\n}",""])},"aurelia-nano-bar/nano-bar.html":function(e,t,n){e.exports='<template>\n    <require from="./nano-bar.css"></require>\n    <div class="nanobar" role="progressbar" \n        css="transform: translate3d(-${100 - _progress}%, 0, 0); height: ${_height}px; position: ${_position}; transition: ${_transitionFunction};">\n        <div class="nanobar__tip"></div>\n    </div>\n</template>'},"aurelia-pal-browser":function(e,t,n){"use strict";n.r(t),n.d(t,"_PLATFORM",function(){return o}),n.d(t,"_FEATURE",function(){return S}),n.d(t,"_DOM",function(){return T}),n.d(t,"initialize",function(){return j});var r=n(0),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o={location:window.location,history:window.history,addEventListener:function(e,t,n){this.global.addEventListener(e,t,n)},removeEventListener:function(e,t,n){this.global.removeEventListener(e,t,n)},performance:window.performance,requestAnimationFrame:function(e){return this.global.requestAnimationFrame(e)}};if("undefined"==typeof FEATURE_NO_IE){void 0===function(){}.name&&Object.defineProperty(Function.prototype,"name",{get:function(){var e=this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];return Object.defineProperty(this,"name",{value:e}),e}})}if("undefined"==typeof FEATURE_NO_IE)if("classList"in document.createElement("_")&&(!document.createElementNS||"classList"in document.createElementNS("http://www.w3.org/2000/svg","g"))){var s=document.createElement("_");if(s.classList.add("c1","c2"),!s.classList.contains("c2")){var a=function(e){var t=DOMTokenList.prototype[e];DOMTokenList.prototype[e]=function(e){for(var n=0,r=arguments.length;n<r;++n)e=arguments[n],t.call(this,e)}};a("add"),a("remove")}if(s.classList.toggle("c3",!1),s.classList.contains("c3")){var u=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(e,t){return 1 in arguments&&!this.contains(e)==!t?t:u.call(this,e)}}s=null}else{var c=String.prototype.trim,l=Array.prototype.indexOf,h=[],d=function(e,t){this.name=e,this.code=DOMException[e],this.message=t},p=function(e,t){if(""===t)throw new d("SYNTAX_ERR","An invalid or illegal string was specified");if(/\s/.test(t))throw new d("INVALID_CHARACTER_ERR","String contains an invalid character");return l.call(e,t)},f=function(e){for(var t=c.call(e.getAttribute("class")||""),n=t?t.split(/\s+/):h,r=0,i=n.length;r<i;++r)this.push(n[r]);this._updateClassName=function(){e.setAttribute("class",this.toString())}},v=f.prototype=[];d.prototype=Error.prototype,v.item=function(e){return this[e]||null},v.contains=function(e){return-1!==p(this,e+="")},v.add=function(){var e=arguments,t=0,n=e.length,r=void 0,i=!1;do{r=e[t]+"",-1===p(this,r)&&(this.push(r),i=!0)}while(++t<n);i&&this._updateClassName()},v.remove=function(){var e=arguments,t=0,n=e.length,r=void 0,i=!1,o=void 0;do{for(r=e[t]+"",o=p(this,r);-1!==o;)this.splice(o,1),i=!0,o=p(this,r)}while(++t<n);i&&this._updateClassName()},v.toggle=function(e,t){e+="";var n=this.contains(e),r=n?!0!==t&&"remove":!1!==t&&"add";return r&&this[r](e),!0===t||!1===t?t:!n},v.toString=function(){return this.join(" ")},Object.defineProperty(Element.prototype,"classList",{get:function(){return new f(this)},enumerable:!0,configurable:!0})}if("undefined"==typeof FEATURE_NO_IE){var g=function(e,t){for(var n=0,r=b.length,i=[];n<r;n++)b[n][e]==t&&i.push(b[n]);return i},m=function(e,t){for(var n,r=b.length;r--;)(n=b[r]).entryType!=e||void 0!==t&&n.name!=t||b.splice(r,1)};if(
// @license http://opensource.org/licenses/MIT
"performance"in window==!1&&(window.performance={}),"now"in window.performance==!1){var y=Date.now();performance.timing&&performance.timing.navigationStart&&(y=performance.timing.navigationStart),window.performance.now=function(){return Date.now()-y}}Date.now?Date.now():new Date;var b=[],w={};window.performance.mark||(window.performance.mark=window.performance.webkitMark||function(e){var t={name:e,entryType:"mark",startTime:window.performance.now(),duration:0};b.push(t),w[e]=t}),window.performance.measure||(window.performance.measure=window.performance.webkitMeasure||function(e,t,n){t=w[t].startTime,n=w[n].startTime,b.push({name:e,entryType:"measure",startTime:t,duration:n-t})}),window.performance.getEntriesByType||(window.performance.getEntriesByType=window.performance.webkitGetEntriesByType||function(e){return g("entryType",e)}),window.performance.getEntriesByName||(window.performance.getEntriesByName=window.performance.webkitGetEntriesByName||function(e){return g("name",e)}),window.performance.clearMarks||(window.performance.clearMarks=window.performance.webkitClearMarks||function(e){m("mark",e)}),window.performance.clearMeasures||(window.performance.clearMeasures=window.performance.webkitClearMeasures||function(e){m("measure",e)}),o.performance=window.performance}if("undefined"==typeof FEATURE_NO_IE){var x=window.console=window.console||{},k=function(){};x.memory||(x.memory={}),"assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(",").forEach(function(e){x[e]||(x[e]=k)}),"object"===i(x.log)&&"log,info,warn,error,assert,dir,clear,profile,profileEnd".split(",").forEach(function(e){console[e]=this.bind(console[e],console)},Function.prototype.call)}if("undefined"==typeof FEATURE_NO_IE&&(!window.CustomEvent||"function"!=typeof window.CustomEvent)){var C=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n};C.prototype=window.Event.prototype,window.CustomEvent=C}if(Element&&!Element.prototype.matches){var _=Element.prototype;_.matches=_.matchesSelector||_.mozMatchesSelector||_.msMatchesSelector||_.oMatchesSelector||_.webkitMatchesSelector}var S={shadowDOM:!!HTMLElement.prototype.attachShadow,scopedCSS:"scoped"in document.createElement("style"),htmlTemplateElement:function(){var e=document.createElement("div");return e.innerHTML="<template></template>","content"in e.children[0]}(),mutationObserver:!(!window.MutationObserver&&!window.WebKitMutationObserver),ensureHTMLTemplateElement:function(e){return e}};if("undefined"==typeof FEATURE_NO_IE){var O=function(e){return"template"===e.tagName&&"http://www.w3.org/2000/svg"===e.namespaceURI},E=function(e){var t=e.ownerDocument.createElement("template"),n=e.attributes,r=n.length,i=void 0;for(e.parentNode.insertBefore(t,e);r-- >0;)i=n[r],t.setAttribute(i.name,i.value),e.removeAttribute(i.name);return e.parentNode.removeChild(e),A(t)},A=function(e){for(var t=e.content=document.createDocumentFragment(),n=void 0;n=e.firstChild;)t.appendChild(n);return e};S.htmlTemplateElement||(S.ensureHTMLTemplateElement=function(e){for(var t=A(e).content.querySelectorAll("template"),n=0,r=t.length;n<r;++n){var i=t[n];O(i)?E(i):A(i)}return e})}var P=window.ShadowDOMPolyfill||null,T={Element:Element,NodeList:NodeList,SVGElement:SVGElement,boundary:"aurelia-dom-boundary",addEventListener:function(e,t,n){document.addEventListener(e,t,n)},removeEventListener:function(e,t,n){document.removeEventListener(e,t,n)},adoptNode:function(e){return document.adoptNode(e)},createAttribute:function(e){return document.createAttribute(e)},createElement:function(e){return document.createElement(e)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},createDocumentFragment:function(){return document.createDocumentFragment()},createTemplateElement:function(){var e=document.createElement("template");return S.ensureHTMLTemplateElement(e)},createMutationObserver:function(e){return new(window.MutationObserver||window.WebKitMutationObserver)(e)},createCustomEvent:function(e,t){return new window.CustomEvent(e,t)},dispatchEvent:function(e){document.dispatchEvent(e)},getComputedStyle:function(e){return window.getComputedStyle(e)},getElementById:function(e){return document.getElementById(e)},querySelector:function(e){return document.querySelector(e)},querySelectorAll:function(e){return document.querySelectorAll(e)},nextElementSibling:function(e){if(e.nextElementSibling)return e.nextElementSibling;do{e=e.nextSibling}while(e&&1!==e.nodeType);return e},createTemplateFromMarkup:function(e){var t=document.createElement("div");t.innerHTML=e;var n=t.firstElementChild;if(!n||"TEMPLATE"!==n.nodeName)throw new Error("Template markup must be wrapped in a <template> element e.g. <template> \x3c!-- markup here --\x3e </template>");return S.ensureHTMLTemplateElement(n)},appendNode:function(e,t){(t||document.body).appendChild(e)},replaceNode:function(e,t,n){t.parentNode?t.parentNode.replaceChild(e,t):null!==P?P.unwrap(n).replaceChild(P.unwrap(e),P.unwrap(t)):n.replaceChild(e,t)},removeNode:function(e,t){e.parentNode?e.parentNode.removeChild(e):t&&(null!==P?P.unwrap(t).removeChild(P.unwrap(e)):t.removeChild(e))},injectStyles:function(e,t,n,r){if(r){var i=document.getElementById(r);if(i){if("style"===i.tagName.toLowerCase())return void(i.innerHTML=e);throw new Error("The provided id does not indicate a style tag.")}}var o=document.createElement("style");return o.innerHTML=e,o.type="text/css",r&&(o.id=r),t=t||document.head,n&&t.childNodes.length>0?t.insertBefore(o,t.childNodes[0]):t.appendChild(o),o}};function j(){r.f||Object(r.e)(function(e,t,n){Object.assign(e,o),Object.assign(t,S),Object.assign(n,T),Object.defineProperty(n,"title",{get:function(){return document.title},set:function(e){document.title=e}}),Object.defineProperty(n,"activeElement",{get:function(){return document.activeElement}}),Object.defineProperty(e,"XMLHttpRequest",{get:function(){return e.global.XMLHttpRequest}})})}},"aurelia-templating-binding":function(e,t,n){"use strict";n.d(t,"configure",function(){return x});var r,i,o,s,a,u,c,l=n(5),h=n(3),d=n(1);var p=(i=r=function(){function e(e){this.elements=Object.create(null),this.allElements=Object.create(null),this.svg=e,this.registerUniversal("accesskey","accessKey"),this.registerUniversal("contenteditable","contentEditable"),this.registerUniversal("tabindex","tabIndex"),this.registerUniversal("textcontent","textContent"),this.registerUniversal("innerhtml","innerHTML"),this.registerUniversal("scrolltop","scrollTop"),this.registerUniversal("scrollleft","scrollLeft"),this.registerUniversal("readonly","readOnly"),this.register("label","for","htmlFor"),this.register("img","usemap","useMap"),this.register("input","maxlength","maxLength"),this.register("input","minlength","minLength"),this.register("input","formaction","formAction"),this.register("input","formenctype","formEncType"),this.register("input","formmethod","formMethod"),this.register("input","formnovalidate","formNoValidate"),this.register("input","formtarget","formTarget"),this.register("textarea","maxlength","maxLength"),this.register("td","rowspan","rowSpan"),this.register("td","colspan","colSpan"),this.register("th","rowspan","rowSpan"),this.register("th","colspan","colSpan")}return e.prototype.register=function(e,t,n){e=e.toLowerCase(),t=t.toLowerCase(),(this.elements[e]=this.elements[e]||Object.create(null))[t]=n},e.prototype.registerUniversal=function(e,t){e=e.toLowerCase(),this.allElements[e]=t},e.prototype.map=function(e,t){if(this.svg.isStandardSvgAttribute(e,t))return t;e=e.toLowerCase(),t=t.toLowerCase();var n=this.elements[e];return void 0!==n&&t in n?n[t]:t in this.allElements?this.allElements[t]:/(?:^data-)|(?:^aria-)|:/.test(t)?t:Object(h.eb)(t)},e}(),r.inject=[h.R],i),f=function(){function e(e,t,n,r,i,o){this.observerLocator=e,this.targetProperty=t,this.parts=n,this.mode=r,this.lookupFunctions=i,this.attribute=this.attrToRemove=o,this.discrete=!1}return e.prototype.createBinding=function(e){return 3===this.parts.length?new m(e,this.observerLocator,this.parts[1],this.mode,this.lookupFunctions,this.targetProperty,this.parts[0],this.parts[2]):new g(this.observerLocator,this.parts,e,this.targetProperty,this.mode,this.lookupFunctions)},e}();function v(e,t){if("style"===t)l.getLogger("templating-binding").info('Internet Explorer does not support interpolation in "style" attributes.  Use the style attribute\'s alias, "css" instead.');else if(e.parentElement&&"TEXTAREA"===e.parentElement.nodeName&&"textContent"===t)throw new Error('Interpolation binding cannot be used in the content of a textarea element.  Use <textarea value.bind="expression"></textarea> instead.')}var g=function(){function e(e,t,n,r,i,o){v(n,r),this.observerLocator=e,this.parts=t,this.target=n,this.targetProperty=r,this.targetAccessor=e.getAccessor(n,r),this.mode=i,this.lookupFunctions=o}return e.prototype.interpolate=function(){if(this.isBound){for(var e="",t=this.parts,n=0,r=t.length;n<r;n++)e+=n%2==0?t[n]:this["childBinding"+n].value;this.targetAccessor.setValue(e,this.target,this.targetProperty)}},e.prototype.updateOneTimeBindings=function(){for(var e=1,t=this.parts.length;e<t;e+=2){var n=this["childBinding"+e];n.mode===h.cb.oneTime&&n.call()}},e.prototype.bind=function(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.source=e;for(var t=this.parts,n=1,r=t.length;n<r;n+=2){var i=new m(this,this.observerLocator,t[n],this.mode,this.lookupFunctions);i.bind(e),this["childBinding"+n]=i}this.isBound=!0,this.interpolate()},e.prototype.unbind=function(){if(this.isBound){this.isBound=!1,this.source=null;for(var e=1,t=this.parts.length;e<t;e+=2){this["childBinding"+e].unbind()}}},e}(),m=Object(h.ib)()(o=function(){function e(e,t,n,r,i,o,s,a){e instanceof g?this.parent=e:(v(e,o),this.target=e,this.targetProperty=o,this.targetAccessor=t.getAccessor(e,o)),this.observerLocator=t,this.sourceExpression=n,this.mode=r,this.lookupFunctions=i,this.left=s,this.right=a}return e.prototype.updateTarget=function(e){(e=null===e||void 0===e?"":e.toString())!==this.value&&(this.value=e,this.parent?this.parent.interpolate():this.targetAccessor.setValue(this.left+e+this.right,this.target,this.targetProperty))},e.prototype.call=function(){this.isBound&&(this.rawValue=this.sourceExpression.evaluate(this.source,this.lookupFunctions),this.updateTarget(this.rawValue),this.mode!==h.cb.oneTime&&(this._version++,this.sourceExpression.connect(this,this.source),this.rawValue instanceof Array&&this.observeArray(this.rawValue),this.unobserve(!1)))},e.prototype.bind=function(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e;var t=this.sourceExpression;t.bind&&t.bind(this,e,this.lookupFunctions),this.rawValue=t.evaluate(e,this.lookupFunctions),this.updateTarget(this.rawValue),this.mode===h.cb.oneWay&&Object(h.qb)(this)},e.prototype.unbind=function(){if(this.isBound){this.isBound=!1;var e=this.sourceExpression;e.unbind&&e.unbind(this,this.source),this.source=null,this.value=null,this.rawValue=null,this.unobserve(!0)}},e.prototype.connect=function(e){this.isBound&&(e&&(this.rawValue=this.sourceExpression.evaluate(this.source,this.lookupFunctions),this.updateTarget(this.rawValue)),this.sourceExpression.connect(this,this.source),this.rawValue instanceof Array&&this.observeArray(this.rawValue))},e}())||o,y=(a=s=function(){function e(e,t,n,r){this.parser=e,this.observerLocator=t,this.eventManager=n,this.attributeMap=r}return e.prototype.interpret=function(e,t,n,r,i){return n.command in this?this[n.command](e,t,n,r,i):this.handleUnknownCommand(e,t,n,r,i)},e.prototype.handleUnknownCommand=function(e,t,n,r,i){return l.getLogger("templating-binding").warn("Unknown binding command.",n),r},e.prototype.determineDefaultBindingMode=function(e,t,n){var r=e.tagName.toLowerCase();return"input"===r&&("value"===t||"files"===t)&&"checkbox"!==e.type&&"radio"!==e.type||"input"===r&&"checked"===t&&("checkbox"===e.type||"radio"===e.type)||("textarea"===r||"select"===r)&&"value"===t||("textcontent"===t||"innerhtml"===t)&&"true"===e.contentEditable||"scrolltop"===t||"scrollleft"===t?h.cb.twoWay:n&&t in n.attributes&&n.attributes[t]&&n.attributes[t].defaultBindingMode>=h.cb.oneTime?n.attributes[t].defaultBindingMode:h.cb.oneWay},e.prototype.bind=function(e,t,n,r,i){var o=r||d.b.attribute(n.attrName);return o.attributes[n.attrName]=new h.k(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),void 0===n.defaultBindingMode||null===n.defaultBindingMode?this.determineDefaultBindingMode(t,n.attrName,i):n.defaultBindingMode,e.lookupFunctions),o},e.prototype.trigger=function(e,t,n){return new h.E(this.eventManager,n.attrName,this.parser.parse(n.attrValue),h.ob.none,!0,e.lookupFunctions)},e.prototype.capture=function(e,t,n){return new h.E(this.eventManager,n.attrName,this.parser.parse(n.attrValue),h.ob.capturing,!0,e.lookupFunctions)},e.prototype.delegate=function(e,t,n){return new h.E(this.eventManager,n.attrName,this.parser.parse(n.attrValue),h.ob.bubbling,!0,e.lookupFunctions)},e.prototype.call=function(e,t,n,r){var i=r||d.b.attribute(n.attrName);return i.attributes[n.attrName]=new h.m(this.observerLocator,n.attrName,this.parser.parse(n.attrValue),e.lookupFunctions),i},e.prototype.options=function(e,t,n,r,i){var o,s=r||d.b.attribute(n.attrName),a=n.attrValue,u=this.language,c=null,l="",h=void 0,p=void 0,f=!1,v=!1,g=!1;for(p=0,o=a.length;p<o;++p){if(";"!==(h=a[p])||f)if(":"===h&&null===c)g=!0,c=l.trim(),l="";else{if("\\"===h){l+=h,v=!0;continue}l+=h,null!==c&&!1===v&&"'"===h&&(f=!f)}else g||(c=this._getPrimaryPropertyName(e,i)),n=u.inspectAttribute(e,"?",c,l.trim()),u.createAttributeInstruction(e,t,n,s,i),s.attributes[n.attrName]||(s.attributes[n.attrName]=n.attrValue),l="",c=null;v=!1}return g||(c=this._getPrimaryPropertyName(e,i)),null!==c&&(n=u.inspectAttribute(e,"?",c,l.trim()),u.createAttributeInstruction(e,t,n,s,i),s.attributes[n.attrName]||(s.attributes[n.attrName]=n.attrValue)),s},e.prototype._getPrimaryPropertyName=function(e,t){var n=e.getAttribute(t.attributeName);return n&&n.primaryProperty?n.primaryProperty.attribute:null},e.prototype.for=function(e,t,n,r){var i,o=void 0,s=void 0,a=void 0,u=void 0;if(2!==(o=(i=(u=n.attrValue).match(/^ *[[].+[\]]/))?u.split("of "):u.split(" of ")).length)throw new Error('Incorrect syntax for "for". The form is: "$local of $items" or "[$key, $value] of $items".');return a=r||d.b.attribute(n.attrName),i?(s=o[0].replace(/[[\]]/g,"").replace(/,/g," ").replace(/\s+/g," ").trim().split(" "),a.attributes.key=s[0],a.attributes.value=s[1]):a.attributes.local=o[0],a.attributes.items=new h.k(this.observerLocator,"items",this.parser.parse(o[1]),h.cb.oneWay,e.lookupFunctions),a},e.prototype["two-way"]=function(e,t,n,r){var i=r||d.b.attribute(n.attrName);return i.attributes[n.attrName]=new h.k(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),h.cb.twoWay,e.lookupFunctions),i},e.prototype["to-view"]=function(e,t,n,r){var i=r||d.b.attribute(n.attrName);return i.attributes[n.attrName]=new h.k(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),h.cb.toView,e.lookupFunctions),i},e.prototype["from-view"]=function(e,t,n,r){var i=r||d.b.attribute(n.attrName);return i.attributes[n.attrName]=new h.k(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),h.cb.fromView,e.lookupFunctions),i},e.prototype["one-time"]=function(e,t,n,r){var i=r||d.b.attribute(n.attrName);return i.attributes[n.attrName]=new h.k(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),h.cb.oneTime,e.lookupFunctions),i},e}(),s.inject=[h.O,h.N,h.y,p],a);y.prototype["one-way"]=y.prototype["to-view"];var b={},w=(c=u=function(e){function t(t,n,r,i){var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this));return o.parser=t,o.observerLocator=n,o.syntaxInterpreter=r,o.emptyStringExpression=o.parser.parse("''"),r.language=o,o.attributeMap=i,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.inspectAttribute=function(e,t,n,r){var i=n.split(".");if(b.defaultBindingMode=null,2===i.length)b.attrName=i[0].trim(),b.attrValue=r,b.command=i[1].trim(),"ref"===b.command?(b.expression=new h.L(this.parser.parse(r),b.attrName,e.lookupFunctions),b.command=null,b.attrName="ref"):b.expression=null;else if("ref"===n)b.attrName=n,b.attrValue=r,b.command=null,b.expression=new h.L(this.parser.parse(r),"element",e.lookupFunctions);else{b.attrName=n,b.attrValue=r,b.command=null;var o=this.parseInterpolation(e,r);b.expression=null===o?null:new f(this.observerLocator,this.attributeMap.map(t,n),o,h.cb.oneWay,e.lookupFunctions,n)}return b},t.prototype.createAttributeInstruction=function(e,t,n,r,i){var o=void 0;if(n.expression){if("ref"===n.attrName)return n.expression;(o=r||d.b.attribute(n.attrName)).attributes[n.attrName]=n.expression}else n.command&&(o=this.syntaxInterpreter.interpret(e,t,n,r,i));return o},t.prototype.inspectTextContent=function(e,t){var n=this.parseInterpolation(e,t);return null===n?null:new f(this.observerLocator,"textContent",n,h.cb.oneWay,e.lookupFunctions,"textContent")},t.prototype.parseInterpolation=function(e,t){for(var n=t.indexOf("${",0),r=t.length,i=void 0,o=0,s=0,a=null,u=void 0,c=void 0,l=0;n>=0&&n<r-2;){s=1,u=n,n+=2;do{i=t[n],n++,"'"!==i&&'"'!==i?"\\"!==i?null===a&&("{"===i?s++:"}"===i&&s--):n++:null===a?a=i:a===i&&(a=null)}while(s>0&&n<r);if(0!==s)break;c=c||[],"\\"===t[u-1]&&"\\"!==t[u-2]?(c[l]=t.substring(o,u-1)+t.substring(u,n),c[++l]=this.emptyStringExpression,l++):(c[l]=t.substring(o,u),c[++l]=this.parser.parse(t.substring(u+2,n-1)),l++),o=n,n=t.indexOf("${",n)}return 0===l?null:(c[l]=t.substr(o),c)},t}(d.e),u.inject=[h.O,h.N,y,p],c);function x(e){e.container.registerSingleton(d.e,w),e.container.registerAlias(d.e,w)}},"aurelia-templating-resources":function(e,t,n){"use strict";var r,i,o,s,a,u,c=n(4),l=n(8),h=n(1),d=n(0);function p(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function f(e,t,n,r,i){var o={};return Object.keys(r).forEach(function(e){o[e]=r[e]}),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},o),i&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(i):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(e,t,o),o=null),o}var v=Object(h.X)("compose")(r=Object(h.bb)((i=function(){function e(e,t,n,r,i,c){p(this,"model",o,this),p(this,"view",s,this),p(this,"viewModel",a,this),p(this,"swapOrder",u,this),this.element=e,this.container=t,this.compositionEngine=n,this.viewSlot=r,this.viewResources=i,this.taskQueue=c,this.currentController=null,this.currentViewModel=null,this.changes=Object.create(null)}return e.inject=function(){return[d.b.Element,c.b,h.g,h.N,h.M,l.a]},e.prototype.created=function(e){this.owningView=e},e.prototype.bind=function(e,t){this.bindingContext=e,this.overrideContext=t,this.changes.view=this.view,this.changes.viewModel=this.viewModel,this.changes.model=this.model,this.pendingTask||g(this)},e.prototype.unbind=function(){this.changes=Object.create(null),this.bindingContext=null,this.overrideContext=null;this.viewSlot.removeAll(!0,!0)},e.prototype.modelChanged=function(e,t){this.changes.model=e,y(this)},e.prototype.viewChanged=function(e,t){this.changes.view=e,y(this)},e.prototype.viewModelChanged=function(e,t){this.changes.viewModel=e,y(this)},e}(),o=f(i.prototype,"model",[h.S],{enumerable:!0,initializer:null}),s=f(i.prototype,"view",[h.S],{enumerable:!0,initializer:null}),a=f(i.prototype,"viewModel",[h.S],{enumerable:!0,initializer:null}),u=f(i.prototype,"swapOrder",[h.S],{enumerable:!0,initializer:null}),r=i))||r)||r;function g(e){var t=e.changes;if(e.changes=Object.create(null),"view"in t||"viewModel"in t||!("model"in t)){var n={view:e.view,viewModel:e.currentViewModel||e.viewModel,model:e.model};n=Object.assign(n,t),n=function(e,t){return Object.assign(t,{bindingContext:e.bindingContext,overrideContext:e.overrideContext,owningView:e.owningView,container:e.container,viewSlot:e.viewSlot,viewResources:e.viewResources,currentController:e.currentController,host:e.element,swapOrder:e.swapOrder})}(e,n),e.pendingTask=e.compositionEngine.compose(n).then(function(t){e.currentController=t,e.currentViewModel=t?t.viewModel:null})}else if(e.pendingTask=function(e,t){if(e&&"function"==typeof e.activate)return Promise.resolve(e.activate(t))}(e.currentViewModel,t.model),!e.pendingTask)return;e.pendingTask=e.pendingTask.then(function(){m(e)},function(t){throw m(e),t})}function m(e){e.pendingTask=null,function(e){for(var t in e)return!1;return!0}(e.changes)||g(e)}function y(e){e.pendingTask||e.updateRequested||(e.updateRequested=!0,e.taskQueue.queueMicroTask(function(){e.updateRequested=!1,g(e)}))}var b,w,x,k,C,_,S,O=function(){function e(e,t){this.viewFactory=e,this.viewSlot=t,this.view=null,this.bindingContext=null,this.overrideContext=null,this.showing=!1}return e.prototype.bind=function(e,t){this.bindingContext=e,this.overrideContext=t},e.prototype.unbind=function(){null!==this.view&&(this.view.unbind(),this.viewFactory.isCaching&&(this.showing?(this.showing=!1,this.viewSlot.remove(this.view,!0,!0)):this.view.returnToCache(),this.view=null))},e.prototype._show=function(){if(!this.showing)return null===this.view&&(this.view=this.viewFactory.create()),this.view.isBound||this.view.bind(this.bindingContext,this.overrideContext),this.showing=!0,this.viewSlot.add(this.view);this.view.isBound||this.view.bind(this.bindingContext,this.overrideContext)},e.prototype._hide=function(){var e=this;if(this.showing){this.showing=!1;var t=this.viewSlot.remove(this.view);if(t instanceof Promise)return t.then(function(){return e.view.unbind()});this.view.unbind()}},e}();function E(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function A(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function P(e,t,n,r,i){var o={};return Object.keys(r).forEach(function(e){o[e]=r[e]}),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},o),i&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(i):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(e,t,o),o=null),o}var T,j,R,N=(b=Object(h.W)("if"),w=Object(c.r)(h.f,h.N),x=Object(h.S)({primaryProperty:!0}),b(k=Object(h.fb)(k=w((C=function(e){function t(){for(var t,n,r=arguments.length,i=Array(r),o=0;o<r;o++)i[o]=arguments[o];return t=n=A(this,e.call.apply(e,[this].concat(i))),E(n,"condition",_,n),E(n,"swapOrder",S,n),A(n,t)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.bind=function(t,n){e.prototype.bind.call(this,t,n),this.condition?this._show():this._hide()},t.prototype.conditionChanged=function(e){this._update(e)},t.prototype._update=function(e){var t=this;if(!this.animating){var n=void 0;(n=this.elseVm?e?this._swap(this.elseVm,this):this._swap(this,this.elseVm):e?this._show():this._hide())&&(this.animating=!0,n.then(function(){t.animating=!1,t.condition!==t.showing&&t._update(t.condition)}))}},t.prototype._swap=function(e,t){switch(this.swapOrder){case"before":return Promise.resolve(t._show()).then(function(){return e._hide()});case"with":return Promise.all([e._hide(),t._show()]);default:var n=e._hide();return n?n.then(function(){return t._show()}):t._show()}},t}(O),_=P(C.prototype,"condition",[x],{enumerable:!0,initializer:null}),S=P(C.prototype,"swapOrder",[h.S],{enumerable:!0,initializer:null}),k=C))||k)||k)||k);var M,I,V,L=(T=Object(h.W)("else"),j=Object(c.r)(h.f,h.N),T(R=Object(h.fb)(R=j(R=function(e){function t(t,n){var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,t,n));return r._registerInIf(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.bind=function(t,n){e.prototype.bind.call(this,t,n),this.ifVm.condition?this._hide():this._show()},t.prototype._registerInIf=function(){for(var e=this.viewSlot.anchor.previousSibling;e&&!e.au;)e=e.previousSibling;if(!e||!e.au.if)throw new Error("Can't find matching If for Else custom attribute.");this.ifVm=e.au.if.viewModel,this.ifVm.elseVm=this},t}(O))||R)||R)||R),F=n(3),B=(M=Object(h.W)("with"),I=Object(c.r)(h.f,h.N),M(V=Object(h.fb)(V=I(V=function(){function e(e,t){this.viewFactory=e,this.viewSlot=t,this.parentOverrideContext=null,this.view=null}return e.prototype.bind=function(e,t){this.parentOverrideContext=t,this.valueChanged(this.value)},e.prototype.valueChanged=function(e){var t=Object(F.kb)(e,this.parentOverrideContext);this.view?this.view.bind(e,t):(this.view=this.viewFactory.create(),this.view.bind(e,t),this.viewSlot.add(this.view))},e.prototype.unbind=function(){this.parentOverrideContext=null,this.view&&this.view.unbind()},e}())||V)||V)||V),q=function(){function e(){}return e.prototype.instanceChanged=function(e,t){e.removeAllViews(!0)},e.prototype.getCollectionObserver=function(e,t){},e}(),D=F.cb.oneTime;function z(e,t){var n=e.length;for(t>0&&(t-=1);t<n;++t)U(e[t].overrideContext,t,n)}function H(e,t,n,r,i){var o={},s=Object(F.kb)(o,e.scope.overrideContext);return void 0!==i?(o[e.key]=i,o[e.value]=t):o[e.local]=t,U(s,n,r),s}function U(e,t,n){var r=0===t,i=t===n-1,o=t%2==0;e.$index=t,e.$first=r,e.$last=i,e.$middle=!(r||i),e.$odd=!o,e.$even=o}function W(e,t){return e.behaviorInstructions.filter(function(e){return e.originalAttrName===t})[0].attributes.items.sourceExpression}function Q(e){for(var t=!1;e instanceof F.h;)e=e.expression;for(;e instanceof F.Y;)e=e.expression,t=!0;return t?e:null}function $(e){for(;e instanceof F.h;){if("oneTime"===e.name)return!0;e=e.expression}return!1}function G(e){e.call&&e.mode===D?e.call(F.Eb):e.updateOneTimeBindings&&e.updateOneTimeBindings()}function K(e,t,n,r){if(!n)return e.indexOf(t);for(var i=e.length,o=r||0;o<i;o++)if(n(e[o],t))return o;return-1}var X=function(){function e(){}return e.prototype.getCollectionObserver=function(e,t){return e.getArrayObserver(t)},e.prototype.instanceChanged=function(e,t){var n=this,r=t.length;if(t&&0!==r){var i=e.views(),o=i.length;if(0!==o)if(e.viewsRequireLifecycle){for(var s=i.slice(0),a=e.local,u=e.matcher(),c=[],l=[],h=0;h<o;h++){var d=s[h],p=d.bindingContext[a];-1===K(t,p,u)?l.push(d):c.push(p)}var f=void 0,v=void 0;c.length>0?(v=e.removeViews(l,!0,!e.viewsRequireLifecycle),f=function(){for(var o=0;o<r;o++){var s=t[o],a=K(c,s,u,o),l=void 0;if(-1===a){var h=H(e,t[o],o,r);e.insertView(o,h.bindingContext,h),c.splice(o,0,void 0)}else a===o?(l=i[a],c[a]=void 0):(l=i[a],e.moveView(a,o),c.splice(a,1),c.splice(o,0,void 0));l&&U(l.overrideContext,o,r)}n._inPlaceProcessItems(e,t)}):(v=e.removeAllViews(!0,!e.viewsRequireLifecycle),f=function(){return n._standardProcessInstanceChanged(e,t)}),v instanceof Promise?v.then(f):f()}else this._inPlaceProcessItems(e,t);else this._standardProcessInstanceChanged(e,t)}else e.removeAllViews(!0,!e.viewsRequireLifecycle)},e.prototype._standardProcessInstanceChanged=function(e,t){for(var n=0,r=t.length;n<r;n++){var i=H(e,t[n],n,r);e.addView(i.bindingContext,i)}},e.prototype._inPlaceProcessItems=function(e,t){for(var n=t.length,r=e.viewCount();r>n;)r--,e.removeView(r,!0,!e.viewsRequireLifecycle);for(var i=e.local,o=0;o<r;o++){var s=e.view(o),a=o===n-1,u=0!==o&&!a;s.bindingContext[i]===t[o]&&s.overrideContext.$middle===u&&s.overrideContext.$last===a||(s.bindingContext[i]=t[o],s.overrideContext.$middle=u,s.overrideContext.$last=a,e.updateBindings(s))}for(var c=r;c<n;c++){var l=H(e,t[c],c,n);e.addView(l.bindingContext,l)}},e.prototype.instanceMutated=function(e,t,n){var r=this;if(e.__queuedSplices){for(var i=0,o=n.length;i<o;++i){var s=n[i],a=s.index,u=s.removed,c=s.addedCount;Object(F.xb)(e.__queuedSplices,a,u,c)}e.__array=t.slice(0)}else{var l=this._runSplices(e,t.slice(0),n);if(l instanceof Promise){var h=e.__queuedSplices=[];l.then(function t(){if(!h.length)return e.__queuedSplices=void 0,void(e.__array=void 0);var n=r._runSplices(e,e.__array,h)||Promise.resolve();h=e.__queuedSplices=[],n.then(t)})}}},e.prototype._runSplices=function(e,t,n){for(var r=this,i=0,o=[],s=0,a=n.length;s<a;++s){for(var u=n[s],c=0,l=u.removed.length;c<l;++c){var h=e.removeView(u.index+i+o.length,!0);h instanceof Promise&&o.push(h)}i-=u.addedCount}if(o.length>0)return Promise.all(o).then(function(){var i=r._handleAddedSplices(e,t,n);z(e.views(),i)});var d=this._handleAddedSplices(e,t,n);z(e.views(),d)},e.prototype._handleAddedSplices=function(e,t,n){for(var r=void 0,i=void 0,o=t.length,s=0,a=n.length;s<a;++s){var u=n[s],c=r=u.index,l=u.index+u.addedCount;for((void 0===i||null===i||i>u.index)&&(i=r);c<l;++c){var h=H(e,t[c],c,o);e.insertView(c,h.bindingContext,h)}}return i},e}(),Y=function(){function e(){}return e.prototype.getCollectionObserver=function(e,t){return e.getMapObserver(t)},e.prototype.instanceChanged=function(e,t){var n=this,r=e.removeAllViews(!0,!e.viewsRequireLifecycle);r instanceof Promise?r.then(function(){return n._standardProcessItems(e,t)}):this._standardProcessItems(e,t)},e.prototype._standardProcessItems=function(e,t){var n=0,r=void 0;t.forEach(function(i,o){r=H(e,i,n,t.size,o),e.addView(r.bindingContext,r),++n})},e.prototype.instanceMutated=function(e,t,n){var r,i=void 0,o=void 0,s=void 0,a=void 0,u=void 0,c=void 0,l=[],h=void 0;for(o=0,r=n.length;o<r;++o)switch(i=(c=n[o]).key,c.type){case"update":a=this._getViewIndexByKey(e,i),(h=e.removeView(a,!0,!e.viewsRequireLifecycle))instanceof Promise&&l.push(h),s=H(e,t.get(i),a,t.size,i),e.insertView(a,s.bindingContext,s);break;case"add":u=e.viewCount()<=t.size-1?e.viewCount():t.size-1,s=H(e,t.get(i),u,t.size,i),e.insertView(t.size-1,s.bindingContext,s);break;case"delete":if(void 0===c.oldValue)return;a=this._getViewIndexByKey(e,i),(h=e.removeView(a,!0,!e.viewsRequireLifecycle))instanceof Promise&&l.push(h);break;case"clear":e.removeAllViews(!0,!e.viewsRequireLifecycle);break;default:continue}l.length>0?Promise.all(l).then(function(){z(e.views(),0)}):z(e.views(),0)},e.prototype._getViewIndexByKey=function(e,t){var n,r=void 0;for(r=0,n=e.viewCount();r<n;++r)if(e.view(r).bindingContext[e.key]===t)return r},e}(),J=function(){function e(){}return e.prototype.getCollectionObserver=function(e,t){return e.getSetObserver(t)},e.prototype.instanceChanged=function(e,t){var n=this,r=e.removeAllViews(!0,!e.viewsRequireLifecycle);r instanceof Promise?r.then(function(){return n._standardProcessItems(e,t)}):this._standardProcessItems(e,t)},e.prototype._standardProcessItems=function(e,t){var n=0,r=void 0;t.forEach(function(i){r=H(e,i,n,t.size),e.addView(r.bindingContext,r),++n})},e.prototype.instanceMutated=function(e,t,n){var r,i=void 0,o=void 0,s=void 0,a=void 0,u=void 0,c=[],l=void 0;for(o=0,r=n.length;o<r;++o)switch(i=(u=n[o]).value,u.type){case"add":var h=Math.max(t.size-1,0);s=H(e,i,h,t.size),e.insertView(h,s.bindingContext,s);break;case"delete":a=this._getViewIndexByValue(e,i),(l=e.removeView(a,!0,!e.viewsRequireLifecycle))instanceof Promise&&c.push(l);break;case"clear":e.removeAllViews(!0,!e.viewsRequireLifecycle);break;default:continue}c.length>0?Promise.all(c).then(function(){z(e.views(),0)}):z(e.views(),0)},e.prototype._getViewIndexByValue=function(e,t){var n,r=void 0;for(r=0,n=e.viewCount();r<n;++r)if(e.view(r).bindingContext[e.local]===t)return r},e}(),Z=function(){function e(){}return e.prototype.getCollectionObserver=function(){return null},e.prototype.instanceChanged=function(e,t){var n=this,r=e.removeAllViews(!0,!e.viewsRequireLifecycle);r instanceof Promise?r.then(function(){return n._standardProcessItems(e,t)}):this._standardProcessItems(e,t)},e.prototype._standardProcessItems=function(e,t){var n=e.viewCount(),r=void 0,i=void 0,o=void 0,s=void 0;if((s=n-(t=Math.floor(t)))>0)for(s>n&&(s=n),r=0,i=s;r<i;++r)e.removeView(n-(r+1),!0,!e.viewsRequireLifecycle);else{for(r=n,i=t;r<i;++r)o=H(e,r,r,i),e.addView(o.bindingContext,o);z(e.views(),0)}},e}(),ee=function(){function e(){this.matchers=[],this.strategies=[],this.addStrategy(function(e){return null===e||void 0===e},new q),this.addStrategy(function(e){return e instanceof Array},new X),this.addStrategy(function(e){return e instanceof Map},new Y),this.addStrategy(function(e){return e instanceof Set},new J),this.addStrategy(function(e){return"number"==typeof e},new Z)}return e.prototype.addStrategy=function(e,t){this.matchers.push(e),this.strategies.push(t)},e.prototype.getStrategy=function(e){for(var t=this.matchers,n=0,r=t.length;n<r;++n)if(t[n](e))return this.strategies[n];return null},e}(),te=["focus","if","else","repeat","show","hide","with"];function ne(e){var t=e.type,n=null!==t.elementName?t.elementName:t.attributeName;return-1===te.indexOf(n)&&(t.handlesAttached||t.handlesBind||t.handlesCreated||t.handlesDetached||t.handlesUnbind)||t.viewFactory&&ie(t.viewFactory)||e.viewFactory&&ie(e.viewFactory)}function re(e){var t=e.behaviorInstructions;if(t)for(var n=t.length;n--;)if(ne(t[n]))return!0;return e.viewFactory&&ie(e.viewFactory)}function ie(e){if("_viewsRequireLifecycle"in e)return e._viewsRequireLifecycle;if(e._viewsRequireLifecycle=!1,e.viewFactory)return e._viewsRequireLifecycle=ie(e.viewFactory),e._viewsRequireLifecycle;if(e.template.querySelector(".au-animate"))return e._viewsRequireLifecycle=!0,!0;for(var t in e.instructions)if(re(e.instructions[t]))return e._viewsRequireLifecycle=!0,!0;return e._viewsRequireLifecycle=!1,!1}var oe,se,ae,ue,ce,le,he,de,pe=function(){function e(e){Object.assign(this,{local:"items",viewsRequireLifecycle:!0},e)}return e.prototype.viewCount=function(){throw new Error("subclass must implement `viewCount`")},e.prototype.views=function(){throw new Error("subclass must implement `views`")},e.prototype.view=function(e){throw new Error("subclass must implement `view`")},e.prototype.matcher=function(){throw new Error("subclass must implement `matcher`")},e.prototype.addView=function(e,t){throw new Error("subclass must implement `addView`")},e.prototype.insertView=function(e,t,n){throw new Error("subclass must implement `insertView`")},e.prototype.moveView=function(e,t){throw new Error("subclass must implement `moveView`")},e.prototype.removeAllViews=function(e,t){throw new Error("subclass must implement `removeAllViews`")},e.prototype.removeViews=function(e,t,n){throw new Error("subclass must implement `removeView`")},e.prototype.removeView=function(e,t,n){throw new Error("subclass must implement `removeView`")},e.prototype.updateBindings=function(e){throw new Error("subclass must implement `updateBindings`")},e}();function fe(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function ve(e,t,n,r,i){var o={};return Object.keys(r).forEach(function(e){o[e]=r[e]}),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},o),i&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(i):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(e,t,o),o=null),o}var ge,me=(oe=Object(h.W)("repeat"),se=Object(c.r)(h.f,h.C,h.N,h.M,F.N,ee),oe(ae=Object(h.fb)(ae=se((ue=function(e){function t(t,n,r,i,o,s){var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,{local:"item",viewsRequireLifecycle:ie(t)}));return fe(a,"items",ce,a),fe(a,"local",le,a),fe(a,"key",he,a),fe(a,"value",de,a),a.viewFactory=t,a.instruction=n,a.viewSlot=r,a.lookupFunctions=i.lookupFunctions,a.observerLocator=o,a.key="key",a.value="value",a.strategyLocator=s,a.ignoreMutation=!1,a.sourceExpression=W(a.instruction,"repeat.for"),a.isOneTime=$(a.sourceExpression),a.viewsRequireLifecycle=ie(t),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.call=function(e,t){this[e](this.items,t)},t.prototype.bind=function(e,t){this.scope={bindingContext:e,overrideContext:t},this.matcherBinding=this._captureAndRemoveMatcherBinding(),this.itemsChanged()},t.prototype.unbind=function(){this.scope=null,this.items=null,this.matcherBinding=null,this.viewSlot.removeAll(!0,!0),this._unsubscribeCollection()},t.prototype._unsubscribeCollection=function(){this.collectionObserver&&(this.collectionObserver.unsubscribe(this.callContext,this),this.collectionObserver=null,this.callContext=null)},t.prototype.itemsChanged=function(){var e=this;if(this._unsubscribeCollection(),this.scope){var t=this.items;if(this.strategy=this.strategyLocator.getStrategy(t),!this.strategy)throw new Error("Value for '"+this.sourceExpression+"' is non-repeatable");this.isOneTime||this._observeInnerCollection()||this._observeCollection(),this.ignoreMutation=!0,this.strategy.instanceChanged(this,t),this.observerLocator.taskQueue.queueMicroTask(function(){e.ignoreMutation=!1})}},t.prototype._getInnerCollection=function(){var e=Q(this.sourceExpression);return e?e.evaluate(this.scope,null):null},t.prototype.handleCollectionMutated=function(e,t){this.collectionObserver&&(this.ignoreMutation||this.strategy.instanceMutated(this,e,t))},t.prototype.handleInnerCollectionMutated=function(e,t){var n=this;if(this.collectionObserver&&!this.ignoreMutation){this.ignoreMutation=!0;var r=this.sourceExpression.evaluate(this.scope,this.lookupFunctions);this.observerLocator.taskQueue.queueMicroTask(function(){return n.ignoreMutation=!1}),r===this.items?this.itemsChanged():this.items=r}},t.prototype._observeInnerCollection=function(){var e=this._getInnerCollection(),t=this.strategyLocator.getStrategy(e);return!!t&&(this.collectionObserver=t.getCollectionObserver(this.observerLocator,e),!!this.collectionObserver&&(this.callContext="handleInnerCollectionMutated",this.collectionObserver.subscribe(this.callContext,this),!0))},t.prototype._observeCollection=function(){var e=this.items;this.collectionObserver=this.strategy.getCollectionObserver(this.observerLocator,e),this.collectionObserver&&(this.callContext="handleCollectionMutated",this.collectionObserver.subscribe(this.callContext,this))},t.prototype._captureAndRemoveMatcherBinding=function(){if(this.viewFactory.viewFactory)for(var e=this.viewFactory.viewFactory.instructions,t=Object.keys(e),n=0;n<t.length;n++){var r=e[t[n]].expressions;if(r)for(;n<r.length;n++)if("matcher"===r[0].targetProperty){var i=r[0];return r.splice(0,1),i}}},t.prototype.viewCount=function(){return this.viewSlot.children.length},t.prototype.views=function(){return this.viewSlot.children},t.prototype.view=function(e){return this.viewSlot.children[e]},t.prototype.matcher=function(){return this.matcherBinding?this.matcherBinding.sourceExpression.evaluate(this.scope,this.matcherBinding.lookupFunctions):null},t.prototype.addView=function(e,t){var n=this.viewFactory.create();n.bind(e,t),this.viewSlot.add(n)},t.prototype.insertView=function(e,t,n){var r=this.viewFactory.create();r.bind(t,n),this.viewSlot.insert(e,r)},t.prototype.moveView=function(e,t){this.viewSlot.move(e,t)},t.prototype.removeAllViews=function(e,t){return this.viewSlot.removeAll(e,t)},t.prototype.removeViews=function(e,t,n){return this.viewSlot.removeMany(e,t,n)},t.prototype.removeView=function(e,t,n){return this.viewSlot.removeAt(e,t,n)},t.prototype.updateBindings=function(e){for(var t=e.bindings.length;t--;)G(e.bindings[t]);for(t=e.controllers.length;t--;)for(var n=e.controllers[t].boundProperties.length;n--;){G(e.controllers[t].boundProperties[n].binding)}},t}(pe),ce=ve(ue.prototype,"items",[h.S],{enumerable:!0,initializer:null}),le=ve(ue.prototype,"local",[h.S],{enumerable:!0,initializer:null}),he=ve(ue.prototype,"key",[h.S],{enumerable:!0,initializer:null}),de=ve(ue.prototype,"value",[h.S],{enumerable:!0,initializer:null}),ae=ue))||ae)||ae)||ae),ye=".aurelia-hide { display:none !important; }";function be(e){d.c.shadowDOM&&e&&!e.hasAureliaHideStyle&&(e.hasAureliaHideStyle=!0,d.b.injectStyles(ye,e))}var we,xe,ke,Ce,_e,Se,Oe=Object(h.W)("show")(ge=function(){function e(e,t,n){this.element=e,this.animator=t,this.domBoundary=n}return e.inject=function(){return[d.b.Element,h.a,c.h.of(d.b.boundary,!0)]},e.prototype.created=function(){be(this.domBoundary)},e.prototype.valueChanged=function(e){e?this.animator.removeClass(this.element,"aurelia-hide"):this.animator.addClass(this.element,"aurelia-hide")},e.prototype.bind=function(e){this.valueChanged(this.value)},e}())||ge,Ee=Object(h.W)("hide")(we=function(){function e(e,t,n){this.element=e,this.animator=t,this.domBoundary=n}return e.inject=function(){return[d.b.Element,h.a,c.h.of(d.b.boundary,!0)]},e.prototype.created=function(){be(this.domBoundary)},e.prototype.valueChanged=function(e){e?this.animator.addClass(this.element,"aurelia-hide"):this.animator.removeClass(this.element,"aurelia-hide")},e.prototype.bind=function(e){this.valueChanged(this.value)},e}())||we,Ae=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,Pe=function(){function e(){}return e.prototype.sanitize=function(e){return e.replace(Ae,"")},e}(),Te=Object(F.Hb)("sanitizeHTML")(xe=Object(c.r)(Pe)(xe=function(){function e(e){this.sanitizer=e}return e.prototype.toView=function(e){return null===e||void 0===e?null:this.sanitizer.sanitize(e)},e}())||xe)||xe,je=(ke=Object(h.W)("replaceable"),Ce=Object(c.r)(h.f,h.N),ke(_e=Object(h.fb)(_e=Ce(_e=function(){function e(e,t){this.viewFactory=e,this.viewSlot=t,this.view=null}return e.prototype.bind=function(e,t){null===this.view&&(this.view=this.viewFactory.create(),this.viewSlot.add(this.view)),this.view.bind(e,t)},e.prototype.unbind=function(){this.view.unbind()},e}())||_e)||_e)||_e),Re=Object(h.W)("focus",F.cb.twoWay)(Se=function(){function e(e,t){this.element=e,this.taskQueue=t,this.isAttached=!1,this.needsApply=!1}return e.inject=function(){return[d.b.Element,l.a]},e.prototype.valueChanged=function(e){this.isAttached?this._apply():this.needsApply=!0},e.prototype._apply=function(){var e=this;this.value?this.taskQueue.queueMicroTask(function(){e.value&&e.element.focus()}):this.element.blur()},e.prototype.attached=function(){this.isAttached=!0,this.needsApply&&(this.needsApply=!1,this._apply()),this.element.addEventListener("focus",this),this.element.addEventListener("blur",this)},e.prototype.detached=function(){this.isAttached=!1,this.element.removeEventListener("focus",this),this.element.removeEventListener("blur",this)},e.prototype.handleEvent=function(e){"focus"===e.type?this.value=!0:d.b.activeElement!==this.element&&(this.value=!1)},e}())||Se,Ne=n(7),Me=n(6);var Ie=/url\((?!['"]data)([^)]+)\)/gi;var Ve,Le=function(){function e(e){this.address=e,this._scoped=null,this._global=!1,this._alreadyGloballyInjected=!1}return e.prototype.initialize=function(e,t){this._scoped=new t(this)},e.prototype.register=function(e,t){"scoped"===t?e.registerViewEngineHooks(this._scoped):this._global=!0},e.prototype.load=function(e){var t=this;return e.get(Ne.a).loadText(this.address).catch(function(e){return null}).then(function(e){e=function(e,t){if("string"!=typeof t)throw new Error("Failed loading required CSS file: "+e);return t.replace(Ie,function(t,n){var r=n.charAt(0);return"'"!==r&&'"'!==r||(n=n.substr(1,n.length-2)),"url('"+Object(Me.d)(n,e)+"')"})}(t.address,e),t._scoped.css=e,t._global&&(t._alreadyGloballyInjected=!0,d.b.injectStyles(e))})},e}(),Fe=function(){function e(e){this.owner=e,this.css=null}return e.prototype.beforeCompile=function(e,t,n){if(n.targetShadowDOM)d.b.injectStyles(this.css,e,!0);else if(d.c.scopedCSS){d.b.injectStyles(this.css,e,!0).setAttribute("scoped","scoped")}else this._global&&!this.owner._alreadyGloballyInjected&&(d.b.injectStyles(this.css),this.owner._alreadyGloballyInjected=!0)},e}();function Be(e){var t;return Object(h.eb)(new Le(e))(t=function(e){function t(){return function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(Fe))||t}var qe,De,ze,He,Ue,We,Qe=Object(F.bb)("attr")(Ve=function(){function e(){}return e.prototype.bind=function(e,t){e.targetObserver=new F.v(e.target,e.targetProperty)},e.prototype.unbind=function(e,t){},e}())||Ve,$e=n(2),Ge={bind:function(e,t,n){e.originalMode=e.mode,e.mode=this.mode},unbind:function(e,t){e.mode=e.originalMode,e.originalMode=null}},Ke=Object($e.e)(Ge)(qe=Object(F.bb)("oneTime")(qe=function(){this.mode=F.cb.oneTime})||qe)||qe,Xe=Object($e.e)(Ge)(De=Object(F.bb)("oneWay")(De=function(){this.mode=F.cb.toView})||De)||De,Ye=Object($e.e)(Ge)(ze=Object(F.bb)("toView")(ze=function(){this.mode=F.cb.toView})||ze)||ze,Je=Object($e.e)(Ge)(He=Object(F.bb)("fromView")(He=function(){this.mode=F.cb.fromView})||He)||He,Ze=Object($e.e)(Ge)(Ue=Object(F.bb)("twoWay")(Ue=function(){this.mode=F.cb.twoWay})||Ue)||Ue;function et(e){var t=this,n=this.throttleState,r=+new Date-n.last;if(r>=n.delay)return clearTimeout(n.timeoutId),n.timeoutId=null,n.last=+new Date,void this.throttledMethod(e);n.newValue=e,null===n.timeoutId&&(n.timeoutId=setTimeout(function(){n.timeoutId=null,n.last=+new Date,t.throttledMethod(n.newValue)},n.delay-r))}var tt,nt=Object(F.bb)("throttle")(We=function(){function e(){}return e.prototype.bind=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:200,r="updateTarget";e.callSource?r="callSource":e.updateSource&&e.mode===F.cb.twoWay&&(r="updateSource"),e.throttledMethod=e[r],e.throttledMethod.originalName=r,e[r]=et,e.throttleState={delay:n,last:0,timeoutId:null}},e.prototype.unbind=function(e,t){e[e.throttledMethod.originalName]=e.throttledMethod,e.throttledMethod=null,clearTimeout(e.throttleState.timeoutId),e.throttleState=null},e}())||We,rt={};function it(e){var t=this,n=this.debounceState;clearTimeout(n.timeoutId),n.timeoutId=setTimeout(function(){return t.debouncedMethod(e)},n.delay)}function ot(e,t,n){var r=this,i=this.debounceState;if(clearTimeout(i.timeoutId),e!==i.callContextToDebounce)return i.oldValue=rt,void this.debouncedMethod(e,t,n);i.oldValue===rt&&(i.oldValue=n),i.timeoutId=setTimeout(function(){var n=i.oldValue;i.oldValue=rt,r.debouncedMethod(e,t,n)},i.delay)}var st,at=Object(F.bb)("debounce")(tt=function(){function e(){}return e.prototype.bind=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:200,r=void 0!==e.callSource,i=r?"callSource":"call",o=r?it:ot,s=e.mode,a=s===F.cb.twoWay||s===F.cb.fromView?F.Gb:F.Eb;e.debouncedMethod=e[i],e.debouncedMethod.originalName=i,e[i]=o,e.debounceState={callContextToDebounce:a,delay:n,timeoutId:0,oldValue:rt}},e.prototype.unbind=function(e,t){e[e.debouncedMethod.originalName]=e.debouncedMethod,e.debouncedMethod=null,clearTimeout(e.debounceState.timeoutId),e.debounceState=null},e}())||tt;function ut(e){var t=function(e){return e.path&&e.path[0]||e.deepPath&&e.deepPath[0]||e.target}(e);this.target===t&&this.selfEventCallSource(e)}var ct,lt,ht=Object(F.bb)("self")(st=function(){function e(){}return e.prototype.bind=function(e,t){if(!e.callSource||!e.targetEvent)throw new Error("Self binding behavior only supports event.");e.selfEventCallSource=e.callSource,e.callSource=ut},e.prototype.unbind=function(e,t){e.callSource=e.selfEventCallSource,e.selfEventCallSource=null},e}())||st,dt=function(){function e(){this.signals={}}return e.prototype.signal=function(e){var t=this.signals[e];if(t)for(var n=t.length;n--;)t[n].call(F.Eb)},e}(),pt=Object(F.bb)("signal")(ct=function(){function e(e){this.signals=e.signals}return e.inject=function(){return[dt]},e.prototype.bind=function(e,t){if(!e.updateTarget)throw new Error("Only property bindings and string interpolation bindings can be signaled.  Trigger, delegate and call bindings cannot be signaled.");if(3===arguments.length){var n=arguments[2];(this.signals[n]||(this.signals[n]=[])).push(e),e.signalName=n}else{if(!(arguments.length>3))throw new Error("Signal name is required.");for(var r=Array.prototype.slice.call(arguments,2),i=r.length;i--;){var o=r[i];(this.signals[o]||(this.signals[o]=[])).push(e)}e.signalName=r}},e.prototype.unbind=function(e,t){var n=e.signalName;if(e.signalName=null,Array.isArray(n))for(var r=n,i=r.length;i--;){var o=r[i],s=this.signals[o];s.splice(s.indexOf(e),1)}else{var a=this.signals[n];a.splice(a.indexOf(e),1)}},e}())||ct,ft="The updateTrigger binding behavior can only be applied to two-way/ from-view bindings on input/select elements.",vt=Object(F.bb)("updateTrigger")(lt=function(){function e(){}return e.prototype.bind=function(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];if(0===r.length)throw new Error("The updateTrigger binding behavior requires at least one event name argument: eg <input value.bind=\"firstName & updateTrigger:'blur'\">");if(e.mode!==F.cb.twoWay&&e.mode!==F.cb.fromView)throw new Error(ft);var o=e.observerLocator.getObserver(e.target,e.targetProperty);if(!o.handler)throw new Error(ft);e.targetObserver=o,o.originalHandler=e.targetObserver.handler;var s=new F.z(r);o.handler=s},e.prototype.unbind=function(e,t){e.targetObserver.handler.dispose(),e.targetObserver.handler=e.targetObserver.originalHandler,e.targetObserver.originalHandler=null},e}())||lt;function gt(e){var t=e.container.get(h.I),n=e.aurelia.loader;t.addResourcePlugin(".html",{fetch:function(e){return n.loadTemplate(e).then(function(t){var n,r=t.template.getAttribute("bindable"),i=function(e){return/([^\/^\?]+)\.html/i.exec(e)[1].toLowerCase()}(e);return r?(r=r.split(",").map(function(e){return e.trim()}),t.template.removeAttribute("bindable")):r=[],(n={})[i]=function(e,t,n){for(var r,i=Object(h.X)(e)(r=Object(h.hb)(t)(r=function(){function e(){}return e.prototype.bind=function(e){this.$parent=e},e}())||r)||r,o=0,s=n.length;o<s;++o)Object(h.S)(n[o])(i);return i}(i,e,r),n})}})}function mt(e){d.b.injectStyles(ye),e.globalResources(v,N,L,B,me,Oe,Ee,je,Re,Te,Ke,Xe,Ye,Je,Ze,nt,at,ht,pt,vt,Qe),gt(e);var t=e.container.get(h.I),n={fetch:function(e){var t;return(t={})[e]=Be(e),t}};[".css",".less",".sass",".scss",".styl"].forEach(function(e){return t.addResourcePlugin(e,n)})}n.d(t,"configure",function(){return mt}),n.d(t,!1,function(){return v}),n.d(t,!1,function(){return N}),n.d(t,!1,function(){return L}),n.d(t,!1,function(){return B}),n.d(t,!1,function(){return me}),n.d(t,!1,function(){return Oe}),n.d(t,!1,function(){return Ee}),n.d(t,!1,function(){return Pe}),n.d(t,!1,function(){return Te}),n.d(t,!1,function(){return je}),n.d(t,!1,function(){return Re}),n.d(t,!1,function(){return Qe}),n.d(t,!1,function(){return Ke}),n.d(t,!1,function(){return Xe}),n.d(t,!1,function(){return Ye}),n.d(t,!1,function(){return Je}),n.d(t,!1,function(){return Ze}),n.d(t,!1,function(){return nt}),n.d(t,!1,function(){return at}),n.d(t,!1,function(){return ht}),n.d(t,!1,function(){return pt}),n.d(t,!1,function(){return dt}),n.d(t,!1,function(){return vt}),n.d(t,!1,function(){return pe}),n.d(t,!1,function(){return ee}),n.d(t,!1,function(){return q}),n.d(t,!1,function(){return X}),n.d(t,!1,function(){return Y}),n.d(t,!1,function(){return J}),n.d(t,!1,function(){return Z}),n.d(t,!1,function(){return H}),n.d(t,!1,function(){return U}),n.d(t,!1,function(){return W}),n.d(t,!1,function(){return $}),n.d(t,!1,function(){return G}),n.d(t,!1,function(){return Q}),n.d(t,!1,function(){return ie})},"aurelia-templating-router":function(e,t,n){"use strict";var r=n(5),i=n(6),o=function(){function e(e){this.charSpec=e,this.nextStates=[]}return e.prototype.get=function(e){var t=this.nextStates,n=Array.isArray(t),r=0;for(t=n?t:t[Symbol.iterator]();;){var i;if(n){if(r>=t.length)break;i=t[r++]}else{if((r=t.next()).done)break;i=r.value}var o=i;if(o.charSpec.validChars===e.validChars&&o.charSpec.invalidChars===e.invalidChars)return o}},e.prototype.put=function(t){var n=this.get(t);return n||(n=new e(t),this.nextStates.push(n),t.repeat&&n.nextStates.push(n),n)},e.prototype.match=function(e){for(var t=this.nextStates,n=[],r=0,i=t.length;r<i;r++){var o=t[r],s=o.charSpec;void 0!==s.validChars?-1!==s.validChars.indexOf(e)&&n.push(o):void 0!==s.invalidChars&&-1===s.invalidChars.indexOf(e)&&n.push(o)}return n},e}(),s=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\"].join("|\\")+")","g"),a=function(){function e(e,t){this.string=e,this.caseSensitive=t}return e.prototype.eachChar=function(e){for(var t=this.string,n=0,r=t.length;n<r;++n){var i=t[n];e({validChars:this.caseSensitive?i:i.toUpperCase()+i.toLowerCase()})}},e.prototype.regex=function(){return this.string.replace(s,"\\$1")},e.prototype.generate=function(){return this.string},e}(),u=function(){function e(e,t){this.name=e,this.optional=t}return e.prototype.eachChar=function(e){e({invalidChars:"/",repeat:!0})},e.prototype.regex=function(){return"([^/]+)"},e.prototype.generate=function(e,t){return t[this.name]=!0,e[this.name]},e}(),c=function(){function e(e){this.name=e}return e.prototype.eachChar=function(e){e({invalidChars:"",repeat:!0})},e.prototype.regex=function(){return"(.+)"},e.prototype.generate=function(e,t){return t[this.name]=!0,e[this.name]},e}(),l=function(){function e(){}return e.prototype.eachChar=function(){},e.prototype.regex=function(){return""},e.prototype.generate=function(){return""},e}(),h=function(){function e(){this.rootState=new o,this.names={}}return e.prototype.add=function(e){var t=this;if(!Array.isArray(e)){for(var n=this.rootState,r=[],i="^",o={statics:0,dynamics:0,stars:0},s=[],h=e.handler.name,d=!0,p=function(e,t,n,r){var i=e;"/"===e.charAt(0)&&(i=e.substr(1));for(var o=[],s=i.split("/"),h=0,d=s.length;h<d;++h){var p=s[h],f=p.match(/^:([^?]+)(\?)?$/);if(f){var v=f,g=v[1],m=v[2];if(-1!==g.indexOf("="))throw new Error("Parameter "+g+" in route "+e+" has a default value, which is not supported.");o.push(new u(g,!!m)),t.push(g),n.dynamics++}else(f=p.match(/^\*(.+)$/))?(o.push(new c(f[1])),t.push(f[1]),n.stars++):""===p?o.push(new l):(o.push(new a(p,r)),n.statics++)}return o}(e.path,s,o,e.caseSensitive),v=0,g=p.length;v<g;v++){var m=p[v];if(!(m instanceof l)){for(var y=f(n,m),b=y[0],w=y[1],x=0,k=r.length;x<k;x++)r[x].nextStates.push(b);m.optional?(r.push(w),i+="(?:/"+m.regex()+")?"):(n=w,i+="/"+m.regex(),r.length=0,d=!1)}}d&&(n=n.put({validChars:"/"}),i+="/?");var C=[{handler:e.handler,names:s}];if(h)for(var _=Array.isArray(h)?h:[h],S=0;S<_.length;S++)this.names[_[S]]={segments:p,handlers:C};for(var O=0;O<r.length;O++){var E=r[O];E.handlers=C,E.regex=new RegExp(i+"$",e.caseSensitive?"":"i"),E.types=o}return n.handlers=C,n.regex=new RegExp(i+"$",e.caseSensitive?"":"i"),n.types=o,n}e.forEach(function(e){return t.add(e)})},e.prototype.handlersFor=function(e){var t=this.names[e];if(!t)throw new Error("There is no route named "+e);return[].concat(t.handlers)},e.prototype.hasRoute=function(e){return!!this.names[e]},e.prototype.generate=function(e,t){var n=this.names[e];if(!n)throw new Error("There is no route named "+e);var r=n.handlers[0].handler;if(r.generationUsesHref)return r.href;for(var o=Object.assign({},t),s=n.segments,a={},u="",c=0,h=s.length;c<h;c++){var d=s[c];if(!(d instanceof l)){var p=d.generate(o,a);if(null===p||void 0===p){if(!d.optional)throw new Error("A value is required for route parameter '"+d.name+"' in route '"+e+"'.")}else u+="/",u+=p}}for(var f in"/"!==u.charAt(0)&&(u="/"+u),a)delete o[f];var v=Object(i.a)(o);return u+=v?"?"+v:""},e.prototype.recognize=function(e){var t=[this.rootState],n={},r=!1,o=e,s=o.indexOf("?");if(-1!==s){var a=o.substr(s+1,o.length);o=o.substr(0,s),n=Object(i.c)(a)}"/"!==(o=decodeURI(o)).charAt(0)&&(o="/"+o);var u=o.length;u>1&&"/"===o.charAt(u-1)&&(o=o.substr(0,u-1),r=!0);for(var c=0,l=o.length;c<l&&(t=p(t,o.charAt(c))).length;c++);for(var h=[],f=0,v=t.length;f<v;f++)t[f].handlers&&h.push(t[f]);t=function(e){return e.sort(function(e,t){if(e.types.stars!==t.types.stars)return e.types.stars-t.types.stars;if(e.types.stars){if(e.types.statics!==t.types.statics)return t.types.statics-e.types.statics;if(e.types.dynamics!==t.types.dynamics)return t.types.dynamics-e.types.dynamics}return e.types.dynamics!==t.types.dynamics?e.types.dynamics-t.types.dynamics:e.types.statics!==t.types.statics?t.types.statics-e.types.statics:0})}(h);var g=h[0];if(g&&g.handlers)return r&&"(.+)$"===g.regex.source.slice(-5)&&(o+="/"),function(e,t,n){for(var r=e.handlers,i=e.regex,o=t.match(i),s=1,a=new d(n),u=0,c=r.length;u<c;u++){for(var l=r[u],h=l.names,p={},f=0,v=h.length;f<v;f++)p[h[f]]=o[s++];a.push({handler:l.handler,params:p,isDynamic:!!h.length})}return a}(g,o,n)},e}(),d=function(e){this.splice=Array.prototype.splice,this.slice=Array.prototype.slice,this.push=Array.prototype.push,this.length=0,this.queryParams=e||{}};function p(e,t){for(var n=[],r=0,i=e.length;r<i;r++){var o=e[r];n.push.apply(n,o.match(t))}return n}function f(e,t){var n=e.put({validChars:"/"}),r=n;return t.eachChar(function(e){r=r.put(e)}),[n,r]}var v=n(4),g=n(9),m=n("aurelia-event-aggregator"),y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function w(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return t||"#"===e[0]||(e="#"+e),t&&n&&(e=e.substring(1,e.length)),e}function x(e,t,n,r){if(_.test(e))return e;var i="";return t.length&&"/"!==t[0]&&(i+="/"),(i+=t).length&&"/"===i[i.length-1]||"/"===e[0]||(i+="/"),i.length&&"/"===i[i.length-1]&&"/"===e[0]&&(i=i.substring(0,i.length-1)),w(i+e,n,r)}function k(e){var t=[];if(Array.isArray(e.route))for(var n=0,r=e.route.length;n<r;++n){var i=Object.assign({},e);i.route=e.route[n],t.push(i)}else t.push(Object.assign({},e));return t}var C=/^#?\//,_=/^([a-z][a-z0-9+\-.]*:)?\/\//i,S=function(){function e(){}return e.prototype.run=function(e,t){return e._commitChanges(!0).then(function(){return e._updateTitle(),t()})},e}(),O=function(){function e(e){this.plan=null,this.options={},Object.assign(this,e),this.params=this.params||{},this.viewPortInstructions={};var t=[],n=this;do{var r=Object.assign({},n.params);n.config&&n.config.hasChildRouter&&delete r[n.getWildCardName()],t.unshift(r),n=n.parentInstruction}while(n);var i=Object.assign.apply(Object,[{},this.queryParams].concat(t));this.lifecycleArgs=[i,this.config,this]}return e.prototype.getAllInstructions=function(){var e=[this];for(var t in this.viewPortInstructions){var n=this.viewPortInstructions[t].childNavigationInstruction;n&&e.push.apply(e,n.getAllInstructions())}return e},e.prototype.getAllPreviousInstructions=function(){return this.getAllInstructions().map(function(e){return e.previousInstruction}).filter(function(e){return e})},e.prototype.addViewPortInstruction=function(e,t,n,r){var i=Object.assign({},this.lifecycleArgs[1],{currentViewPort:e});return this.viewPortInstructions[e]={name:e,strategy:t,moduleId:n,component:r,childRouter:r.childRouter,lifecycleArgs:[].concat(this.lifecycleArgs[0],i,this.lifecycleArgs[2])}},e.prototype.getWildCardName=function(){var e=this.config.route.lastIndexOf("*");return this.config.route.substr(e+1)},e.prototype.getWildcardPath=function(){var e=this.getWildCardName(),t=this.params[e]||"";return this.queryString&&(t+="?"+this.queryString),t},e.prototype.getBaseUrl=function(){var e=this,t=decodeURI(this.fragment);if(""===t){var n=this.router.routes.find(function(t){return t.name===e.config.name&&""!==t.route});n&&(t=n.route)}if(!this.params)return encodeURI(t);var r=this.getWildCardName(),i=this.params[r]||"";return i?encodeURI(t.substr(0,t.lastIndexOf(i))):encodeURI(t)},e.prototype._commitChanges=function(e){var t=this,n=this.router;n.currentInstruction=this,this.previousInstruction&&(this.previousInstruction.config.navModel.isActive=!1),this.config.navModel.isActive=!0,n._refreshBaseUrl(),n.refreshNavigation();var r=[],i=[],o=function(o){var s=t.viewPortInstructions[o],a=n.viewPorts[o];if(!a)throw new Error("There was no router-view found in the view for "+s.moduleId+".");s.strategy===M.replace?s.childNavigationInstruction&&s.childNavigationInstruction.parentCatchHandler?r.push(s.childNavigationInstruction._commitChanges(e)):(e&&i.push({viewPort:a,viewPortInstruction:s}),r.push(a.process(s,e).then(function(t){if(s.childNavigationInstruction)return s.childNavigationInstruction._commitChanges(e)}))):s.childNavigationInstruction&&r.push(s.childNavigationInstruction._commitChanges(e))};for(var s in this.viewPortInstructions)o(s);return Promise.all(r).then(function(){return i.forEach(function(e){return e.viewPort.swap(e.viewPortInstruction)}),null}).then(function(){return function(e){e.previousInstruction=null,e.plan=null}(t)})},e.prototype._updateTitle=function(){var e=this._buildTitle(this.router.titleSeparator);e&&this.router.history.setTitle(e)},e.prototype._buildTitle=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" | ",t="",n=[];for(var r in this.config.navModel.title&&(t=this.router.transformTitle(this.config.navModel.title)),this.viewPortInstructions){var i=this.viewPortInstructions[r];if(i.childNavigationInstruction){var o=i.childNavigationInstruction._buildTitle(e);o&&n.push(o)}}return n.length&&(t=n.join(e)+(t?e:"")+t),this.router.title&&(t+=(t?e:"")+this.router.transformTitle(this.router.title)),t},e}();var E=function(){function e(e,t){this.isActive=!1,this.title=null,this.href=null,this.relativeHref=null,this.settings={},this.config=null,this.router=e,this.relativeHref=t}return e.prototype.setTitle=function(e){this.title=e,this.isActive&&this.router.updateTitle()},e}();function A(e){return e&&"function"==typeof e.navigate}var P=function(){function e(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.url=e,this.options=Object.assign({trigger:!0,replace:!0},t),this.shouldContinueProcessing=!1}return e.prototype.setRouter=function(e){this.router=e},e.prototype.navigate=function(e){(this.options.useAppRouter?e:this.router||e).navigate(this.url,this.options)},e}(),T=(function(){function e(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.route=e,this.params=t,this.options=Object.assign({trigger:!0,replace:!0},n),this.shouldContinueProcessing=!1}e.prototype.setRouter=function(e){this.router=e},e.prototype.navigate=function(e){(this.options.useAppRouter?e:this.router||e).navigateToRoute(this.route,this.params,this.options)}}(),{completed:"completed",canceled:"canceled",rejected:"rejected",running:"running"}),j=function(){function e(){this.steps=[]}return e.prototype.addStep=function(e){var t=void 0;if("function"==typeof e)t=e;else{if("function"==typeof e.getSteps){for(var n=e.getSteps(),r=0,i=n.length;r<i;r++)this.addStep(n[r]);return this}t=e.run.bind(e)}return this.steps.push(t),this},e.prototype.run=function(e){var t=-1,n=this.steps;function r(){if(!(++t<n.length))return r.complete();var i=n[t];try{return i(e,r)}catch(e){return r.reject(e)}}return r.complete=R(r,T.completed),r.cancel=R(r,T.canceled),r.reject=R(r,T.rejected),r()},e}();function R(e,t){return function(e){return Promise.resolve({status:t,output:e,completed:t===T.completed})}}var N=function(){function e(){this.instructions=[],this.options={},this.pipelineSteps=[]}return e.prototype.addPipelineStep=function(e,t){if(null===t||void 0===t)throw new Error("Pipeline step cannot be null or undefined.");return this.pipelineSteps.push({name:e,step:t}),this},e.prototype.addAuthorizeStep=function(e){return this.addPipelineStep("authorize",e)},e.prototype.addPreActivateStep=function(e){return this.addPipelineStep("preActivate",e)},e.prototype.addPreRenderStep=function(e){return this.addPipelineStep("preRender",e)},e.prototype.addPostRenderStep=function(e){return this.addPipelineStep("postRender",e)},e.prototype.fallbackRoute=function(e){return this._fallbackRoute=e,this},e.prototype.map=function(e){return Array.isArray(e)?(e.forEach(this.map.bind(this)),this):this.mapRoute(e)},e.prototype.useViewPortDefaults=function(e){return this.viewPortDefaults=e,this},e.prototype.mapRoute=function(e){return this.instructions.push(function(t){for(var n=k(e),r=void 0,i=0,o=n.length;i<o;++i){var s=n[i];s.settings=s.settings||{},r||(r=t.createNavModel(s)),t.addRoute(s,r)}}),this},e.prototype.mapUnknownRoutes=function(e){return this.unknownRouteConfig=e,this},e.prototype.exportToRouter=function(e){for(var t=this.instructions,n=0,r=t.length;n<r;++n)t[n](e);this.title&&(e.title=this.title),this.titleSeparator&&(e.titleSeparator=this.titleSeparator),this.unknownRouteConfig&&e.handleUnknownRoutes(this.unknownRouteConfig),this._fallbackRoute&&(e.fallbackRoute=this._fallbackRoute),this.viewPortDefaults&&e.useViewPortDefaults(this.viewPortDefaults),Object.assign(e.options,this.options);var i=this.pipelineSteps;if(i.length){if(!e.isRoot)throw new Error("Pipeline steps can only be added to the root router");for(var o=e.pipelineProvider,s=0,a=i.length;s<a;++s){var u=i[s],c=u.name,l=u.step;o.addStep(c,l)}}},e}(),M={noChange:"no-change",invokeLifecycle:"invoke-lifecycle",replace:"replace"},I=function(){function e(){}return e.prototype.run=function(e,t){return V(e).then(function(n){return n instanceof P?t.cancel(n):(e.plan=n,t())}).catch(t.cancel)},e}();function V(e,t){var n=e.config;if("redirect"in n){var r=e.router;return r._createNavigationInstruction(n.redirect).then(function(t){var n=Object.keys(t.params).length?e.params:{},i=r.generate(t.config.name,n,e.options);return e.queryString&&(i+="?"+e.queryString),Promise.resolve(new P(i))})}var i=e.previousInstruction,o={},s=e.router.viewPortDefaults;if(i){var a=function(e,t){var n=e.params,r=t.params,i=t.config.hasChildRouter?t.getWildCardName():null;for(var o in r)if(o!==i&&n[o]!==r[o])return!0;for(var s in n)if(s!==i&&n[s]!==r[s])return!0;if(!t.options.compareQueryParams)return!1;var a=e.queryParams,u=t.queryParams;for(var c in u)if(a[c]!==u[c])return!0;for(var l in a)if(a[l]!==u[l])return!0;return!1}(i,e),u=[],c=function(r){var c=i.viewPortInstructions[r],l=r in n.viewPorts?n.viewPorts[r]:c;null===l.moduleId&&r in e.router.viewPortDefaults&&(l=s[r]);var h=o[r]={name:r,config:l,prevComponent:c.component,prevModuleId:c.moduleId};if(c.moduleId!==l.moduleId)h.strategy=M.replace;else if("determineActivationStrategy"in c.component.viewModel){var d;h.strategy=(d=c.component.viewModel).determineActivationStrategy.apply(d,e.lifecycleArgs)}else n.activationStrategy?h.strategy=n.activationStrategy:h.strategy=a||t?M.invokeLifecycle:M.noChange;if(h.strategy!==M.replace&&c.childRouter){var p=e.getWildcardPath(),f=c.childRouter._createNavigationInstruction(p,e).then(function(e){return h.childNavigationInstruction=e,V(e,h.strategy===M.invokeLifecycle).then(function(t){if(t instanceof P)return Promise.reject(t);e.plan=t})});u.push(f)}};for(var l in i.viewPortInstructions)c(l);return Promise.all(u).then(function(){return o})}for(var l in n.viewPorts){var h=n.viewPorts[l];null===h.moduleId&&l in e.router.viewPortDefaults&&(h=s[l]),o[l]={name:l,strategy:M.replace,config:h}}return Promise.resolve(o)}var L=function(){function e(e,t){var n=this;this.parent=null,this.options={},this.viewPortDefaults={},this.transformTitle=function(e){return n.parent?n.parent.transformTitle(e):e},this.container=e,this.history=t,this.reset()}return e.prototype.reset=function(){var e=this;this.viewPorts={},this.routes=[],this.baseUrl="",this.isConfigured=!1,this.isNavigating=!1,this.isExplicitNavigation=!1,this.isExplicitNavigationBack=!1,this.isNavigatingFirst=!1,this.isNavigatingNew=!1,this.isNavigatingRefresh=!1,this.isNavigatingForward=!1,this.isNavigatingBack=!1,this.navigation=[],this.currentInstruction=null,this.viewPortDefaults={},this._fallbackOrder=100,this._recognizer=new h,this._childRecognizer=new h,this._configuredPromise=new Promise(function(t){e._resolveConfiguredPromise=t})},e.prototype.registerViewPort=function(e,t){t=t||"default",this.viewPorts[t]=e},e.prototype.ensureConfigured=function(){return this._configuredPromise},e.prototype.configure=function(e){var t=this;this.isConfigured=!0;var n=e,r=void 0;return"function"==typeof e&&(n=e(r=new N)),Promise.resolve(n).then(function(e){e&&e.exportToRouter&&(r=e),r.exportToRouter(t),t.isConfigured=!0,t._resolveConfiguredPromise()})},e.prototype.navigate=function(e,t){return!this.isConfigured&&this.parent?this.parent.navigate(e,t):(this.isExplicitNavigation=!0,this.history.navigate(function(e,t,n){return C.test(e)?w(e,n):x(e,t,n)}(e,this.baseUrl,this.history._hasPushState),t))},e.prototype.navigateToRoute=function(e,t,n){var r=this.generate(e,t);return this.navigate(r,n)},e.prototype.navigateBack=function(){this.isExplicitNavigationBack=!0,this.history.navigateBack()},e.prototype.createChild=function(t){var n=new e(t||this.container.createChild(),this.history);return n.parent=this,n},e.prototype.generate=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=this._recognizer.hasRoute(e);if((!this.isConfigured||!r)&&this.parent)return this.parent.generate(e,t);if(!r)throw new Error("A route with name '"+e+"' could not be found. Check that `name: '"+e+"'` was specified in the route's config.");var i=x(this._recognizer.generate(e,t),this.baseUrl,this.history._hasPushState,n.absolute);return n.absolute?""+this.history.getAbsoluteRoot()+i:i},e.prototype.createNavModel=function(e){var t=new E(this,"href"in e?e.href:e.route);return t.title=e.title,t.order=e.nav,t.href=e.href,t.settings=e.settings,t.config=e,t},e.prototype.addRoute=function(e,t){if(Array.isArray(e.route)){k(e).forEach(this.addRoute.bind(this))}else{F(e,this.routes),"viewPorts"in e||e.navigationStrategy||(e.viewPorts={default:{moduleId:e.moduleId,view:e.view}}),t||(t=this.createNavModel(e)),this.routes.push(e);var n=e.route;"/"===n.charAt(0)&&(n=n.substr(1));var r=!0===e.caseSensitive,i=this._recognizer.add({path:n,handler:e,caseSensitive:r});if(n){var o=e.settings;delete e.settings;var s=JSON.parse(JSON.stringify(e));e.settings=o,s.route=n+"/*childRoute",s.hasChildRouter=!0,this._childRecognizer.add({path:s.route,handler:s,caseSensitive:r}),s.navModel=t,s.settings=e.settings,s.navigationStrategy=e.navigationStrategy}if(e.navModel=t,(t.order||0===t.order)&&-1===this.navigation.indexOf(t)){if(!t.href&&""!==t.href&&(i.types.dynamics||i.types.stars))throw new Error('Invalid route config for "'+e.route+'" : dynamic routes must specify an "href:" to be included in the navigation model.');"number"!=typeof t.order&&(t.order=++this._fallbackOrder),this.navigation.push(t),this.navigation=this.navigation.sort(function(e,t){return e.order-t.order})}}},e.prototype.hasRoute=function(e){return!!(this._recognizer.hasRoute(e)||this.parent&&this.parent.hasRoute(e))},e.prototype.hasOwnRoute=function(e){return this._recognizer.hasRoute(e)},e.prototype.handleUnknownRoutes=function(e){var t=this;if(!e)throw new Error("Invalid unknown route handler");this.catchAllHandler=function(n){return t._createRouteConfig(e,n).then(function(e){return n.config=e,n})}},e.prototype.updateTitle=function(){if(this.parent)return this.parent.updateTitle();this.currentInstruction&&this.currentInstruction._updateTitle()},e.prototype.refreshNavigation=function(){for(var e=this.navigation,t=0,n=e.length;t<n;t++){var r=e[t];r.config.href?r.href=w(r.config.href,this.history._hasPushState):r.href=x(r.relativeHref,this.baseUrl,this.history._hasPushState)}},e.prototype.useViewPortDefaults=function(e){for(var t in e){var n=e[t];this.viewPortDefaults[t]={moduleId:n.moduleId}}},e.prototype._refreshBaseUrl=function(){if(this.parent){var e=this.parent.currentInstruction.getBaseUrl();this.baseUrl=this.parent.baseUrl+e}},e.prototype._createNavigationInstruction=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=e,r="",i=e.indexOf("?");-1!==i&&(n=e.substr(0,i),r=e.substr(i+1));var o=this._recognizer.recognize(e);o&&o.length||(o=this._childRecognizer.recognize(e));var s={fragment:n,queryString:r,config:null,parentInstruction:t,previousInstruction:this.currentInstruction,router:this,options:{compareQueryParams:this.options.compareQueryParams}};if(o&&o.length){var a=o[0],u=new O(Object.assign({},s,{params:a.params,queryParams:a.queryParams||o.queryParams,config:a.config||a.handler}));return"function"==typeof a.handler?B(u,a.handler,a):a.handler&&"function"==typeof a.handler.navigationStrategy?B(u,a.handler.navigationStrategy,a.handler):Promise.resolve(u)}if(this.catchAllHandler)return B(new O(Object.assign({},s,{params:{path:n},queryParams:o?o.queryParams:{},config:null})),this.catchAllHandler);if(this.parent){var c=this._parentCatchAllHandler(this.parent);if(c){var l=this._findParentInstructionFromRouter(c,t);return B(new O(Object.assign({},s,{params:{path:n},queryParams:o?o.queryParams:{},router:c,parentInstruction:l,parentCatchHandler:!0,config:null})),c.catchAllHandler)}}return Promise.reject(new Error("Route not found: "+e))},e.prototype._findParentInstructionFromRouter=function(e,t){return t.router===e?(t.fragment=e.baseUrl,t):t.parentInstruction?this._findParentInstructionFromRouter(e,t.parentInstruction):void 0},e.prototype._parentCatchAllHandler=function(e){return e.catchAllHandler?e:!!e.parent&&this._parentCatchAllHandler(e.parent)},e.prototype._createRouteConfig=function(e,t){var n=this;return Promise.resolve(e).then(function(e){return"string"==typeof e?{moduleId:e}:"function"==typeof e?e(t):e}).then(function(e){return"string"==typeof e?{moduleId:e}:e}).then(function(e){return e.route=t.params.path,F(e,n.routes),e.navModel||(e.navModel=n.createNavModel(e)),e})},b(e,[{key:"isRoot",get:function(){return!this.parent}}]),e}();function F(e,t){if("object"!==(void 0===e?"undefined":y(e)))throw new Error("Invalid Route Config");if("string"!=typeof e.route){var n=e.name||"(no name)";throw new Error('Invalid Route Config for "'+n+'": You must specify a "route:" pattern.')}if(!("redirect"in e||e.moduleId||e.navigationStrategy||e.viewPorts))throw new Error('Invalid Route Config for "'+e.route+'": You must specify a "moduleId:", "redirect:", "navigationStrategy:", or "viewPorts:".')}function B(e,t,n){return Promise.resolve(t.call(n,e)).then(function(){return"viewPorts"in e.config||(e.config.viewPorts={default:{moduleId:e.config.moduleId}}),e})}var q=function(){function e(){}return e.prototype.run=function(e,t){return U(e,"canDeactivate",t)},e}(),D=function(){function e(){}return e.prototype.run=function(e,t){return Q(e,"canActivate",t)},e}(),z=function(){function e(){}return e.prototype.run=function(e,t){return U(e,"deactivate",t,!0)},e}(),H=function(){function e(){}return e.prototype.run=function(e,t){return Q(e,"activate",t,!0)},e}();function U(e,t,n,r){var i=function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];for(var i in t){var o=t[i],s=o.prevComponent;if((o.strategy===M.invokeLifecycle||o.strategy===M.replace)&&s){var a=s.viewModel;n in a&&r.push(a)}o.strategy===M.replace&&s?W(s,n,r):o.childNavigationInstruction&&e(o.childNavigationInstruction.plan,n,r)}return r}(e.plan,t),o=i.length;function s(e){return r||$(e)?a():n.cancel(e)}function a(){if(o--)try{return K(i[o][t](e),s,n.cancel)}catch(e){return n.cancel(e)}return n()}return a()}function W(e,t,n){var r=e.childRouter;if(r&&r.currentInstruction){var i=r.currentInstruction.viewPortInstructions;for(var o in i){var s=i[o].component,a=s.viewModel;t in a&&n.push(a),W(s,t,n)}}}function Q(e,t,n,r){var i=function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];var i=arguments[3];var o=t.plan;Object.keys(o).filter(function(s){var a=o[s],u=t.viewPortInstructions[s],c=u.component.viewModel;(a.strategy===M.invokeLifecycle||a.strategy===M.replace)&&n in c&&r.push({viewModel:c,lifecycleArgs:u.lifecycleArgs,router:i}),a.childNavigationInstruction&&e(a.childNavigationInstruction,n,r,u.component.childRouter||i)});return r}(e,t),o=i.length,s=-1;function a(){if(++s<o)try{var e,u=i[s];return K((e=u.viewModel)[t].apply(e,u.lifecycleArgs),function(e){return function(e,t){return r||$(e,t)?a():n.cancel(e)}(e,u.router)},n.cancel)}catch(e){return n.cancel(e)}return n()}return a()}function $(e,t){return!(e instanceof Error)&&(A(e)?("function"==typeof e.setRouter&&e.setRouter(t),!!e.shouldContinueProcessing):void 0===e||e)}var G=function(){function e(e){this._subscribed=!0,this._subscription=e(this),this._subscribed||this.unsubscribe()}return e.prototype.unsubscribe=function(){this._subscribed&&this._subscription&&this._subscription.unsubscribe(),this._subscribed=!1},b(e,[{key:"subscribed",get:function(){return this._subscribed}}]),e}();function K(e,t,n){if(e&&"function"==typeof e.then)return Promise.resolve(e).then(t).catch(n);if(e&&"function"==typeof e.subscribe){var r=e;return new G(function(i){return r.subscribe({next:function(){i.subscribed&&(i.unsubscribe(),t(e))},error:function(e){i.subscribed&&(i.unsubscribe(),n(e))},complete:function(){i.subscribed&&(i.unsubscribe(),t(e))}})})}try{return t(e)}catch(e){return n(e)}}var X=function(){function e(){}return e.prototype.loadRoute=function(e,t,n){throw Error('Route loaders must implement "loadRoute(router, config, navigationInstruction)".')},e}(),Y=function(){function e(e){this.routeLoader=e}return e.inject=function(){return[X]},e.prototype.run=function(e,t){return J(this.routeLoader,e).then(t).catch(t.cancel)},e}();function J(e,t){var n=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];var r=t.plan;for(var i in r){var o=r[i];if(o.strategy===M.replace)n.push({viewPortPlan:o,navigationInstruction:t}),o.childNavigationInstruction&&e(o.childNavigationInstruction,n);else{var s=t.addViewPortInstruction(i,o.strategy,o.prevModuleId,o.prevComponent);o.childNavigationInstruction&&(s.childNavigationInstruction=o.childNavigationInstruction,e(o.childNavigationInstruction,n))}}return n}(t).map(function(t){return function(e,t,n){var r=n.config?n.config.moduleId:null;return function(e,t,n){var r=t.router,i=t.lifecycleArgs;return e.loadRoute(r,n,t).then(function(e){var t=e.viewModel,o=e.childContainer;if(e.router=r,e.config=n,"configureRouter"in t){var s=o.getChildRouter();return e.childRouter=s,s.configure(function(e){return t.configureRouter.apply(t,[e,s].concat(i))}).then(function(){return e})}return e})}(e,t,n.config).then(function(i){var o=t.addViewPortInstruction(n.name,n.strategy,r,i),s=i.childRouter;if(s){var a=t.getWildcardPath();return s._createNavigationInstruction(a,t).then(function(t){return n.childNavigationInstruction=t,V(t).then(function(n){return n instanceof P?Promise.reject(n):(t.plan=n,o.childNavigationInstruction=t,J(e,t))})})}})}(e,t.navigationInstruction,t.viewPortPlan)});return Promise.all(n)}var Z=function(){function e(e,t,n){this.steps=[],this.container=e,this.slotName=t,this.slotAlias=n}return e.prototype.getSteps=function(){var e=this;return this.steps.map(function(t){return e.container.get(t)})},e}(),ee=function(){function e(e){this.container=e,this.steps=[I,q,Y,this._createPipelineSlot("authorize"),D,this._createPipelineSlot("preActivate","modelbind"),z,H,this._createPipelineSlot("preRender","precommit"),S,this._createPipelineSlot("postRender","postcomplete")]}return e.inject=function(){return[v.b]},e.prototype.createPipeline=function(){var e=this,t=new j;return this.steps.forEach(function(n){return t.addStep(e.container.get(n))}),t},e.prototype._findStep=function(e){return this.steps.find(function(t){return t.slotName===e||t.slotAlias===e})},e.prototype.addStep=function(e,t){var n=this._findStep(e);if(!n)throw new Error("Invalid pipeline slot name: "+e+".");n.steps.includes(t)||n.steps.push(t)},e.prototype.removeStep=function(e,t){var n=this._findStep(e);n&&n.steps.splice(n.steps.indexOf(t),1)},e.prototype._clearSteps=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=this._findStep(e);t&&(t.steps=[])},e.prototype.reset=function(){this._clearSteps("authorize"),this._clearSteps("preActivate"),this._clearSteps("preRender"),this._clearSteps("postRender")},e.prototype._createPipelineSlot=function(e,t){return new Z(this.container,e,t)},e}(),te=r.getLogger("app-router"),ne=function(e){function t(t,n,r,i){var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,t,n));return o.pipelineProvider=r,o.events=i,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.inject=function(){return[v.b,g.a,ee,m.a]},t.prototype.reset=function(){e.prototype.reset.call(this),this.maxInstructionCount=10,this._queue?this._queue.length=0:this._queue=[]},t.prototype.loadUrl=function(e){var t=this;return this._createNavigationInstruction(e).then(function(e){return t._queueInstruction(e)}).catch(function(e){te.error(e),re(t)})},t.prototype.registerViewPort=function(t,n){var r=this;if(e.prototype.registerViewPort.call(this,t,n),this.isActive)this._dequeueInstruction();else{var i=this._findViewModel(t);if("configureRouter"in i){if(!this.isConfigured){var o=this._resolveConfiguredPromise;return this._resolveConfiguredPromise=function(){},this.configure(function(e){return i.configureRouter(e,r)}).then(function(){r.activate(),o()})}}else this.activate()}return Promise.resolve()},t.prototype.activate=function(e){this.isActive||(this.isActive=!0,this.options=Object.assign({routeHandler:this.loadUrl.bind(this)},this.options,e),this.history.activate(this.options),this._dequeueInstruction())},t.prototype.deactivate=function(){this.isActive=!1,this.history.deactivate()},t.prototype._queueInstruction=function(e){var t=this;return new Promise(function(n){e.resolve=n,t._queue.unshift(e),t._dequeueInstruction()})},t.prototype._dequeueInstruction=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Promise.resolve().then(function(){if(!e.isNavigating||t){var n=e._queue.shift();if(e._queue.length=0,n){e.isNavigating=!0;var r=e.history.getState("NavigationTracker");if(r||e.currentNavigationTracker?r?e.currentNavigationTracker?e.currentNavigationTracker<r?e.isNavigatingForward=!0:e.currentNavigationTracker>r&&(e.isNavigatingBack=!0):e.isNavigatingRefresh=!0:e.isNavigatingNew=!0:(e.isNavigatingFirst=!0,e.isNavigatingNew=!0),r||(r=Date.now(),e.history.setState("NavigationTracker",r)),e.currentNavigationTracker=r,n.previousInstruction=e.currentInstruction,t){if(t===e.maxInstructionCount-1)return te.error(t+1+" navigation instructions have been attempted without success. Restoring last known good location."),re(e),e._dequeueInstruction(t+1);if(t>e.maxInstructionCount)throw new Error("Maximum navigation attempts exceeded. Giving up.")}else e.events.publish("router:navigation:processing",{instruction:n});return e.pipelineProvider.createPipeline().run(n).then(function(n){return function(e,t,n,r){t&&"completed"in t&&"output"in t||((t=t||{}).output=new Error("Expected router pipeline to return a navigation result, but got ["+JSON.stringify(t)+"] instead."));var i=null,o=null;A(t.output)?o=t.output.navigate(r):(i=t,t.completed||(t.output instanceof Error&&te.error(t.output),re(r)));return Promise.resolve(o).then(function(e){return r._dequeueInstruction(n+1)}).then(function(e){return i||e||t})}(0,n,t,e)}).catch(function(e){return{output:e instanceof Error?e:new Error(e)}}).then(function(r){return function(e,t,n,r){e.resolve(t);var i={instruction:e,result:t};if(n)r.events.publish("router:navigation:child:complete",i);else{r.isNavigating=!1,r.isExplicitNavigation=!1,r.isExplicitNavigationBack=!1,r.isNavigatingFirst=!1,r.isNavigatingNew=!1,r.isNavigatingRefresh=!1,r.isNavigatingForward=!1,r.isNavigatingBack=!1;var o=void 0;if(t.output instanceof Error)o="error";else if(t.completed){var s=e.queryString?"?"+e.queryString:"";r.history.previousLocation=e.fragment+s,o="success"}else o="canceled";r.events.publish("router:navigation:"+o,i),r.events.publish("router:navigation:complete",i)}return t}(n,r,!!t,e)})}}})},t.prototype._findViewModel=function(e){if(this.container.viewModel)return this.container.viewModel;if(e.container)for(var t=e.container;t;){if(t.viewModel)return this.container.viewModel=t.viewModel,t.viewModel;t=t.parent}},t}(L);function re(e){e.history.previousLocation?e.navigate(e.history.previousLocation,{trigger:!1,replace:!0}):e.fallbackRoute?e.navigate(e.fallbackRoute,{trigger:!0,replace:!0}):te.error("Router navigation failed, and no previous location or fallbackRoute could be restored.")}var ie,oe,se,ae,ue,ce,le,he,de=n(1),pe=n(2),fe=n(3),ve=n(0);function ge(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function me(e,t,n,r,i){var o={};return Object.keys(r).forEach(function(e){o[e]=r[e]}),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},o),i&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(i):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(e,t,o),o=null),o}var ye,be,we=(ie=Object(de.X)("router-view"),oe=Object(v.r)(ve.b.Element,v.b,de.N,L,de.L,de.h,de.g),ie(se=Object(de.bb)(se=oe((ae=function(){function e(e,t,n,r,i,o,s){ge(this,"swapOrder",ue,this),ge(this,"layoutView",ce,this),ge(this,"layoutViewModel",le,this),ge(this,"layoutModel",he,this),this.element=e,this.container=t,this.viewSlot=n,this.router=r,this.viewLocator=i,this.compositionTransaction=o,this.compositionEngine=s,this.router.registerViewPort(this,this.element.getAttribute("name")),"initialComposition"in o||(o.initialComposition=!0,this.compositionTransactionNotifier=o.enlist())}return e.prototype.created=function(e){this.owningView=e},e.prototype.bind=function(e,t){this.container.viewModel=e,this.overrideContext=t},e.prototype.process=function(e,t){var n=this,r=e.component,i=r.childContainer,o=r.viewModel,s=r.viewModelResource,a=s.metadata,u=r.router.currentInstruction.config,c=u.viewPorts&&u.viewPorts[e.name]||{};i.get(xe)._notify(this);var l={viewModel:c.layoutViewModel||u.layoutViewModel||this.layoutViewModel,view:c.layoutView||u.layoutView||this.layoutView,model:c.layoutModel||u.layoutModel||this.layoutModel,router:e.component.router,childContainer:i,viewSlot:this.viewSlot},h=this.viewLocator.getViewStrategy(r.view||o);return h&&r.view&&h.makeRelativeTo(pe.a.get(r.router.container.viewModel.constructor).moduleId),a.load(i,s.value,null,h,!0).then(function(r){if(n.compositionTransactionNotifier||(n.compositionTransactionOwnershipToken=n.compositionTransaction.tryCapture()),(l.viewModel||l.view)&&(e.layoutInstruction=l),e.controller=a.create(i,de.b.dynamic(n.element,o,r)),t)return null;n.swap(e)})},e.prototype.swap=function(e){var t=this,n=e.layoutInstruction,r=this.view,i=function(){var e=de.B[t.swapOrder]||de.B.after,n=t.viewSlot;e(n,r,function(){return Promise.resolve(n.add(t.view))}).then(function(){t._notify()})},o=function(n){return e.controller.automate(t.overrideContext,n),t.compositionTransactionOwnershipToken?t.compositionTransactionOwnershipToken.waitForCompositionComplete().then(function(){return t.compositionTransactionOwnershipToken=null,i()}):i()};return n?(n.viewModel||(n.viewModel={}),this.compositionEngine.createController(n).then(function(r){return de.x.distributeView(e.controller.view,r.slots||r.view.slots),r.automate(Object(fe.kb)(n.viewModel),t.owningView),r.view.children.push(e.controller.view),r.view||r}).then(function(e){return t.view=e,o(e)})):(this.view=e.controller.view,o(this.owningView))},e.prototype._notify=function(){this.compositionTransactionNotifier&&(this.compositionTransactionNotifier.done(),this.compositionTransactionNotifier=null)},e}(),ue=me(ae.prototype,"swapOrder",[de.S],{enumerable:!0,initializer:null}),ce=me(ae.prototype,"layoutView",[de.S],{enumerable:!0,initializer:null}),le=me(ae.prototype,"layoutViewModel",[de.S],{enumerable:!0,initializer:null}),he=me(ae.prototype,"layoutModel",[de.S],{enumerable:!0,initializer:null}),se=ae))||se)||se)||se),xe=function(){function e(){var e=this;this.promise=new Promise(function(t){return e.resolve=t})}return e.prototype.findNearest=function(){return this.promise},e.prototype._notify=function(e){this.resolve(e)},e}();var ke,Ce=de.ab("<template></template>")(ye=function(){})||ye,_e=Object(v.r)(de.g)(be=function(e){function t(t){var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this));return n.compositionEngine=t,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.loadRoute=function(e,t){var n=e.container.createChild(),r={viewModel:null===t.moduleId?Ce:/\.html/i.test(t.moduleId)?function(e){var t,n,r,i=/([^\/^\?]+)\.html/i.exec(e)[1];return t=Object(de.X)(i),n=Object(de.hb)(e),t(r=n(r=function(){function e(){}return e.prototype.bind=function(e){this.$parent=e},e}())||r)||r}(t.moduleId):Object(i.d)(t.moduleId,pe.a.get(e.container.viewModel.constructor).moduleId),childContainer:n,view:t.view||t.viewStrategy,router:e};return n.registerSingleton(xe),n.getChildRouter=function(){var t=void 0;return n.registerHandler(L,function(r){return t||(t=e.createChild(n))}),n.get(L)},this.compositionEngine.ensureViewModel(r)},t}(X))||be;var Se=r.getLogger("route-href"),Oe=Object(de.W)("route-href")(ke=Object(de.S)({name:"route",changeHandler:"processChange",primaryProperty:!0})(ke=Object(de.S)({name:"params",changeHandler:"processChange"})(ke=Object(de.S)({name:"attribute",defaultValue:"href"})(ke=Object(v.r)(L,ve.b.Element)(ke=function(){function e(e,t){this.router=e,this.element=t}return e.prototype.bind=function(){this.isActive=!0,this.processChange()},e.prototype.unbind=function(){this.isActive=!1},e.prototype.attributeChanged=function(e,t){t&&this.element.removeAttribute(t),this.processChange()},e.prototype.processChange=function(){var e=this;return this.router.ensureConfigured().then(function(){if(!e.isActive)return null;var t=e.router.generate(e.route,e.params);return e.element.au.controller?e.element.au.controller.viewModel[e.attribute]=t:e.element.setAttribute(e.attribute,t),null}).catch(function(e){Se.error(e)})},e}())||ke)||ke)||ke)||ke)||ke;function Ee(e){e.singleton(X,_e).singleton(L,ne).globalResources(we,Oe),e.container.registerAlias(L,ne)}n.d(t,"configure",function(){return Ee}),n.d(t,!1,function(){return _e}),n.d(t,!1,function(){return we}),n.d(t,!1,function(){return Oe})},main:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});n("aurelia-framework");t.configure=function(e){e.use.standardConfiguration().developmentLogging().plugin("aurelia-nano-bar"),e.start().then(function(){e.setRoot("app")})}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,